%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1701.i216.hacker.P.m008.c15.hacker character set.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: AKSANA
%%CreationDate: 1/26/2017
%%BoundingBox: 0 0 399 400
%%HiResBoundingBox: 0 0 398.9507 399.3218
%%CropBox: 0 0 398.9507 399.3218
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">shablon450_450</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2017-01-26T00:50:24+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-01-26T00:50:24+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2017-01-26T00:50:24+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXzX+fv5r62/mWX&#xA;ylot3JZ2FkFXUJbdikk0zKHZC6nkEQHiVHU1r2xV43b3moabeR6lptzLaX0Dc0uInKuD41H44q+r&#xA;vyV/NiLzvpDWl+yx+Y7BR9bQUUTx9BcIoAAqdnA6H2IxV6VirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir4I1fU31XzNqOpueT311PcE+Pquz/xxVOL&#xA;LyZ5nvYGnh0+X0F+1JIBGOlf2yu1MplqIDq5UNFllvw/Pb70t0zXtQ8j+cLG8sLqGXULUiYrbyLN&#xA;HxJKvBMUJALKKMPAg5OExIWGnLiMDRI+D670380bG6toJ7iwntfWRXMZKs6clB4sDx3FaHJtbJNN&#xA;8x6NqRC2typlP+6X+B/oDdfoxVMsVdirsVdirsVdirsVdiqRa1568n6IzR6pq9tbzL9qDmHlHzjT&#xA;k/4ZCWSI5l2Wk7H1WoF48cpDvrb5nZjr/nt+WisQNSkcD9pbaeh+9Ach48Xaj2P7RI+gf6aP6020&#xA;r80fy/1RxHZ65bc22VJi1uxPSgE4jrkhlierg6n2e12EXPFKvL1f7m2UgggEGoPQ5Y6Z2KuxV2Ku&#xA;xV2KuxV2KoK+1rS7EkXNwqOP91j4m/4FanL8emyT+kOJqNfhw/XIA93VKn89aMrUCTuP5lVafiwz&#xA;KHZmTyddL2gwA8pH4D9aV+YPzd8p6Dpsl9f+ugFRDAFUySv2RAG6/PYZTn0csYskOTpO1ceolwwE&#xA;vl+15If+crtYXV0eTQYE0X1AJIxI7XQj6Eh/hjLd6cPb3zEdm+jbW5t7q2hurdxLbzossMi9GRxy&#xA;Vh7EHFVTFXYqhdWuIrfTbmWSUQqI2AkYkUJFB036+GKvgi/Tzj5Y1a+g024hS/t0CSlEhnMatRgQ&#xA;XWTgWHfY5CcBLYtuLLKBuOxYLrfmLzbq8vpaxqF5eNX4YJ5JGUEb0WMniPoGMccY8hSJ5Zz5klMN&#xA;NjfTdIE+8d3O37sgkMAN+XtQU6e2Ta2c+W/zK87afDFNPeHUICSTb3Q5kr0/vP7yvhvir2Lyh510&#xA;rzLamW0Jhu4gDcWjn40PiCPtLXo36sVen+WfPM8Dpaao5ltz8KXJ3dP9b+Yfjir0BWV1DKQysKqw&#xA;3BB7jFW8VdirsVdiqA13XtK0LTJtT1S4W3tIRVnbqx7Kg6sx7AYJSAFlytHo8upyDHjHFI/iz5Pm&#xA;/wA+fnb5k8wyyWulu+k6RUhY4m4zyL4yyL0r/Ku3zzByZyeWwfV+x/ZLT6UCWQDJl8/pHuH6T9jz&#xA;d3ABdzQdWY5SBb1GTJHHEykRGI5k8ghf0lbEkKGenUqNsuGnk8vl9tNBCVAyl5iP66VYLuCevptU&#xA;jqp2OQnjMebt+ze2tNrb8KVyHMHY/j3My8m/md5r8qSotlcmewBHqadcEvCR34jrGfdfprhhlMWn&#xA;tX2f02tHrjU/5w2Px7/i+lvIvn3RfOOl/XLAmK4iot5ZSEepEx+X2lP7Ld/Y1GZ2PIJDZ8k7Y7Gz&#xA;aHJwT3ifpl0P7e8MkybqHYq7FXYq1I6RozuwVEBZmOwAG5JwgEmgiUhEWeQYPr3nGecvDYOYLVah&#xA;rjo7fL+UfjmXUMJ9Q4p/YP1urJy6oXA+Hi7/AOKXu7h9rForiC4dxHL6jLQuw3Hxb9cme0cp5UGq&#xA;HYOnHPil7z+qltzM0HEiJpAa1K02xj2llHcVn2Bpzy4h8f128b/ObzGun63pl7dWJ1DS44GR7Rma&#xA;Fg7yESMjgMFenp9iMo1molmqvTTm9l6GGl4gfXxH3fimHXV55T1KwN5od4ewm065+G4jqOtOjrUf&#xA;aUkbitDmFCUrqQ/U7TLCFcUDt3Hn+19a/lP5rWTyh5fsL4eky6faxwSmlCFhVVDbnr2P8c2uTRHw&#xA;xOPdu87p+1x40sWTapEA/HkXoma93bsVeOfnB57NpY3csLBoLL93bJ2kuG+EMfEKT9wPjir491G6&#xA;votWfUFuJPrMzmb6zyPMsxqx5fPFU0gnsfMMJt50S31lRWGRAFS4P8tBsr/LZvniqVa5J/pMcI2W&#xA;JAOPgW+L9RGKptZMsmnwMv7Kgfdsf1YpRWi6xcaFrlrqlsxHpuPVQdHjP20P+suKH0/c6fLBbxzl&#xA;0eOSnEoeQoRUGvTfLZ4jEWXE0+thlkYxvZmP5f68710m4apUF7Rj1oPtJ9HUfTlTls2xV2KuxVpm&#xA;VVLMQFAqSdgAMUgW+U/zZ/MKfzbrzpbyMNEsmKWMXQORs0zDxft4L9Oa/Lk4j5PtPs32JHRYAZD9&#xA;9P6j3f0fh18/gwXKno0o1S6Lyeip+BPte7f2Zm6fHQt8q9su2jly/loH93D6vOX/AB3778l0MfCM&#xA;L36n55kPDoeVmguRImx+1/XIyjYpytFrJ6bNHLD6on8D4p3HIskauvRhUZrZCjT75pdTHPijkh9M&#xA;wCnXlTzRqflnW7fVtOeksJpJESQksZ+1G9Oqt+HXrhhIxNho7R7Px6vCcWQbH7D0IfX/AJe12x17&#xA;RbPV7FuVteRiRAeqnoyN/lKwKn3zYxlYt8K1ujnps0sU/qia/b8eaYZJxXYq7FWGeddaZpf0ZA1E&#xA;WhuCO7HcL9HXNppMXBjOU862ec7T1Pi5o6cfTY4v1MD1meFoHtQT6/wFEpXlVth75rCbeiAAFDk1&#xA;odtGsK3EbH414yxkUHMMd/4YEoHzpq+n6VYC7u9yh4Qxg05u/Re/hUnwxVIdUuvLD+SXk83Qw6la&#xA;3bFUlskDemJAQohdyHqvE/FXr2zGzY5mXFE/BzdPmxCJjOPxeG+SPLWj3Hm1NGW+KRX0rRQ3DLRz&#xA;EoL0p0V3C0Fe+Z2nxeJMRO1up12oOHFKYHFT6osrSCys4LO3Xjb20aQwrUmiRqFUVPsM6iMREADo&#xA;+d5JmcjI8ybejeUNaa+tDbTtyubYD4j1ZOx+Y6HNFr9PwS4hyL2XYuvOaHBL64/aEw8wX5sNGu7p&#xA;TR0QiM+Dv8Kn7zmvd2+ZfzgDnyxARWgvIy/y9OTr9OKsZ8nfkgnmvQI9XuNYW0tWeQiKOEyyL6bF&#xA;WUksgFQK98yMWn4xzdZq+0vBkY8PJlGk/kf+XVqysy6nq8ykHdxElR4CFUcf8FmeOzQPqNOkn7Qz&#xA;l9EfkPx9zLrDyj5VjnkuLPy5p8dwpcma6UXE1YwC5VX5ykqDvxGTngwYq4jz8mrDqdbqr4BsNjZr&#xA;7NmAfnl5bubG5tdUKIqSo1rMsUTQokkTyIoo6oSSI27U48SCQRmv1RhIgwBA83f9mQyY4mGWUTLn&#xA;sXkU+8RHdCP6Ziu0fVflmZr38utImY8pFtLdmPuEA/Uc2Ooj6AfIH7HmtBPh1BH9KcftK6wvJLO9&#xA;guo/twurgeNDuPpzXPSvaI3V0V1NVYBlPsd8VbxV2KsE/OvzC+i+QL30W4XOostjCw6gSgmT/kkr&#xA;DKs8qi9J7J6EajXRv6Yes/Dl9tPlPNe+0qdzMIYHk7qNvmdhkoR4jTru1tcNLpp5esRt7zsPtSex&#xA;sry8uAtvDJO1asI1Zz+APXNmA+CTmSbJ3Kdf4d8wf9Wy6+XoSf8ANOR4x3svDl3FKtVs7q2dVuIX&#xA;hcEgrIpUg/IgZJgiNIm5QtGeqGo+RzC1MaNvqvsNrvE08sJ54zt/Vl+2/mj8x3uHvX/ONnmGSS11&#xA;Ty/K1RAVvLVT2V/glHyqEP0nMvTS5h819vNEBLHnHX0n4bj9Pye25lPnjsVWTzJBBJM/2IlZ2+Si&#xA;pyUY8RA72GSYhEyPIC3k088k88k8hrJIxdj7k1zqDiHBwdKp86jqJDKMp+ri4vttB3WnW13MskpN&#xA;UXiFBp3rWvXOYyYzCVHm+h4M8csBOJsFVUW9pCIoxxVfsoOuQbXi35teZUu9fi0eNgfqcZlmPb1p&#xA;KELT/JQA/TirBHvrs2klmJXFqziVoKnhzAIDUPs2Kp7+SnlWfVfOra1Kn+4/Ri7cj0e5dSkaj/VU&#xA;lz4beObHs7CZT4ukXR9u6sQxeGPqn9z6KzevFpn5bvGtNatnrRZGET/J/h/A75jazHxYyPi7DsvP&#xA;4eoie8182UfmC7L5fIHR5kU/Lc/wzmn0B495n0RNa0O604kK8q1hc9FkU8kPyqN/bFWJflx+Y+ie&#xA;TdHvdA1/1/0ot2zW2mW8LzXDqyKGoqjiFBStWYV7ZlYMoiKdP2hpJZJgjlW70fy1rMV/phe01OGC&#xA;3jcqyVikkViAxRuLMvJeW4BzczMZkSEeKw8njjkxgwlPgAPUc/MX0c1/p1nLdGe9JgdgwkJYJIxR&#xA;vtKrxVPMj9obV8a5PJDIYjhEQfPox02XBGcvFM5R/o7WfPk8+/Mr8w/K135euvLumafDc3E8qu2q&#xA;cWUQIjKwSMM8pZ9iC3OnE0zTavLM+kz4vdyev7L02IDjhi8Puv6v2fN4zKhWNwaFSKhhtv7g5hO3&#xA;fU35eQyL5Ot9PlUrLDawoynqGMIWn3rm71GOoRB/m08RpdQPHnIcvEJ+BKnmke3exaBIZNDsGPU2&#xA;8YP0IBiqPxV2KvFv+cmZpBpWhwg/u3nndh7oigf8TOYup5B9A9gYDxcp68MftJ/U8BzEfTUFq0kE&#xA;doWlmWEKQylqEEjtTev3ZdgJEuTzPtZgx5dGYzyDHRsX1I6d/wAk3/LLXLzT/McFjrF1J+iNZRPq&#xA;s0hPCN9/S4D7Co5JT4RStK9Mt1mMyjfc+T9mZ445kfzvve8iy06HlbBZGVqCU+lK9T2+NRxFM1D0&#xA;Rk8w/O3Uv0TYQaJplwwvtRIkmANGit0avIlafbYcR4gNmdoYkm+jq+1cseERI3LzbRFZ+czTJI4+&#xA;BwgVdx4qgAXpmRqZ9HqvYXs4x4tRxiiOHhBs87uXdy26prmK+jPTP+ce5pI/zBCKfhms50f5Aq/6&#xA;0GX6f6nkfbaAOhvunH9I/S+m8znyB2Kpf5hYrol6R19Jh9B2OZGkF5Y+9we0jWnn/VeX50z56tki&#xA;VxvsexGY+o00co3597naLtDJp5XHkeYYL+Y3nb/C0EMEEaz6heK7RVPwxhaAO69TUnYexzRanTHE&#xA;QCbt7Ls/tAakEgEU+ebq+upbt72SQyXMkvqPI3VmZqmvzzGdijrjWrFbKSYMPUKken3rT9WKH075&#xA;T8vWHl/QLTTLKjRxIGkmHWWVt3lJ3ryP3DboM6nDiEIiIfONXqJZshnLr9nkm+WuMvhYrKjDqGBF&#xA;OtQcEhsygakCz7zzbGby5OVFTCySU9g1D+Bzkn055birxj86PIGq6p5o0vWNOsbu8tZkW21JdPt/&#xA;rc6ek5YSejVedVanxEL8IqcMRZa8kxGNmvjsyryndafoOhTw38rWbwytJJZ3P1RJ41YKAPq9kOMV&#xA;T+xTkCd86HR5YwxXI1X46PCdp6bJm1IEBdjpf3y/sYn5t8+XGrg21qptrAGu/wDeSHp8RHQU7D78&#xA;12q7Qlk2jtH7S9B2Z2DDB68nqn9g9362Hxia6nEFshllP7IIAA/mZjRVA7kmgzXAO+lIAWXovkby&#xA;t+X1rqVmfMHmK0vdZmYfVdLsm+sRRydQHljDozj/AIEHxzLwGEDxSol1GtOfOODGDGJ5nkT8+T2i&#xA;0vNKsOX1VJXZgAzMRQ0/z8Mvza/j5uBpuwZQ619qWuecjECnIkhevXtmuJeliKAD2bTbc2+nWtu2&#xA;zQwxxn5qoGBkicVdiryH/nJPTnm8s6ZfqKi0uzG/ss0Z3++MDMbUjYF7r2DziOonD+dC/kf2vnG6&#xA;uFghMh3PRR4nMbHDiNPoHbHakNFpzllueUR3noP1+TF9V8v+Zr+RL2GwvLuCUfu3jhkdBTailVIp&#xA;mwjERFB8S1/aGbV5DkyyuX2DyA6Jz5SsNdUfoPXNHvzot03wT/VZmezlbb1kHHdD/uxO436gZZE9&#xA;C63JE/VHn97MofOP5x+VpZNCXT21aGImO1vJ7eeYoo6ESxleaU3HKp/VmJk0cCXY4O0sgj3+9hfm&#xA;O1873tzLd3On391qV38U9ybaU0FKACi0XYUAHQZfCAiKDjTyGZs80q0byt5uiuxMml30IQbn6vKK&#xA;17brvjKIIouRo9dm02QZMUjGX4597KImn+KO4iaC5jPGaF1KspIr9ltxUZgZMfCafaOwu2I6/Bx8&#xA;pjaQ8/1Hp8uj1r/nHLTnn853d6R+7s7Jxy/y5XVVH/Ahss0w9TpPbrOI6SMOspj5AH9j6QzNfJ3Y&#xA;qhtTtzc6dcwL9qSJ1X5lTT8cswz4Zg9xcfV4+PFKI6xLyjOqfN3Yq8I/PKVX84QIK/urGNWqCBUy&#xA;SNtXrs2aHtM/vB7v1vaez0awHzkfuDy5/snxANM17vUtlhkmjMUSl5H+FEUVZiegAHUnFX2XoBvD&#xA;oOmtexNBeNawG5gcUZJDGpdWHiG2zqNPlE8YkDdh8412CWHNKEhRBP7EflziorS7c3Go20AFfUkU&#xA;H5V3/DK80+GBPk5Gkx8eWMe+QepXNvFc20tvKKxzIyOPZhQ5yr6Q8a1Cxmsb2a0mFJIWKk+I7Eex&#xA;G+KqUdzc2xaa2VGuFR/RWQkIXKkLyK70r1pk4T4TbTqMIyQMS+V/zEufMA86yS3+k6bpWowOZJk0&#xA;1eMcpm+MvISzszMG67demCcrKcOHwxVk+9B3GrGT7Jp7ZFuQTzczVmrirenXs1jqVrewf31rMk0X&#xA;+tGwYfqxV9eKaqDuKitDscUJ35S0ltR1qFStYICJpz2op2H+yagxV6virsVdiqR+d/LcfmTytqOj&#xA;NQPcxH6u56LMh5xN8uaivtkJx4hTseydedJqYZekTv7jsfsfDuvtLBqEtncKY5bV2hkiPUSIeLg+&#xA;4IpkMEOEebuva3tcavUcMDeLGNvMnmf0fB7X+XMrN5L0sgmnB6b+ErZc8oyPm/8AMfvxV3N/5j9+&#xA;Ku5v/MfvxV3N/wCY/firw7zjd+n581MFtndFev8AxjWhynNC4vS+yvaf5XVgE/u8npl+g/A/YS+m&#xA;fyI8pSaH5P8Ar1ynC91lhcMpFCsCikKn5gl/9lgwQqPvb/bDtIajVcET6MXp/wA7+L9XwekZe8m7&#xA;FXYq8380aW1hqknEUgnJkhPbf7S/Qc6PRZ/ExjvDwfa2k8HMa+mW4/Hkk+Zbq3if5ytFP5l4sg5Q&#xA;WsUfLv8AbZ/o+3mh7SN5fg9r7PxrT33yP6Ai/wAt/wAt/L2teWLi51S25SXExW2mRirokYAqp6bs&#xA;T1BG2XaLSRyYyZdS4va3amTDnEYHkNx72Pecfyzn8sqLoLFNYFwkd0ihXDEEhXTqOh3FRmLqdHLF&#xA;vzi7Hs/tWGo2+mfd+1mn5Sed9V1SaTRb8tc+hCZbe7Y1cIjKpVyd2HxCh65l9mZj/d1sHVe0GkA/&#xA;fXuTRenZt3mGV+RtLZ7h9RkH7uIFIa93PUj5Db6c1faWehwDq9H7P6QmZynkNh72a5pXrWMec/LB&#xA;1KH65aLW+hWhQf7sQdv9YdsVePeb/Mtl5X0O71W/2FsOKQH4WkmOyRCvcn7hv2xV8i6z5g1TWNWu&#xA;tUvZi11dyGSQivEdgqg1oqqAB7Yqs0+LWNRu0s7COS5upK8IYl5MeILHYDsBXFUKbq4P+7Diqvp2&#xA;oTWuo2t2XZvq80ctKk/YYN/DFX25Y2s99PHBaL60k1PTC7gg71r4e+KvV/LegxaPYCEEPcSfFcSj&#xA;u3gPYdsVTXFXYq7FUj88eYk8t+UdW1tqcrK3d4QehmPwxKfnIyjFXwPeveXFxJPLKWklYszGpZmY&#xA;1Zifc4q99/LVSvkfSlPURv8A8nXxVk2KoC8spZZp3W3glEsAiDSlg1QWPFqBvg+LtQ/wVRsa8Y1U&#xA;0FABQdNvCuKrsVfP35hLN/jrVGVgV9RKr7emmKvsj8rfM/8AiXyFo+qua3DwCG6/4zQExSH/AGRT&#xA;l9OKksqxV2KuJABJNANyTiryXzt+eH5XNp721renWbpeRi/R4DrHIB8POVyicW6HiW27dMv0+c4p&#xA;WHD1uijqMfDL4HueJ61+cGuTkpYrHYR9uIEsv0s44/8AC5lZe0py+n0uu0/YGGH1kzPyH4+LGbTR&#xA;POPmi8a5t4Li79XZ7uYngQBTeSTbb2NcxoYcmU3RPm5+TVafTR4SRHyH6g948raOdG8v2OmMQZLe&#xA;ICUr9kyMSzkVptzY50ODHwQEe54fWZ/Gyyn3n7OjDPzsvvT0nTrOgpNM8xPf9ynGn/JbMDtSXpA8&#xA;/wAfe7n2cx3klLuFfP8AsQX5HaaeGp6ow2Zkto29x8cg/FMj2XDnL4NntHm3hD4/oH6Xs+h6Fdar&#xA;OAgKWyn97Meg9h4nM3U6mOIefc6jQdnz1Ettojmfx1ekWtrBa28dvAvCKMUUZzs5mRs8y95hxRxx&#xA;EYigFXINjsVeZfnR+Ruk/mVpkSC+k0rU7Rmkt54wHgkdgB+/i25bCgYEEVPXpir5F85f845fm15W&#xA;lk9XRJdUs0qVvtLDXcZUdWKIPWQD/LQYq9N/Jb8u/wDDmiLqupW5j1vUkDkSKQ8Nud0joehb7TfQ&#xA;O2KvIPzH8iarZ+f7/T9J0+e6junF1Zw20TykpOa8VVATRZOSj5YqyvyJ/wA4qfmh5lljl1O1HlzT&#xA;GoXuL8fv+Nd+FqD6nL2k4D3xV9q+VvKun+XtMt7O3rNNFEkUt24+OTgoFf8AJBpWgxVOcVdirsVd&#xA;irHvzA8nw+cPKd95fluWtBdBClwo5cXicSIStRyXku4rir5h13/nHT8zdMlYW1lFqsArSe0mTp2r&#xA;HKY3r8gcVZp5T06/0jy/Z6ZqVvJa31urLPA6nkpLswrSo6EYqnTfCvIkU9jU/cN8VUvrEfg//AP/&#xA;AExZcJXo6uaCo/1gV/XTFBFOeRUbiak/5ILD7wCMUME1D8kfP3mzzLdalY2sVvpV06mG/upVRCFR&#xA;VJ4Lzl6j+TFX0H+WXkRPJHlWLRBdm9l9R555yvBTJJSoRamigKO/virK8VdirsVfMn/Kg7S5/PTW&#xA;tHuJZ7Py3e2Ta1aNalAxLzpG0ALhwvGR5Ox+Hj44q9h0T8kfyz0eIrBo0dxKRQ3N0zTyV8VLkqh/&#xA;1AMlCRibDDJjE4mJ5H4K995BdanT5wUHSKXYgeAZR/DNti7THKQ+TzGp9njd45fA/rSqTylr6Gn1&#xA;XkOxV0I/XmWNdiPV1suxtSP4ftH63hP5+i60/wAxWOn3xEDCyW4jiZlrSWZ0LbHv6X4Zq9fnjkkO&#xA;E2AHo+xNHPDjlxipE/Z+Lew/kf5F0z/AOl3stytyLsNcSRwMCoeRqhXZSfiVeIZdiDkcetMIcMR8&#xA;WefsmObMcmQ2OgetQwwwRLFCgjjQUVFFAMw5SMjZ5uzhCMBwxFAL8DN2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVYYYTMs5RTMisiyUHIKxBZQfAlR92Kr8VdirsV&#xA;Yf5x/KL8vPOWpxan5k0n6/fQwrbRTfWLmGkSuzheMMsan4pGNSK4qhvK35M+SPKd+175cS80yR2r&#xA;JFFeXDQuAfsvFI7o47fECcVZzirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYv55lnSPT&#xA;0imkhEs/FzGxUkU9snjFyAaNTkMMZkOYY1FL6qStHqFxJ6QqwW4J8etPlmL2XqZagS8TFLFw1zve&#xA;75WByr7XF7QyywGPBkjk4u6tuXmWF/8AKzh/vu9/6Sz/AM05mcUO5u8PP/OH+l/atf8ANGNF5Ot4&#xA;qjqzXhA/FceKHcvh5/5w/wBL+1yfmjG68kW8ZfEXhI/BceKHcvh5/wCcP9L+1KtT/PfRdPYxyNfS&#xA;zA0MUN0XYfM8Qo+ROPFDuXw8/wDOH+l/ahrH/nKq7020eC20Nr0vMZRPdXZ5CMgD0wojO4p15fRl&#xA;ZcqINb83r35T/nRoH5hwzwwQNp2s2i+pcabI4k/dcuIkikATmtSA3wggnp0JCXoeKuxV2KuxVjf5&#xA;h+YdT8v+VbrVNOgE1xEUUsw5LGrsFMhUEFqV/idgcx9VllCBMRu24ICUqKH/ACx80at5l8rrqepw&#xA;LFN6zxRyIpVJY0C/vACT+0WX5jBpMsskLknPARlQZZmS0uxV2KuxV2KuxV2KuxV2KpR5t816N5U8&#xA;v3mvaxN6NjZpyam7ux2SOMbVd22A/hir4m/Mb8+PPfnLUZHF9NpWkBj9V0uzkaNVUH4TK6lWlfxJ&#xA;2r0AxVK/Kn5rfmX5dukuNL1279NTVra5kae3cV3DRSll38RQ++KvsD8nfzh0v8wtKcMi2Wv2SqdQ&#xA;sAaqQdhNATu0ZOx7qdj1Usq9ExV2KuxV2KuxVivnv/pV/wDMR/AZZi+oOLrf7mXuSLlcG3n9ZOAC&#xA;njuDXY+GQ7O0mfCJDLl8W+W3Lnfvv9Dp9bqcOWUTjx+H378+TwK6uUt4ubd6hfc0JA+mmB6JgJ1h&#xA;da1kw3iu6Hgltaxn4AStZHc1H2Sfn2xVMkQabqtstm5FveyejLDyqlZKDnQntXp9GKCx3zHpD6Xq&#xA;TQ8SsMgEsHLrwbtX26fjiURJ680DA3VfpxZPQ/8AnH+e8g/OPQRaDkZXnjlStAYmtpDITuPsgcvm&#xA;MVfbuKuxV2KuxVj35h/8oTrH/MO36xmNrP7qXub9N/eD3viTWf8AnIL81dP9Ty9pOr/ovS9Nmmgg&#xA;jtYohIwWVvieV1eSu/ZgPbJaWNY4+5jnNzPvSGP88/zgjlMq+btSLNWoadmXfwVqqPuy9qZZoH/O&#xA;Wv5yaW6/W7611iIf7rvbaMbf69t9Xf7ycVenaJ/znBpjIq655XmhcD4pbK4SUMfERyrFx/4M4qyJ&#xA;f+c1PyrKknTNbBFPh+r2m/y/0rFUu1T/AJzc8mRox0ry7qN09PhW6eC2BPuY2uafdir0n8i/zUvP&#xA;zL8q3+vXVhHpv1fUpLKG2idpf3ccEMoLOwWrVmPRRir0bFVO5ube1t5Lm5lSC3hUvLNIwREVRUsz&#xA;NQAAdzirzXVf+ckvyc065Nsdd+tyo/CQ2kE80Y/yhKqemy/6jHFXzr/zkR+ctt571e00/Q5pD5a0&#xA;9Q8fNWjM1y4+KRkahoi/CtR/N44q8ltYw55HoO3vilGYqzb8ndU1/SPP2mappFvNcrbyquoxwqWB&#xA;tJDxmD9F+zUry/aA74QCWEpgc33hgZOxV2KuxV2KsV89/wDSr/5iP4DLMX1Bxdb/AHMvclFx/vPL&#xA;/qN+rNiXl48w+cdfsnvNKnjjqJVHqRU68k3A+npmqeyeRGW7tr+VIG4tdr6QY0+zIQDuenTFXpWh&#xA;+WLi1kt5b6VH+qLwtoYx8K0oORqPtbYqnX5rabHf+U9O8wJCsUkDfVbjgOK/BRI6A1YlkpU1/ZzH&#xA;wmpSh8f1uVqBxRjkA5+k/Dl9jye3HU/RmQ4r2f8A5xUs7af80LqWaMPJa6VPNbseqSGaCIsPfhIy&#xA;/Tir65xV2KuxV2Kse/MP/lCdY/5h2/WMxtZ/dS9zfpv7we9+b3mT/lItV/5jJ/8Ak62T0/8Adx/q&#xA;j7mGb6z7yluXNbPvyX8r+UfMXmi9t/NOovpen2Om3Oox3aRpKBLa8JP3kbpKroI+bFCvxU498VfR&#xA;ukfnf5T8veW9PPm/SrPU9A1L1ItJ8xaLZxC1uVhIWVLqwl9OW2mSo5oFZT+ztir58/5yA0zyZZfm&#xA;LNL5PMQ0XUrS11GOCAcYomu4hLxRNuCsrLJx/Z5UoBtirzfFX2r/AM4Vf+Ss1X/tuXH/AFB2mKvc&#xA;9Z1jTNF0q61XVLhbTT7KNprm4evFUUb7CpJ7AAVJ2G+Kvhz85Pzv1/8AMTVHtonex8rW7n6lpgND&#xA;JQ7TXPH7ch6gfZToN6syrzmOOo8B2GKU5tfLtvqFsyWdww1VFJSzkUcZgOqwyA/3lOiFfi7GtASB&#xA;bXKZHPkl9qvGKnuf6YGx6P8Alz+UOs+apo7mdJINMNGqqkyyL1JUUNBx7nr2FKkV5MggN9z3M8WK&#xA;WQ0Nh1keQ/WfJ9c+Qvy+8ueV9HtobKyjScASNIVqwcg7itSDRqFvtHuTTJwmTEWwnijGZrfzZZhQ&#xA;7FUNDqdhNdS2kc6tcwmkkVaMD179fowkFAkCSAeSJwJdiqVeYNB/S6W6i4Nu1u/qK4UPvTwJwg0b&#xA;DGcBIUeRYnq1naaZc/VbvWJhIVD0W2jYcTUePtlnjz73E/k/D/N+0/rYTOZFmkWG0tniDERuYYFJ&#xA;UHYkentUZHxD+AG38rDz/wBNL9b5h89Qx22vajGihfSvZhGEpRaSH4e3TpkHIAfQM/nbQ9OsrC91&#xA;lLa2hvY0lWOKCGWYo6hiUj9Na0r1ag98n4h/ADj/AJWHn/ppfreb/mR+ZUPmK1Oj6Rbm30ZZBLyl&#xA;jhjlkZfssUiFE/4M5Emze1tkMYjsCa7rJH2l52FdaAVHhvUHA2My/Kjz3H5J88WGvXEcklgFe3v4&#xA;ojRzDMtCQDseDBX4nrSm3XFX275f8xaJ5h0uHVdFvI76wnH7ueI7V7qymjKw7qwBHfFUxxV2KuxV&#xA;j35h/wDKE6x/zDt+sZjaz+6l7m/Tf3g9783vMn/KRar/AMxk/wDydbJ6f+7j/VH3MM31n3lLcua3&#xA;qf5QXureQPM/l/zNrmlRHyp5p9TS3ur4K0DWkkqR3UgFT/d9+YoVqMVfSlneXUEjWmqfllbab5Mc&#xA;IbtprjTn0a1tI5bh5LxbdF9PkY5EdqDk9SOiKSq+NPO2raLq/mvUtR0TTY9I0m4mLWenxFiscY2F&#xA;ORNOVOXEbLWg2GKpHir7V/5wq/8AJWar/wBty4/6g7TFWJ/85efmVPPqVv5CsJSttaLHd6zxJHOZ&#xA;xzghbYfCiESeBLL3XFXzhGKCvjilFR/ZGKphGzBleNirAgqwNCCNwQcUPT/yz8n+WvOvm7TrnWbn&#xA;6nBJJw1O2RR+/vR8UIqfhRbqjctvtgqKF1yR3FtUDwnhPwfYOi6Fp+j2otrOMKg/aoK0rWm2Uwxi&#xA;PmT1crJlMqFVEcgOSYZY1KH6QsOXH6zFyrSnNa1+/I8Q72fhy7ivuLiO3t5biQ0jiRpHP+Soqckw&#xA;LyWW4kaR7qQlZmZpXZSQQzEs1CPnnTDDEYhGQ2AfPparJPUGeMkSlLb9D1HRUvE0m0F67PdmNWnL&#xA;05Bm3Kmn8taZzRfQIg1ujHdERndgqKCzMTQADcknAl51rXnvU3v3GmTejaJ8KfAjF6ftHmGpXtiq&#xA;A/xt5n/5bf8AklF/zRirv8beZ/8Alt/5JRf80Yq+RfzCmlvvM2s3LnlLPqVzK7EAVLzOSaDbviqF&#xA;1LXtW1e5tptRuGuHs7WGxtuX2Y7e1iEcSKo2AAWpp1Yk9ScVWg1FfHFW8VWSU479O+Ks1/Jn8yLv&#xA;yN5xtrmSZhol462+rwVJQxMaetxFfjiPxAgVpVe5xV90AggEGoO4IxV2KuxVj35h/wDKE6x/zDt+&#xA;sZjaz+6l7m/Tf3g9783vMn/KRar/AMxk/wDydbJ6f+7j/VH3MM31n3lL0Kq6sy81BBZa0qPCoy5r&#xA;fWVp5bn84eX9O8p61+V0+j+TbeH61oGsaXqkE7WQuR6jztNPIkUwkryYMeX+STirHbv8gfOV1pl5&#xA;pcH5l2+o+Q9Jf4re3mu75oABypLYW3qxoVAqBz99q4qxvzV5D/LDTfyZ1C/8pajb+atWstThj1XX&#xA;JPW0+e1V6LHFBZy/3qOSasCe534/Cq8RxV9q/wDOFX/krNV/7blx/wBQdpir5X83a/P5i806trs4&#xA;pJqV3Nc8KkhRI5ZUFeyqQoxSlw6DFW1k4PQ/ZOKo+2lBHGv+qcUMo8oaymn6rEZ3ZbO4HoXpQlWE&#xA;TEHmpG4eJgJEI3DKMlE0WvLGxtzHJ9DSf85O6d5c0U6Xr9jcah5z092tbi3t1WOGfgAY7oymoRZ0&#xA;IaiqxBrtSmCQo0nHMSiCGCW//OS/nDWNWli1oQ6ZoVyOCxWasXi32Z5Ks7gg/Fx+gdsozwlKPpc7&#xA;R5ccJ3MWPuepaVpUURiuY7lXRwHWT0o5loRVWUScgR91c08J0d3o8nqjt95H3Mv1zzLayeX1shPG&#xA;19PwjkWJXRAoNSQGHQqvGle+dH2fWScfxyeI7aJw4p0Dy+/qx/RrD6/q9paEco2kEk4IqPTj+Ngf&#xA;Zqcfpzd9o5OHHXe8j2Fp+PPxHlDf9T1TOfe3WyxRTRPFKiyRSKVkjYBlZWFCCDsQRiqXf4X8s/8A&#xA;Vosv+keL/mnFXf4X8s/9Wiy/6R4v+acVd/hfyz/1aLL/AKR4v+acVfA/n704/OOuQRKEjTULoKii&#xA;gAE7gAAdABiqTQxmgHd/1e2Kphqum6no+oSafqds9pdQhfUglHF15IHXkO1VYHFVHFWiKihxVCsK&#xA;Ejw2xV91fkbr8muflX5fu5mDTwwGzloamto7QKW/ymSNWPzxVneKuxVj35h/8oTrH/MO36xmNrP7&#xA;qXub9N/eD3vkbS/+cU/zA82mbzBbX+mWmnajPPNbrPLOZuBlYAlI4WXt/PktMbxx9zHOKmfejpP+&#xA;cJvzDCExa3pDSfsqzXKg/MiFv1Ze1ITz5+Sf/OR7eXdL0S6gj1fQNChMVlaaVNHwAqW5tCRDJLJv&#xA;9rgT95qq8hsr3zv5G1tbm3a/8vaxF/MstrLSu6sjheS+KsKHFWXfnR+dmqfmTLpMbo9rp+n2sQlt&#xA;X9Jg99RhPcKyIjBXDABSabV2rirzLFX2r/zhUD/yqvVPfXLin/SJa4q8h1j/AJxS/N6xuWjs7O11&#xA;WIfZntrqKMEHf7NyYGB8dsVSyX/nHP8AOeEhX8tSEkV+C4tJB96TMMVQcn5D/m6rFG8r3hKmlVCM&#xA;PoIYg4q6L8jvzejP/KMXtP8AVX/mrFUuv9K1Lyzq5s/MmmTW1zAA8tlNWIup+yQwB5Ix7r17HEII&#xA;PRD3+sXer6jc6ndqI5LlgVjFaIigIiCpJoqKAKnCTZRCAiKDKfKH5Vec/NBinttNuYdJkoTqLQSF&#xA;GX/iqg+P6NvE4GT6G0fy/ruk6dbadDZXrw2kKW8ReKQmkahVP2fbtlGTTxl0crFq5w2val9xYarL&#xA;JVrSVSuwHBhTevhlmGHh8ubTqZ+NfENuVeTMPy90+at1qFxGUfa2iDAg7fFId+xPH7szdVqfFI8g&#xA;6ns7QDTCQ52fs6MzzFdk7FXYq7FXYq/Pjz/aun5h+ZYHNTFqt6rkdPhuHGKvYP8AnHX8mZdU1CHz&#xA;lr8BXSrVg+lW0gp9YlU7SkHrGh6fzN7A1VT3/nK7yEJILPznZx/FHxstVp/KSfQlPyJKE+64q+bU&#xA;aop3HUYq2TTFUM5BYkdMVfXn/OJ0sj/llcq32YtUnVPkYYW/WxxV7RirsVY9+Yf/AChOsf8AMO36&#xA;xmNrP7qXub9N/eD3oP8AKf8A8l7o/wDqS/8AJ98dH/dRXU/3hYL+e35zT+Wv+db8uyga5Mga8uhR&#xA;jbRuPhVf+LXG+/2Rv3FMloeB23nXzpZXDahBr1+t9Xm8xuZX5Eb/ABhmKuPZgcVfVn5YeaIfPvkK&#xA;z1DVIIbi5DNb6hE6K0ZniNC3A1A5IQ3tXFUxn/K/8s7h/Un8paLLJ05vp1qxp8zHiqpZ/lv+Xdk/&#xA;Oz8raRbP15Q2FtGa9OqxjFWQRRRRRrHEixxqKKigBQPAAYquxV2KuxV2Ksd86/l95S86WCWfmGxW&#xA;6EJLW1wpMc8LMKExyrRhXaq9DQVBpiqQ+WvyH/K7y/Is1voyXl0hqLi+Zrk7dKI/7oEeISuKvQAA&#xA;AABQDYAYq7FXYq7FXYq7FXYq7FXYqxib8r/y9n1qfWp/L9lNqVy/qTzyxCQNJ/OUaqcj1Lcak74q&#xA;yZEREVEUKigBVAoABsAAMVS/zD5e0jzFo1zo2sW/1rTbxQtxByZOQVg6/EhVhRlB2OKvK7n/AJxR&#xA;/LKVy0VxqlsN6LFcRECv/GSGQ4qgZ/8AnEbyM00Zi1jVVgH97G7W7s2/7LCFAv0qcVTvRv8AnGH8&#xA;qNOblcWt1qrfs/XbhqAg/wAtuLdT9IOKvTtM0rTNKsYrDTLWKysoRSK2gRY41qamiqANzucVRWKu&#xA;xVj35h/8oTrH/MO36xmNrP7qXub9N/eD3pb+WbXa/ljpzWaJJdrBObeOQlUaQSycAzCpALdTjo/7&#xA;qK6n+8L5b8ueVdb82+atfh1uZ7XXrWX1bn1QCzyO7rKWX4acHA2Hjh1Gfw62btHpRmsE0QmPmH8q&#xA;dd060nuLeWK7too2aSSvpFQoqxbmeIC+JbK8etjLYim7L2ZOIsEH7Px83pn/ADiXqfr6Hr9gr8oo&#xA;LmC5WnStxGyE/wDTuMzHWPesVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVY9+Yf/AChOsf8AMO36xmNrP7qXub9N/eD3vjfzN+cnn30ovLmlapNpGk6XyhjS&#xA;xdoJZHDszvLMhEhqzkBQQtKbVqSdLGsUfcjObmfelvkvznrNheSapFKbnVtPUyEzszm4tnIWWGRi&#xA;eRoaMp7dewyzLjE40Vw5jjlxBOfPv5yXuu6SdNgszp1pcAG6iMzTyyUNQhYheKV6qBv8tsow6QQN&#xA;ncuVqdfLIOECgy//AJxr/NnSfLt0fLusaVDYpqsqKNdidqlwSIUukdmVU+MgMnEL+0u7MMt176zx&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVj35h/8oTrH&#xA;/MO36xmNrP7qXub9N/eD3vz81AtPrN4yKS0s8hVRuas5oNsswioD3Bhk3kfe1ZTzaTqzC7ieJ0WW&#xA;C5gdSrjmjIysrUoQT3ywG2BBGxV/L/l/XfM2ri20y0e7n/vJFWgVEHd2YhVHbc5GeSMRZLPHilM1&#xA;EWnFvpN4mqppk0ZjuzOtu8ZIqHLBetade9aZIEEWGEokGi/QbCh2KuxV2KuxV2KuxVZLNDDGZJnW&#xA;ONftO5CgfMnFVO11CwvATaXMVwF6mJ1en/Ak4qr4q7FXYq7FXYq7FXYq7FUHfatZ2e0jcpO0a7t9&#xA;Phmr7Q7YwaXaZuX80c/2fFyMOmnk5ckln803TEiCJY17Fqsf4DOU1Htbmkf3cYxHnuf0B2EOzojm&#xA;bQp8w6tWvrAe3BP6Zrz7Sa2/r/2Mf1N35LF3ferQ+Z9QQ/vFSQd6ih/D+mZWH2q1MfqEZD3V936m&#xA;uXZ8DysJvY6/ZXJCMfRlPRX6H5NnTaD2i0+c8J9E+48vgf7HBzaKcNxuEzzfuG7FXYq7FXYqx78w&#xA;/wDlCdY/5h2/WMxtZ/dS9zfpv7we98DK4sPMr3Mieslneeo8deHMRy8ioO9KgZPH6sY84/oYyPDk&#xA;9xR/mTV7bzDr9/qjFq3kzyRpOeTohPwJy8EX4RTtk8cOGIC5snHMy7098o+fdX8qaXcafpNlZr9Z&#xA;bnLdOshnJ6CriRdlFeIpt1yvLpxM2SW3Dq5Y41EBOPyg0K/80/mbpQmZ5/RuRqOoTsS54W7CUl2N&#xA;T8bgJX3y4ChQcaRJNl9rYUOxV2KuxV2KuxVgf5u/mjaeRNCWSNVuNaveSadasdtvtSyU34JXp3O3&#xA;iQq+SNY8xeYPM2oPfa5fzX0pJI9RiVWv7MaD4UX2UDFUKr3FnKl3ZSvbXMJ5JLEzI6nxVlIIOKvp&#xA;T/nH/wDN688yJJ5b8wT+trFsnqWV29OdxCv2lfxkTrX9peu4JKr2nFXYq7FXYq7FUPqN7HY2Fxey&#xA;I8kdvG0rpGvJyFFSFHjkZy4QT3Moxs0851384Yf0NaXGjogu53ZLqCY1khC+AUitex6fTml1XaRk&#xA;ODHcZEc+73ebsMWiqXq5IG282Wl5q9xaJR4YYzLJfcwUIAFSa+7UrXOBzaHIMYySJ4pHl1doCOQT&#xA;e3uIbiFJ4HEkUg5I67gjMCcDE0RRDJUyCuxV2Kp3ouuNEy2101YTskh6r7H2/VnW9hdvnGRizG4d&#xA;D/N9/l93udfq9GJeqPNk2d+6d2KuxV2Kse/MP/lCdY/5h2/WMxtZ/dS9zfpv7we94D57/LnyWPyE&#xA;uPOS6aqeZESH/T0klWvPUEgYtGG9IkxtSpWuOj/uoo1H94XzWA5NFNMyWlUFzewISkmw7H4h+OKv&#xA;qn/nDi60q98ta/OYlGuxXiJcygGv1RogYFFSafvFlJ/2qKvobFXYq7FXYq7FVG+vbWxsp727kENr&#xA;axvNPK3RUjUszH5AYq+HPzD86XvnHzXea1cVWKRvTsoCa+lboT6afOm7f5ROKpXbpwiUdzufpxVe&#xA;wBBB6HbFVvl7XL7QNdstYsW43dhMs0fgeJ3Vv8lhVT7Yq+7dB1qy1vRbLV7JuVrfQpPF4gOK8T7q&#xA;dj74qj8VdirsVdirE/zKvNSttAUWUyQrPKIbguCSUKM1AQVoDx3zXdp5DHHt1NOd2fASyb9Bb531&#xA;Wzlkn+tRMtwlwxAMO6hq9Buc08JdHayUUl9B1iMnMttIQaqD2APf3xIvdD0fyXrF9cNFZ21kkWm2&#xA;6cbiRT8XqEV51PXkR0zme1NNCIMpSJnI7e7ubIlmWaJk7FXYq7FWV+XL83FqYHNZIKAHxQ9Pu6Z6&#xA;P7M9oHNh8OR9WP8A3PT5cvk6XXYeGVjkU2zpXBdirsVY9+Yf/KE6x/zDt+sZjaz+6l7m/Tf3g97y&#xA;bz5/6ynd/wCpb/8AdVjwaP8AuorqP7wvktAOIOZTQ2WUdSMVew/84jeZTp/5o3ej+o31XXLORViB&#xA;opuLb98jEd+MYlA+eKvszFXYq7FXYq7FXi3/ADk750bTPLNt5btXK3WssXuiDuLWEgkHv+8koPkG&#xA;GKvm+w8ta3ewS3UNpJ9Tt19W5uWHGOOPu7Mei++Kp35Z8p3XmXUV0zR7yyub90Lx2wuER3Va14eo&#xA;UD0oa8ScVVPNnkrV/Kd5FZa/La2V3OnqxQvcR8mSpXl1pSqkYqxa6sLqIGZoyYGNUmWjxmvg61X8&#xA;cVfSP/OLXm03mgX/AJZnesumSfWLQH/fE5PNR/qS1P8AssVe5Yq7FXYq7FWJ+f4vrdpHZjc0MoHi&#xA;w2H4VGcl7Ra84suOH8O5P3D5bu17Njzl8HiN/Z2ltYz2doUgjAJQBqAVNT/bkRIk2XYyAGwY5Iqr&#xA;aj0gPSJFZm2aQj+UdlGXjm1sg8pxTXd4kS3r2UbASSSKfhJj3UNuo69K5ga48ML4eM/rZR3eqfX7&#xA;H/lpi/4Nf65yX5XL/Nl8i2u+v2H/AC0xf8Gv9cH5XL/Nl8iqrFNFKvKJ1kUGlVIIr9GVzhKJqQIQ&#xA;vyCpl5enMWpxj9mQFG+kVH4jN97N5zj1cR0lcf0/eHE1sLxnyZfnpzonYq7FWPfmH/yhOsf8w7fr&#xA;GY2s/upe5v0394PexLRvJ9p5y/I6Hy3dyvDDfwtSWIhWV4bszR7srinONeW3TBo/7qK6j+8L5Cm8&#xA;qWEcJYySsy9d1A6+FP45lNKhNoNnAkbGMkSoXQsTuAzJXandTih61/zirDBB+ZU4iiReemzgniK/&#xA;3sR69e2KvrjFXYq7FXYq7FXyr/zk9oXm2084HXq10u9iit9MuwOQhMSVeAkj4HZ+cinuDsdmoqif&#xA;+cX9I07zHofmKx1iCK9v9Mu4ryzW/D3ECz3MLRrLLBzRZuP1fbkaj9krWuKvVfLflvzLr2v21/54&#xA;tfLt5/h6RpPL+oaDLeRTROaKElgk5LwZRWnq0qKcW64BIHk2TxSh9QItGeffLF1Zam3nLytpel3P&#xA;m6SEWL3mtXE0dvHb9apGgcF6jj8JQ0J3OJIHNEMcpGoiy8b/AOchtKfQvJ+gakYtPs/NuqXddRn0&#xA;JJLe0nRIX/3W7t6tDIPjcVOG2JiQaKWf841Q+Zbn8w7e+trdfq8EEqazNGOEQhlQ8AaVXm0qqQq9&#xA;adKAnFD63xV2KuxV2KsW80/8dCP/AIxD/iTZ557W/wCMx/4WP91J3PZ392ff+p59rflqJLK9uw4Y&#xA;RwTN6JT7XwMQKg5iYO1DIxhw9Y735+5z5PNbLTLvUGE0x9OHYAgU2HZB4Z0spiLSBbI7ON7OEQwc&#xA;Ag/yTUnxJ5ZQTbaDSv8AXk4tHOpevXhG3Gh/4LI8KeJYklnzrFBxYbhmRl/WBhorYW3r6hNbulre&#xA;TWcp3WSB3j3HTkFK8hkDjhI+qIl7wxlulPlLzPr2n+aoLXWLyeaGRvQkSaV3SkmySLzJH2qb/PKO&#xA;0NDjlhJhEAjfYDo1xJB3e3aV/wAdK2/4yL+vOf7I/wAax/1wuo/u5e5m+etvOuxV2Kse/MP/AJQn&#xA;WP8AmHb9YzG1n91L3N+m/vB70H+U/wD5L3R/9SX/AJPvjo/7qK6n+8L5L816edO1TVNPbrZ3MsB/&#xA;55Slf4ZktKB1z0ZNH0GWJg3G1mgmp2kS7mkoffhMhxQ9L/5xQ04yectXvyKra6f6IPg08yEH7oji&#xA;r6kxV2KuxV2KuxViP5jaz+XMeh3Wk+c9Ts7W0u46NBNKgn/yXij+KQsp3Uqp3xV8s+SL+Kw806pp&#xA;vlTUY9SklaN9EuSHtkurizmWeGFxKEKG4i9W33/afrTEpiaNvRL7/nIPy15c0+3m0q11RfMTXMaX&#xA;mhX9p9WWlGja2nuJaJFR5A4kTkaqKrxLZVjxCLm6zXSz1YqkSf8AnIjQr/VdZ0vzhFPpbWrQ/ou1&#xA;0xU1WBvTVy0q3dv/AHrTeqF48QqcRvy5ZLJDiFNWk1Rwz4gLeSfmLr9xrWvxXOqrJpca0S0trwsZ&#xA;LSzYgRC4jRWZZWJeZlUEqJAu5GGMaFMM+Y5JmR6vpv8AKDUfys07y/baH5W12xvrk/HckSKlzPM1&#xA;A0jQuRJ7KKbCgyTS9HxV2KuxV2Kse81wGsE46box/EfxziPa/Abhk6bx/SP0u17NnzixyaKOaJ4p&#xA;ByjkUo48Qwoc4yMjEgjmHZvErm5vbe6mtpJ3jeF2jZdzQoaHv7Z38AJREhyIaeJYbu52Y3LN8gxP&#xA;4E4eHyTa/wCuyfzy/c/9MHCtrRcXRFfrDAf5QYfrIxoLa1ruUfbuC47qK/1wiHki0o1eflcQsCQK&#xA;Fd/HqDlsY7MSX0L+WOpfp2zsL4msiIfrP/GSMcD97UOaHsrQGPaPD/DC5fDp9pa9ZkrEfN6Pnobo&#xA;3Yq7FWPfmH/yhOsf8w7frGY2s/upe5v0394Peg/yn/8AJe6P/qS/8n3x0f8AdRXU/wB4XkX54flV&#xA;f2uo3vmjTYzc6XdsZtQiXd4JG+25HUox+Ko+z32zJaXhd1amM0/Y/ZOKH0V/zidpXoeWdd1Jv7y6&#xA;vktj/q20Qcf9RBxV7pirsVdirsVfLn/OQP8AzkNq8er3PlLyddtZw2TNDqeqwmkskw2eGFxuixnZ&#xA;mHxFulAPiVfN1zcXFzNJPcSvNPKS0k0jF3Zj1LM1ST88Ut6RfyRXHWjqeMgG1fAjFD6Q8sfnw99+&#xA;XmseVvMN2I9Uk064h0TWJmZBJL6TelFPKCvCSv2JCQD+0a/aVaX89v0D+VejeWtEuhdeaWtf9yep&#xA;I5lS19R2b+9Yt6k5Vt6Ehd/YYq+ftbv5ru5LySNIzMXd3JZndjUsxO5JOKpS03CZEGxNST4AYq9S&#xA;/LL/AJyC87+T7yBZ7yXWdAJAm026kLkIe8Ej8mjI7D7PiMVfbPl7X9L8w6JZa1pUwn0+/iE1vJ0N&#xA;D1Vh2ZTVWHYimKphirsVQupWYvLOSH9oisZ8GHTNf2poRqcEsfXmPeOX6m7T5eCYLCXRkcow4spI&#xA;YHqCM8mnAxkYkUQ9CDYsPJ/OWmwWvnaNJV/0PUgJKioPqNVSK/64B+nOu7J1Bnp66x2ayN1fS/KG&#xA;mXWr/Vp3kS3df3YRgG5gEmpYNtQZZrdXPFj4o1YZcAtkP/KsPL/+/rr/AINP+aM0n8u5u6PyP618&#xA;MJJ5s/LwWOmNe6O0k7wVa4glIZindk4hd17jM3Q9smc+HJQvkQxlBItC0/SNUtOYaRbiOgmjDDY+&#xA;I26HN3OcgUxiC3J+X2oatdiKwmiQRcixnZhRfh4/ZVq/EMx8/aEcEbmDv3MTje3flR5FufKul3An&#xA;vPrLXzJKsYj4COgINCSxPPbw6Zu+ycfFDxpR4ZTHx4enz5uq1mW5cI6M5zbuE7FXYqx78w/+UJ1j&#xA;/mHb9YzG1n91L3N+m/vB70H+U/8A5L3R/wDUl/5Pvjo/7qK6n+8LLSAQQRUHqMyWh8i/nfpOiaF+&#xA;YF1p1hbra2M0MVx6SfYR5AeXEfsrUVAGw7bYpSv8vPzF1byBra3URa40e5KjULMH4ZE/nWuwkStV&#xA;P0dMUPsHRdZ0zWtLttV0u4S6sLtBJBNGagg9j4EHYg7g7HFUbirsVYf+bvm+Xyj+XWta3AaXkMPp&#xA;WR8J52EUbf7Avz+jFX58u7OxdyWZiSzE1JJ6knFLWKoehW+BHR03+YxQncEouLOWE/aK1Uf5Q3/G&#xA;mKroWEGnqOjS1Zj7dMVS2WTm5bt2+WKpVeMfWc17BB91TiqMtCTFX9mtE/1RsMVfVP8Azhz5vnmt&#xA;Na8pXEhZLXjqFgp34q59OdR4DlwNPEnFX0pirsVdiqTa5ohuK3NsP34Hxp/NTw985Xt7sLx/3uIf&#xA;vOo/nft+92Gk1fB6Zcnhfnu4/SvnCy0qIUGmAvcyUowZirMtfYBR8zmo7I08sWKUpbGR5e52hNnZ&#xA;ONFgefWoimwh+N29h/WtMPaWQRwm+uzYzTOTVRu7qC0tZbqduEMCNJIx7KoqcnCBlIRHMq8Z8tK9&#xA;/wCYLzU40+r2/J29JNl/eklUoOwG/wB2d5w8GMRJsgNcOdvW/wAt9EF7qdzfSj/RrZRHx7O7EGh9&#xA;l475dpez46ggz3hE3XeXF1uoMBQ5l6lnTuldirsVdirHvzD/AOUJ1j/mHb9YzG1n91L3N+m/vB70&#xA;H+U//kvdH/1Jf+T746P+6iup/vCy3MlofKf/ADlRbra+frS54sFu9NiZnP2S6SyoQCadFC1HviqB&#xA;86+WvLFj/wA48eXfMtuFGsXLi19eJvhlaaWaQiQDq8SowB6ilDUAUVei/wDOI/lfU9M8jXms3kkq&#xA;wa1cBrC0Zm9NYoKoZlQ7K0rkgmm4VcVe64q7FVskccsbRyoHjcFXRgCpB6gg4qwnXfyQ/KjWy7Xv&#xA;lq0SSTdpbVWtHJ/mrbmKp+eKsI1T/nET8sros1ndalp7GvFY5o5Ix9EsbOf+CxVi9/8A84W2jNzs&#xA;PNTxlQQqT2YetaftJMlOn8uKpQ//ADh15tgk52fmGxlIbYSxzR1X34iTf2xVB3H/ADiF+ZMsihdV&#xA;0cQgKP726qABQ7fV96fPFVa3/wCcNfODNS417T408Y1nkP3FY/14qnOn/wDOE2nGUS6r5okmFatD&#xA;bWix/wDDvLJWu37OKs50T/nFP8ptOKNdQXmrMu9Lu4KrX/VtxBt7HFXpPl3yZ5T8txGPQdItNNDD&#xA;i728SI7j/LcDm3T9o4qnOKuxV2KsY8/ecx5V023uzGsn1iX0RzNADxLA9Vr08cxdVnOOIIFuRpsI&#xA;yGiafP0N9of1q6u7yd7u7vJDNNM5RSWYlj9l+5OaCZlI27uAjEUm2h+btF0iSaSBeRmADVZdqEn+&#xA;c+Oa/WaHxwATVMhIJt/ytKx/32v/AAS/81ZgfyEP5x+SeMJZ5i88WWs6W+n+qbaOUr6rpwYsqmvH&#xA;d+5pmTpOyo4Z8d3SDIFJbC58s2lssNWkYVLSFlBJJ8A+bSQkSoMQzHyp+a2m+XNMawtrdZUeVpiz&#xA;OAeTBR/Mf5czNPq5Yo1VuJn00ckrt6T+X/n6Pzb9f4QrF9S9KvFuVfV5+5/33mz0mpOW7FU6/U4B&#xA;jqjdsvzMcV2KuxVI/PFpdXnlLVLa1iaa4lgYRxIKsx2NAO+UamJljkBzptwSAmCe9C/ltp97p/kj&#xA;S7S+ha3uokk9SGQUZeUrsKjtsRg0sTHGAea55AzJDJsyGp5b+e35MR/mJo8NxYyrb+YtNDfUZJCR&#xA;FLG27QyUrxqRVWpsfY4q8W/KL8ttX8zJqn5a+dIL/TLTSLqLWIBx4lJBW3niDMGUpOjhlZTT4eQr&#xA;U4q+tLCxtLCyt7GziWC0tY0ht4U2VI41Coo9gBTFVfFXYq//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:ECF5378126E3E611B5BEF9DDDCC5351B</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:ECF5378126E3E611B5BEF9DDDCC5351B</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:BDE7604918E3E611B5BEF9DDDCC5351B</stRef:instanceID>
            <stRef:documentID>xmp.did:BDE7604918E3E611B5BEF9DDDCC5351B</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:62829471-ebf3-2c4e-be0f-37578a3e8e57</stEvt:instanceID>
                  <stEvt:when>2016-12-02T14:33:01+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2befa812-5db4-a747-b810-96684486d150</stEvt:instanceID>
                  <stEvt:when>2017-01-25T20:15:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:BCE7604918E3E611B5BEF9DDDCC5351B</stEvt:instanceID>
                  <stEvt:when>2017-01-26T00:43:16+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ECF5378126E3E611B5BEF9DDDCC5351B</stEvt:instanceID>
                  <stEvt:when>2017-01-26T00:50:24+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -399.322 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 399.322 li
398.951 399.322 li
398.951 0 li
cp
clp
258.018 72.4097 mo
258.018 100.453 235.284 123.187 207.241 123.187 cv
179.197 123.187 156.464 100.453 156.464 72.4097 cv
156.464 44.3657 179.197 21.6318 207.241 21.6318 cv
235.284 21.6318 258.018 44.3657 258.018 72.4097 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 0 .192157 rgb
f
172.289 85.3735 mo
173.493 76.7266 194.931 65.3491 209.57 66.9907 cv
224.208 68.6323 237.89 78.2588 241.392 85.3735 cv
244.895 92.4883 239.75 118.1 239.75 118.1 cv
178.02 118.1 li
178.02 118.1 170.203 100.353 172.289 85.3735 cv
cp
.0862745 .0823529 .0823529 rgb
f
184.478 66.6577 mo
184.478 66.6577 182.726 63.4834 186.776 58.5581 cv
190.825 53.6328 210.308 49.2549 220.377 56.6973 cv
230.447 64.1401 231.71 64.3027 231.104 66.6577 cv
230.497 69.0122 215.343 79.1343 214.249 83.5674 cv
213.154 88.0005 208.008 95.5449 207.666 95.5522 cv
207.325 95.561 203.084 86.7964 199.691 82.1997 cv
196.298 77.603 184.478 66.6577 184.478 66.6577 cv
cp
f
191.811 54.8369 mo
191.592 57.792 194.547 67.9707 197.721 72.3491 cv
200.895 76.7266 205.597 79.4629 208.377 79.6826 cv
211.157 79.9004 215.524 76.6504 218.479 70.8496 cv
221.434 65.0488 223.77 54.2896 223.77 54.2896 cv
191.811 54.8369 li
cp
1 .694118 .560784 rgb
f
223.537 55.3159 mo
223.261 54.9526 222.95 54.6143 222.589 54.3096 cv
191.811 54.8369 li
191.643 57.1074 193.35 63.6421 195.589 68.5342 cv
199.092 67.3657 202.648 66.123 204.726 65.1895 cv
206.696 64.3042 205.515 62.3887 207.31 62.0605 cv
209.104 61.7319 208.776 65.0156 210.308 65.4536 cv
211.399 65.7651 216.234 67.5752 219.423 68.7891 cv
221.393 64.0767 222.963 57.7612 223.537 55.3159 cv
cp
.858824 .509804 .415686 rgb
f
184.823 65.5103 mo
184.823 65.5103 190.279 59.2695 206.094 59.3789 cv
221.911 59.4883 229.658 65.8203 229.658 65.8203 cv
229.658 65.8203 215.727 60.5278 205.049 60.9111 cv
195.96 61.2373 184.823 65.5103 184.823 65.5103 cv
cp
.564706 .807843 .839216 rgb
f
182.617 66.5479 mo
182.237 66.4438 189.403 42.5781 198.859 35.9746 cv
204.277 32.1919 214.358 32.2896 219.283 36.4492 cv
225.736 41.8975 232.855 66.3286 232.527 67.0952 cv
232.198 67.8613 224.051 60.7388 207.31 60.3091 cv
190.236 59.8716 183.82 66.8765 182.617 66.5479 cv
cp
.207843 .207843 .207843 rgb
f
182.617 66.5479 mo
182.617 66.5479 183.426 64.9146 184.327 65.2891 cv
190.648 67.916 204.457 80.7153 206.574 87.6577 cv
209.31 96.6333 208.119 101.9 208.119 101.9 cv
208.119 101.9 203.851 90.2988 197.502 82.1997 cv
192.438 75.7378 182.617 66.5479 182.617 66.5479 cv
cp
f
232.527 67.0952 mo
232.527 67.0952 231.375 64.8496 230.667 65.2334 cv
224.769 68.4277 210.806 80.7891 208.696 87.7124 cv
205.959 96.6865 208.119 101.9 208.119 101.9 cv
208.119 101.9 211.314 90.7163 217.662 82.6172 cv
222.726 76.1553 232.527 67.0952 232.527 67.0952 cv
cp
f
205.057 67.6621 mo
205.057 67.6621 206.459 66.7969 207.186 66.6226 cv
207.697 66.5 209.819 67.8755 209.545 68.0425 cv
209.272 68.2095 204.838 68.0454 205.057 67.6621 cv
cp
.858824 .509804 .415686 rgb
f
203.382 72.7666 mo
203.264 72.4702 205.384 71.8418 207.746 71.7676 cv
210.105 71.6934 211.624 71.9443 211.239 72.1538 cv
210.999 72.2856 209.147 72.1743 207.785 72.2808 cv
206.422 72.3867 203.723 73.6182 203.382 72.7666 cv
cp
.486275 .27451 .223529 rgb
f
203.084 71.6104 mo
203.578 71.8979 202.157 72.7065 202.755 73.416 cv
203.493 74.2876 204.289 73.7993 204.289 74.0181 cv
204.289 74.2368 203.171 74.7456 202.209 73.416 cv
201.634 72.6221 202.428 71.2271 203.084 71.6104 cv
cp
.858824 .509804 .415686 rgb
f
208.667 35.4917 mo
202.75 35.4917 197.622 54.791 196.392 61.1509 cv
199.418 60.5581 203.029 60.1992 207.31 60.3091 cv
211.815 60.4248 215.692 61.0269 218.968 61.8281 cv
217.94 55.0601 216.607 35.4917 208.667 35.4917 cv
cp
.266667 .266667 .266667 rgb
f
207.662 100.721 mo
207.083 95.6646 205.095 88.0762 198.815 81.2144 cv
195.006 77.0513 191.651 74.4019 188.91 72.708 cv
191.834 75.6758 195.171 79.2256 197.502 82.1997 cv
202.631 88.7432 206.401 97.5698 207.662 100.721 cv
cp
.564706 .807843 .839216 rgb
f
176.314 78.8618 mo
168.898 84.71 160.18 107.044 158.867 114.269 cv
157.553 121.492 182.206 124.082 186.693 121.673 cv
191.181 119.265 184.149 89.0947 181.522 85.5923 cv
178.896 82.0898 177.842 77.6548 176.314 78.8618 cv
cp
.207843 .207843 .207843 rgb
f
217.662 82.6172 mo
219.8 79.8882 222.784 76.6978 225.517 73.9194 cv
223.158 75.5938 220.438 77.937 217.439 81.2144 cv
211.368 87.8491 209.307 95.1636 208.656 100.21 cv
209.806 96.7827 212.813 88.8027 217.662 82.6172 cv
cp
.278431 .278431 .278431 rgb
f
178.458 91.8306 mo
178.458 91.8306 175.721 99.6021 173.971 101.244 cv
172.219 102.886 169.045 101.682 167.075 103.104 cv
165.105 104.527 164.776 108.795 164.776 108.795 cv
164.776 108.795 169.17 105.512 173.485 107.154 cv
177.801 108.795 180.976 105.622 180.976 105.622 cv
178.458 91.8306 li
cp
.137255 .137255 .137255 rgb
f
178.896 109.101 mo
178.896 109.101 172.646 107.482 170.085 109.782 cv
168.254 111.423 168.307 113.396 168.307 113.396 cv
168.307 113.396 169.816 111.627 171.718 110.972 cv
174.558 109.994 180.916 113.91 178.349 110.657 cv
178.896 109.101 li
cp
.168627 .168627 .168627 rgb
f
236.248 78.8618 mo
243.662 84.71 252.38 107.044 253.694 114.269 cv
255.007 121.492 230.355 124.082 225.868 121.673 cv
221.379 119.265 228.411 89.0947 231.038 85.5923 cv
233.665 82.0898 234.718 77.6548 236.248 78.8618 cv
cp
.207843 .207843 .207843 rgb
f
234.103 91.8306 mo
234.103 91.8306 236.838 99.6021 238.59 101.244 cv
240.341 102.886 243.515 101.682 245.485 103.104 cv
247.456 104.527 247.784 108.795 247.784 108.795 cv
247.784 108.795 243.391 105.512 239.075 107.154 cv
234.759 108.795 231.585 105.622 231.585 105.622 cv
234.103 91.8306 li
cp
.137255 .137255 .137255 rgb
f
233.665 109.101 mo
233.665 109.101 239.915 107.482 242.475 109.782 cv
244.306 111.423 244.253 113.396 244.253 113.396 cv
244.253 113.396 242.745 111.627 240.842 110.972 cv
238.002 109.994 231.644 113.91 234.211 110.657 cv
233.665 109.101 li
cp
.168627 .168627 .168627 rgb
f
244.736 100.721 mo
244.736 100.721 243.707 97.9058 241.737 97.1392 cv
239.766 96.373 236.949 94.3481 236.949 94.3481 cv
236.949 94.3481 237.994 99.4438 239.075 99.8208 cv
241.655 100.721 244.736 100.721 244.736 100.721 cv
cp
f
177.801 86.7964 mo
239.531 86.7964 li
239.531 122.587 li
177.801 122.587 li
177.801 86.7964 li
cp
.666667 .666667 .666667 rgb
f
177.801 122.548 mo
239.531 122.548 li
239.531 124.31 li
177.801 124.31 li
177.801 122.548 li
cp
.54902 .54902 .54902 rgb
f
188.878 122.07 mo
195.444 122.07 li
195.444 122.681 li
188.878 122.681 li
188.878 122.07 li
cp
.807843 .807843 .807843 rgb
f
221.887 122.07 mo
228.455 122.07 li
228.455 122.681 li
221.887 122.681 li
221.887 122.07 li
cp
f
177.801 86.8809 mo
239.531 86.8809 li
239.531 87.7124 li
177.801 87.7124 li
177.801 86.8809 li
cp
f
167.824 100.721 mo
167.824 100.721 168.854 97.9058 170.823 97.1392 cv
172.794 96.373 175.612 94.3481 175.612 94.3481 cv
175.612 94.3481 174.566 99.4438 173.485 99.8208 cv
170.906 100.721 167.824 100.721 167.824 100.721 cv
cp
.168627 .168627 .168627 rgb
f
207.472 99.8799 mo
204.808 99.8799 li
204.808 102.423 li
205.592 102.423 li
205.592 100.584 li
207.472 100.584 li
207.472 99.8799 li
cp
.278431 .278431 .278431 rgb
f
209.861 99.8799 mo
212.525 99.8799 li
212.525 102.423 li
211.742 102.423 li
211.742 100.584 li
209.861 100.584 li
209.861 99.8799 li
cp
f
209.861 107.119 mo
212.525 107.119 li
212.525 104.577 li
211.742 104.577 li
211.742 106.416 li
209.861 106.416 li
209.861 107.119 li
cp
f
207.472 107.119 mo
204.808 107.119 li
204.808 104.577 li
205.592 104.577 li
205.592 106.416 li
207.472 106.416 li
207.472 107.119 li
cp
f
398.951 71.0674 mo
398.951 99.1108 376.216 121.845 348.173 121.845 cv
320.129 121.845 297.395 99.1108 297.395 71.0674 cv
297.395 43.0239 320.129 20.29 348.173 20.29 cv
376.216 20.29 398.951 43.0239 398.951 71.0674 cv
cp
.333333 .858824 1 rgb
f
363.027 84.2319 mo
363.636 84.5479 366.068 87.1567 365.693 88.2065 cv
365.318 89.2563 363.06 86.2568 363.027 86.8564 cv
362.993 87.4565 365.114 90.2314 364.766 91.8066 cv
364.418 93.3818 362.393 95.1064 362.393 95.1064 cv
362.393 95.1064 358.019 88.9565 358.443 86.7065 cv
358.868 84.4565 363.027 84.2319 363.027 84.2319 cv
cp
1 .694118 .560784 rgb
f
366.085 42.2705 mo
368.053 42.646 369.021 44.0547 371.398 48.105 cv
373.585 51.8315 366.16 63.5317 362.744 66.3066 cv
360.684 67.98 362.542 81.3066 363.333 83.4814 cv
364.125 85.6567 357.235 86.7817 357.235 86.7817 cv
359.185 60.5317 li
366.085 42.2705 li
cp
0 0 0 rgb
f
374.386 30.5537 mo
374.492 32.9531 374.234 38.0815 373.072 40.2524 cv
371.91 42.4233 368.919 47.5679 366.375 47.5664 cv
363.83 47.5649 351.801 30.5942 356.664 26.4312 cv
361.525 22.2681 374.21 26.5532 374.386 30.5537 cv
cp
.0862745 .0823529 .0823529 rgb
f
305.181 109.736 mo
304.132 109.345 299.53 110.257 299.251 110.813 cv
298.974 111.369 305.368 125.794 306.341 126.38 cv
307.314 126.967 307.731 113.731 307.731 113.731 cv
305.181 109.736 li
cp
f
354.25 121.514 mo
354.244 121.92 352.951 126.937 354.25 127.493 cv
355.548 128.049 372.646 129.439 373.062 128.327 cv
373.48 127.215 360.135 122.902 359.579 121.514 cv
359.023 120.126 354.25 121.514 354.25 121.514 cv
cp
f
345.361 78.9136 mo
345.361 78.9136 338.636 106.711 338.146 107.129 cv
335.125 109.7 308.255 117.822 307.483 117.436 cv
306.709 117.049 304.648 110.35 305.292 109.448 cv
305.937 108.546 328.453 102.381 328.582 101.222 cv
328.709 100.062 330.131 77.4775 330.388 76.2964 cv
330.646 75.1157 345.361 78.9136 345.361 78.9136 cv
cp
.207843 .207843 .207843 rgb
f
349.225 79.2998 mo
352.623 81.3882 369.543 92.8535 369.801 95.9453 cv
370.059 99.0376 363.011 123.362 363.14 123.749 cv
363.269 124.135 355.327 123.323 354.087 122.421 cv
352.848 121.52 358.8 99.0342 358.415 97.6172 cv
358.028 96.1997 331.961 84.5825 337.593 77.1094 cv
339.628 74.4092 349.225 79.2998 349.225 79.2998 cv
cp
f
334.342 85.7646 mo
329.745 84.293 li
329.253 91.3135 328.663 100.493 328.582 101.222 cv
328.453 102.381 305.937 108.546 305.292 109.448 cv
304.895 110.004 305.527 112.762 306.25 114.888 cv
306.429 114.867 306.611 114.82 306.796 114.733 cv
309.552 113.439 321.309 108.152 326.372 106.464 cv
331.434 104.777 335.688 104.461 335.935 104.102 cv
336.182 103.743 334.471 100.896 334.078 98.252 cv
333.684 95.6084 334.342 85.7646 334.342 85.7646 cv
cp
.266667 .262745 .262745 rgb
f
362.765 95.7769 mo
360.343 94.9106 350.446 85.7085 348.477 83.627 cv
342.965 84.6396 li
343.439 87.9727 li
349.711 92.7241 358.195 96.813 358.415 97.6172 cv
358.8 99.0342 352.848 121.52 354.087 122.421 cv
354.637 122.821 356.5 123.202 358.394 123.47 cv
358.397 121.394 358.46 118.06 358.771 114.677 cv
359.278 109.165 363.837 98.7212 364.002 98.0835 cv
364.167 97.4453 365.186 96.6436 362.765 95.7769 cv
cp
.239216 .239216 .239216 rgb
f
331.659 70.0122 mo
332.449 68.1157 345.215 45.644 346.893 41.9502 cv
348.571 38.2568 353.82 36.0962 358.633 37.2505 cv
363.447 38.4053 369.26 38.9995 369.929 46.1621 cv
370.597 53.3247 362.05 68.166 359.86 73.8818 cv
357.669 79.5972 361.086 86.1216 360.908 87.4097 cv
360.601 89.6162 330.174 89.7759 329.406 87.9507 cv
328.637 86.1255 329.391 75.4585 331.659 70.0122 cv
cp
.0862745 .0823529 .0823529 rgb
f
358.785 22.8062 mo
358.042 24.2456 356.069 30.501 356.439 33.7002 cv
356.808 36.8994 358.021 40.0396 360.057 40.9736 cv
362.093 41.9082 367.425 40.2529 370.441 36.7251 cv
373.458 33.1978 375.142 27.3838 375.142 27.3838 cv
358.785 22.8062 li
cp
1 .694118 .560784 rgb
f
349.148 89.1055 mo
348.942 87.7485 348.579 86.3525 348.173 84.9771 cv
346.35 78.7896 351.008 67.9897 356.61 57.9097 cv
360.713 50.5254 360.404 41.6147 358.067 37.1396 cv
353.415 36.2759 348.505 38.4009 346.893 41.9502 cv
345.215 45.644 332.449 68.1157 331.659 70.0122 cv
329.391 75.4585 328.637 86.1255 329.406 87.9507 cv
329.854 89.0146 340.383 89.4033 349.148 89.1055 cv
cp
.137255 .129412 .129412 rgb
f
356.601 29.5977 mo
358.266 30.021 370.441 36.7251 370.441 36.7251 cv
369.067 38.2646 367.195 41.5698 363.837 42.4312 cv
361.473 43.0381 359.049 39.7661 357.859 37.8379 cv
355.18 33.4966 356.601 29.5977 356.601 29.5977 cv
cp
0 0 0 rgb
f
345.473 50.8237 mo
345.473 50.8237 348.371 62.1802 348.842 65.4346 cv
349.649 71.0142 345.361 77.4312 345.361 77.4312 cv
345.361 77.4312 346.936 69.6504 346.148 65.9136 cv
345.361 62.1768 345.473 50.8237 345.473 50.8237 cv
cp
.0862745 .0823529 .0823529 rgb
f
344.996 40.7847 mo
345.539 39.3945 350.349 36.6187 354.007 39.5757 cv
357.666 42.5327 354.871 60.4048 355.333 60.5063 cv
355.797 60.6084 356.809 45.02 357.704 45.0366 cv
358.597 45.0537 363.654 45.1841 363.818 46.4766 cv
363.983 47.7695 363.047 61.7129 362.067 64.2163 cv
358.518 73.2793 355.43 72.4497 354.159 72.3223 cv
352.135 72.1191 339.054 55.9917 344.996 40.7847 cv
cp
.207843 .207843 .207843 rgb
f
358.415 61.394 mo
358.415 61.394 354.271 67.7646 353.577 65.9644 cv
352.883 64.1646 351.69 57.0962 350.545 48.4038 cv
349.573 41.0112 348.731 40.0449 346.042 39.6514 cv
345.501 40.0439 345.125 40.4536 344.996 40.7847 cv
339.054 55.9917 352.135 72.1191 354.159 72.3223 cv
355.081 72.4146 356.958 72.8726 359.27 69.668 cv
359.478 69.0698 359.648 68.4683 359.773 67.877 cv
360.887 62.5894 358.415 61.394 358.415 61.394 cv
cp
.247059 .247059 .247059 rgb
f
356.243 26.7856 mo
356.664 29.2119 li
356.664 29.2119 357.873 29.2119 359.509 29.4961 cv
360.592 29.6836 361.088 28.8496 361.923 28.9189 cv
362.757 28.9888 362.498 30.7466 363.262 31.2334 cv
364.027 31.7197 370.459 36.1304 370.904 36.1592 cv
371.12 36.1738 373.257 32.688 373.257 32.688 cv
373.257 32.688 367.502 28.0361 364.653 26.2988 cv
361.803 24.5615 356.243 26.7856 356.243 26.7856 cv
cp
.858824 .509804 .415686 rgb
f
351.318 37.9038 mo
349.32 38.7739 347.695 40.1836 346.893 41.9502 cv
345.215 45.644 332.449 68.1157 331.659 70.0122 cv
329.391 75.4585 328.637 86.1255 329.406 87.9507 cv
329.643 88.5146 332.715 88.8887 336.852 89.0713 cv
336.538 83.7974 336.316 75.8496 337.284 70.0869 cv
338.534 62.6489 347.281 45.2446 351.318 37.9038 cv
cp
.176471 .164706 .164706 rgb
f
348.873 46.4131 mo
347.794 46.9658 356.72 52.8921 357.029 52.3755 cv
357.337 51.8584 357.999 44.3413 358.205 43.1978 cv
358.652 40.7197 358.645 37.6426 355.487 33.8315 cv
350.585 27.9155 324.207 27.0073 317.002 34.2485 cv
304.435 46.8818 310.736 60.9814 325.408 68.7266 cv
335.682 74.1499 341.835 56.9482 343.895 50.6768 cv
345.954 44.4053 352.808 39.6743 354.318 40.7852 cv
355.828 41.8965 353.265 44.1616 348.873 46.4131 cv
cp
.666667 .666667 .666667 rgb
f
355.487 33.8315 mo
350.585 27.9155 324.207 27.0073 317.002 34.2485 cv
308.548 42.7461 308.641 51.9048 314.067 59.3496 cv
314.99 60.1494 316.044 60.8452 317.258 61.394 cv
328.622 66.5269 339.224 55.1177 341.446 46.502 cv
343.37 39.0454 348.461 34.8145 355.772 34.1943 cv
355.677 34.0737 355.587 33.9541 355.487 33.8315 cv
cp
.729412 .729412 .729412 rgb
f
370.467 18.2085 mo
361.512 16.5239 355.655 25.4087 355.403 27.6553 cv
355.002 28.8604 353.808 33.3872 356.664 38.0059 cv
359.997 43.396 365.735 47.5664 365.735 47.5664 cv
365.735 47.5664 358.427 37.8872 357.817 34.769 cv
357.353 32.4092 357.43 29.0815 357.495 27.6016 cv
358.405 27.6514 359.709 27.8198 361.585 28.2065 cv
364.059 28.7163 367.669 31.3877 370.627 33.896 cv
370.511 35.5503 370.315 37.3901 369.983 39.2319 cv
369.123 43.9941 365.735 47.5664 365.735 47.5664 cv
365.735 47.5664 373.885 43.6567 375.757 38.6128 cv
375.757 38.6128 377.397 19.5117 370.467 18.2085 cv
cp
.207843 .207843 .207843 rgb
f
321.569 51.0366 mo
322.881 51.7407 324.542 51.4702 325.338 50.1333 cv
326.101 48.8545 325.475 47.2607 324.36 46.3584 cv
321.569 51.0366 li
cp
326.345 38.4038 mo
325.25 38.064 323.992 38.6533 323.437 39.5835 cv
322.865 40.5425 323.093 41.7422 323.833 42.6167 cv
326.345 38.4038 li
cp
322.671 44.5635 mo
320.98 42.8452 320.156 40.4634 321.456 38.2837 cv
322.669 36.249 325.33 35.7495 327.438 36.5728 cv
328.876 34.1616 li
330.911 35.3755 li
329.473 37.7866 li
331.042 38.9199 331.806 40.8735 332.032 42.7402 cv
329.863 43.1421 li
329.422 40.9082 329.066 40.1836 328.38 39.6177 cv
325.538 44.3828 li
327.683 46.1353 328.897 48.7891 327.354 51.376 cv
325.916 53.7871 322.761 54.1904 320.477 52.8667 cv
319.04 55.2788 li
317.003 54.0654 li
318.443 51.6533 li
316.695 50.4927 315.962 48.2827 315.916 46.2471 cv
318.208 46.0376 li
318.287 47.4243 318.361 48.8872 319.534 49.8232 cv
322.671 44.5635 li
cp
.556863 .556863 .556863 rgb
f
348.711 55.3447 mo
349.591 55.0513 355.08 59.7324 354.876 60.4072 cv
354.673 61.0825 351.284 57.2573 349.604 57.145 cv
347.923 57.0322 347.699 55.6821 348.711 55.3447 cv
cp
.168627 .168627 .168627 rgb
f
354.813 61.0942 mo
353.626 60.6685 349.21 58.6191 348.536 59.2939 cv
347.861 59.9692 348.198 60.4189 348.986 61.0942 cv
349.773 61.769 354.813 61.0942 354.813 61.0942 cv
cp
f
357.235 41.231 mo
357.235 41.231 355.577 34.6567 351.493 33.3066 cv
347.411 31.9565 342.95 31.1729 342.911 33.3066 cv
342.857 36.1592 348.104 34.1616 351.493 36.0513 cv
355.575 38.3271 357.235 41.231 357.235 41.231 cv
cp
.588235 .588235 .588235 rgb
f
355.517 40.394 mo
355.517 40.394 352.698 37.6104 346.848 37.2021 cv
340.998 36.7939 342.974 41.9692 345.361 41.7441 cv
347.748 41.519 350.39 38.3188 355.517 40.394 cv
cp
f
329.635 100.807 mo
329.635 100.807 330.198 102.044 332.448 103.169 cv
334.698 104.294 335.935 104.519 335.935 104.519 cv
335.935 104.519 333.528 105.22 331.616 104.658 cv
329.703 104.095 329.635 100.807 329.635 100.807 cv
cp
.156863 .156863 .156863 rgb
f
365.073 95.1064 mo
365.073 95.1064 363.478 97.1372 362.598 97.4316 cv
360.023 98.2949 359.335 97.4316 359.335 97.4316 cv
359.335 97.4316 361.799 100.184 363.837 98.7212 cv
365.876 97.2588 365.073 95.1064 365.073 95.1064 cv
cp
f
334.342 107.456 mo
334.342 107.456 331.21 107.557 329.635 105.644 cv
328.06 103.731 329.114 102.841 329.114 102.841 cv
329.114 102.841 327.903 104.407 328.769 106.207 cv
329.635 108.007 334.342 107.456 334.342 107.456 cv
cp
f
362.805 45.1318 mo
364.479 46.6494 365.735 47.5664 365.735 47.5664 cv
365.735 47.5664 363.566 44.6914 361.492 41.5713 cv
361.96 42.8608 362.411 44.0757 362.805 45.1318 cv
cp
.247059 .247059 .247059 rgb
f
369.008 44.4019 mo
370.875 41.9873 371.484 38.7769 372.333 34.1616 cv
373.182 29.5469 371.108 23.7021 366.309 22.5024 cv
361.75 21.3623 358.842 25.6821 357.66 27.6128 cv
358.56 27.6729 359.817 27.8423 361.585 28.2065 cv
364.059 28.7163 367.669 31.3877 370.627 33.896 cv
370.511 35.5503 370.315 37.3901 369.983 39.2319 cv
369.123 43.9941 365.735 47.5664 365.735 47.5664 cv
365.735 47.5664 365.848 47.5112 366.028 47.4194 cv
366.973 46.624 368.113 45.561 369.008 44.4019 cv
cp
f
357.484 27.9014 mo
357.484 27.9019 357.483 27.9023 357.483 27.9028 cv
357.402 28.0361 357.399 28.3384 357.458 28.77 cv
357.465 28.4463 357.474 28.1577 357.484 27.9014 cv
cp
f
375.757 38.6128 mo
375.757 38.6128 377.397 19.5117 370.467 18.2085 cv
368.514 17.8403 366.707 17.9766 365.074 18.4375 cv
367.965 18.5059 370.856 19.9526 371.793 22.314 cv
373.358 26.252 375.657 31.0024 373.758 38.2646 cv
373.069 40.897 371.829 43.0015 370.529 44.6245 cv
372.664 43.0488 374.887 40.957 375.757 38.6128 cv
cp
.176471 .176471 .176471 rgb
f
355.892 31.9839 mo
356.244 29.1577 356.393 26.313 357.511 23.7319 cv
356.226 25.356 355.49 26.8906 355.403 27.6553 cv
355.002 28.8604 353.808 33.3872 356.664 38.0059 cv
357.194 38.8638 357.789 39.6855 358.408 40.4702 cv
357.033 37.7031 355.615 34.2119 355.892 31.9839 cv
cp
f
361.585 28.2065 mo
364.05 28.7148 367.644 31.3696 370.596 33.8701 cv
369.983 32.5176 367.855 30.3091 364.963 29.104 cv
359.109 26.6646 357.476 28.0269 357.495 27.6016 cv
358.405 27.6514 359.709 27.8198 361.585 28.2065 cv
cp
.427451 .427451 .427451 rgb
f
360.429 67.8032 mo
360.96 66.8252 361.508 65.644 362.067 64.2163 cv
363.047 61.7129 363.983 47.7695 363.818 46.4766 cv
363.717 45.6919 361.815 45.3364 360.134 45.1743 cv
360.47 46.5225 360.754 48.437 360.796 51.1147 cv
360.909 58.2021 361.809 60.2271 360.796 65.9644 cv
360.683 66.606 360.559 67.2173 360.429 67.8032 cv
cp
.176471 .176471 .176471 rgb
f
362.709 45.6401 mo
362.997 44.3789 361.453 41.5688 358.415 39.5493 cv
355.517 37.6245 353.038 40.5024 353.679 41.5566 cv
354.372 42.6943 355.958 41.6763 356.224 42.5054 cv
356.393 43.0298 353.883 41.8564 353.679 42.9814 cv
353.475 44.1064 357.139 43.8975 358.415 45.1953 cv
362.709 45.6401 li
cp
1 .694118 .560784 rgb
f
79.2617 246.648 mo
115.576 247.669 li
126.819 215.453 li
127.473 215.244 li
116.002 248.485 li
79.2617 247.316 li
79.2617 246.648 li
cp
.498039 .498039 .498039 rgb
f
85.0464 234.372 mo
79.2617 246.648 li
115.576 247.669 li
107.904 234.372 li
85.0464 234.372 li
cp
.666667 .666667 .666667 rgb
f
126.819 215.453 mo
115.576 247.669 li
107.904 234.372 li
115.576 209.11 li
126.819 215.453 li
cp
.588235 .588235 .588235 rgb
f
79.8145 229.919 mo
80.4976 228.405 88.5396 223.972 89.1221 223.972 cv
89.7036 223.972 100.34 223.316 100.615 225.335 cv
100.777 226.53 92.1177 225.734 92.1177 226.511 cv
92.1177 227.287 97.0234 226.842 98.937 228.149 cv
101.742 230.066 103.198 231.395 101.826 231.913 cv
100.651 232.356 98.4331 230.201 97.8564 229.896 cv
96.3989 229.125 94.6572 229.274 94.3774 229.65 cv
93.9429 230.238 102.103 233.251 101.08 234.616 cv
100.056 235.979 83.7363 236.076 83.7363 236.076 cv
79.8145 229.919 li
cp
.858824 .509804 .415686 rgb
f
54.0532 215.523 mo
54.9956 216.848 66.6875 233.86 67.3701 234.202 cv
68.0513 234.543 79.1333 227.724 80.4976 228.405 cv
81.8613 229.087 85.1001 233.86 83.7363 236.076 cv
82.3721 238.292 57.8281 243.775 57.8281 243.775 cv
54.0532 215.523 li
cp
.0862745 .0823529 .0823529 rgb
f
83.2246 235.054 mo
83.7441 233.703 91.2949 229.896 93.1699 230.407 cv
95.0459 230.919 102.319 234.031 103.513 236.076 cv
104.707 238.123 104.276 239.597 104.08 240.615 cv
104.002 241.021 102.349 241.333 102.349 238.395 cv
102.349 236.452 98.8892 234.979 98.7808 235.589 cv
98.7217 235.925 99.5718 236.435 100.651 238.2 cv
101.633 239.807 101.814 242.73 101.637 242.726 cv
99.3652 242.68 100.012 240.515 98.9761 239.056 cv
98.2104 237.981 96.6021 236.739 96.0146 237.187 cv
95.8223 237.333 97.3223 238.773 97.8853 239.757 cv
98.1792 240.274 97.7881 243.2 97.6123 243.342 cv
97.1152 243.747 96.3936 243.117 96.2095 242.486 cv
96.0039 241.782 96.3384 241.004 95.7412 240.187 cv
94.8193 238.922 93.3198 238.471 93.0137 238.395 cv
92.333 238.224 88.6118 239.291 86.4717 239.145 cv
85.9609 239.11 83.2246 235.054 83.2246 235.054 cv
cp
1 .694118 .560784 rgb
f
81.5195 195.501 mo
82.1943 197.752 79.3032 202.491 77.77 203.854 cv
76.2354 205.218 75.9487 210.366 75.2676 211.218 cv
74.5845 212.071 72.7344 209.533 72.0527 209.874 cv
71.3711 210.215 70.9443 211.707 70.3672 212.132 cv
69.9551 212.434 68.7344 211.828 68.7344 211.828 cv
68.7344 211.828 69.4209 212.634 69.1313 213.088 cv
68.4756 214.11 66.5176 213.913 66.1763 214.594 cv
65.835 215.277 66.4932 217.386 63.7891 216.982 cv
61.5923 216.654 60.3838 214.287 59.0195 209.172 cv
57.6563 204.058 81.5195 195.501 81.5195 195.501 cv
cp
f
40.9443 195.501 mo
42.1997 192.85 51.3066 175.647 62.085 175.617 cv
80.7021 175.565 87.1309 196.607 86.4717 198.058 cv
85.688 199.782 80.1563 200.445 70.5449 207.947 cv
64.1772 212.916 56.7227 218.353 57.1035 220.221 cv
58.9785 229.427 55.4521 242.83 54.583 246.305 cv
54.2417 247.669 2.23242 247.316 .640625 243.775 cv
-1.7002 238.566 1.84326 216.064 20.1831 201.749 cv
30.7212 193.523 39.8936 197.717 40.9443 195.501 cv
cp
.0862745 .0823529 .0823529 rgb
f
57.1035 220.221 mo
56.7227 218.353 64.1772 212.916 70.5449 207.947 cv
80.1563 200.445 85.688 199.782 86.4717 198.058 cv
86.8857 197.147 84.5039 188.52 78.0718 182.232 cv
71.1206 182.886 61.9629 185.515 56.6274 196.268 cv
50.7529 208.112 55.2573 229.279 55.2573 229.279 cv
57.6309 227.329 li
57.689 224.849 57.5508 222.416 57.1035 220.221 cv
cp
.137255 .133333 .133333 rgb
f
28.2544 218.618 mo
28.2544 218.618 26.8462 228.245 31.439 236.915 cv
36.0327 245.584 48.1821 242.719 48.1821 242.719 cv
28.2544 218.618 li
cp
.0666667 .0627451 .0627451 rgb
f
31.397 207.259 mo
32.9502 205.375 41.4683 204.202 45.5605 207.271 cv
49.6523 210.339 65.0918 232.358 65.4932 238.292 cv
65.543 239.013 76.8779 234.534 79.3032 233.519 cv
85.6108 230.882 88.6558 236.321 89.1147 239.559 cv
89.5742 242.798 69.501 254.665 61.4805 253.02 cv
56.8613 252.071 29.1802 227.207 28.1567 222.433 cv
27.1348 217.66 27.8838 211.522 31.397 207.259 cv
cp
.14902 .14902 .14902 rgb
f
79.3032 233.519 mo
76.8779 234.534 65.543 239.013 65.4932 238.292 cv
65.2739 235.046 60.5513 226.985 55.6484 219.845 cv
51.938 221.917 50.5698 227.969 53.6084 234.009 cv
58.1436 243.03 67.1885 249.899 73.0752 247.044 cv
79.8145 243.775 84.0649 239.757 87.5586 235.662 cv
86.0146 233.442 83.3242 231.838 79.3032 233.519 cv
cp
.168627 .168627 .168627 rgb
f
47.1172 221.212 mo
48.5977 222.225 58.4155 229.239 60.0522 233.291 cv
61.6895 237.342 60.8315 239.757 60.8315 239.757 cv
60.8315 239.757 59.979 234.965 57.5591 231.888 cv
54.9873 228.616 47.1172 221.212 47.1172 221.212 cv
cp
.207843 .207843 .207843 rgb
f
58.9639 242.719 mo
58.9639 242.719 61.8965 242.695 63.2476 241.784 cv
65.0854 240.544 65.4956 238.314 65.4932 238.292 cv
65.0918 232.358 49.6523 210.339 45.5605 207.271 cv
44.1396 206.205 42.1821 205.659 40.1709 205.468 cv
44.2329 207.185 46.6489 207.419 54.6885 220.286 cv
64.1108 235.364 63.4819 238.746 63.1694 240.071 cv
62.8579 241.395 58.9639 242.719 58.9639 242.719 cv
cp
.564706 .807843 .839216 rgb
f
66.4146 239.252 mo
66.4146 239.252 67.6191 240.354 67.9707 242.31 cv
68.3213 244.266 66.8882 246.186 66.8882 246.186 cv
66.8882 246.186 66.9287 243.271 66.793 241.828 cv
66.6582 240.382 66.4146 239.252 66.4146 239.252 cv
cp
.0980392 .0980392 .0980392 rgb
f
70.5449 207.947 mo
80.1563 200.445 85.688 199.782 86.4717 198.058 cv
86.5464 197.893 86.5244 197.466 86.4102 196.855 cv
84.5928 197.676 82.8091 198.715 81.2485 199.705 cv
76.0874 202.978 69.7153 207.341 65.4932 210.848 cv
63.6807 212.355 62.293 213.932 61.2983 215.244 cv
63.9102 213.03 67.3623 210.43 70.5449 207.947 cv
cp
.564706 .807843 .839216 rgb
f
126.819 215.453 mo
127.473 215.244 li
116.265 208.938 li
115.576 209.11 li
126.819 215.453 li
cp
.819608 .819608 .819608 rgb
f
116.002 210.809 mo
125.587 216.245 li
115.576 245.525 li
108.989 234.372 li
116.002 210.809 li
cp
.333333 .858824 1 rgb
f
51.2549 191.429 mo
51.2549 191.429 52.2266 201.085 51.3232 202.913 cv
49.6636 206.267 46.1826 205.756 46.1826 205.756 cv
46.1826 205.756 48.7974 203.545 49.2935 200.468 cv
50.0352 195.875 51.2549 191.429 51.2549 191.429 cv
cp
.0666667 .0627451 .0627451 rgb
f
46.1826 193.059 mo
46.1826 193.059 48.2563 196.541 47.5151 199.208 cv
46.7744 201.875 42.7739 202.764 42.7739 202.764 cv
42.7739 202.764 45.293 198.319 45.6631 196.17 cv
46.0332 194.022 46.1826 193.059 46.1826 193.059 cv
cp
f
65.4932 238.623 mo
65.4932 238.623 67.1738 243.75 65.4932 246.186 cv
63.8149 248.623 58.9639 249.437 58.9639 249.437 cv
58.9639 249.437 64.2588 244.298 64.7026 242.719 cv
65.1479 241.14 65.4932 238.623 65.4932 238.623 cv
cp
f
20.1831 201.749 mo
1.84326 216.064 -1.7002 238.566 .640625 243.775 cv
1.13916 244.884 6.58447 245.681 13.8384 246.209 cv
12.1162 238.587 13.1738 227.462 16.6226 217.73 cv
21.0132 205.334 27.7358 198.606 35.2041 196.315 cv
31.3574 196.459 25.978 197.225 20.1831 201.749 cv
cp
f
57.3682 249.106 mo
52.3022 245.065 37.5146 225.879 36.7739 217.986 cv
36.2427 212.334 37.3848 207.747 38.6689 205.385 cv
35.3896 205.355 32.2764 206.192 31.397 207.259 cv
27.8838 211.522 27.1348 217.66 28.1567 222.433 cv
29.1802 227.207 56.8613 252.071 61.4805 253.02 cv
62.5938 253.249 63.9453 253.208 65.4351 252.975 cv
62.6675 252.125 59.585 250.874 57.3682 249.106 cv
cp
.109804 .105882 .105882 rgb
f
148.416 224.57 mo
209.699 224.57 li
209.699 226.119 li
148.416 226.119 li
148.416 224.57 li
cp
.54902 .54902 .54902 rgb
f
155.552 215.581 mo
200.708 215.581 li
209.699 224.57 li
148.416 224.57 li
155.552 215.581 li
cp
.666667 .666667 .666667 rgb
f
210.156 209.412 mo
175.914 209.412 li
175.914 204.615 li
210.156 204.615 li
210.156 209.412 li
cp
.54902 .54902 .54902 rgb
f
219.294 211.925 mo
166.776 211.925 li
166.776 208.269 li
219.294 208.269 li
219.294 211.925 li
cp
.666667 .666667 .666667 rgb
f
199.703 205.775 mo
202.572 232.265 li
202.572 232.265 194.19 249.768 190.306 249.575 cv
186.421 249.383 189.911 204.003 189.233 202.066 cv
188.557 200.128 195.442 201.441 199.703 205.775 cv
cp
.168627 .168627 .168627 rgb
f
202.572 232.265 mo
199.703 205.775 li
198.773 204.83 197.717 204.035 196.643 203.379 cv
195.059 204.12 194.057 204.615 194.057 204.615 cv
194.057 204.615 195.811 220.49 196.823 231.25 cv
197.189 235.152 196.757 239.588 196.188 243.735 cv
199.483 238.709 202.572 232.265 202.572 232.265 cv
cp
.0666667 .0627451 .0627451 rgb
f
210.156 209.412 mo
207.371 209.261 205.321 211.72 201.013 217.871 cv
195.778 225.345 189.261 238.562 189.233 241.201 cv
189.123 251.627 187.929 253.957 199.038 250.462 cv
202.915 249.243 212.912 236.8 222.586 218.56 cv
225.9 212.312 212.209 209.523 210.156 209.412 cv
cp
.168627 .168627 .168627 rgb
f
157.044 163.685 mo
229.025 163.685 li
229.025 205.418 li
157.044 205.418 li
157.044 163.685 li
cp
.666667 .666667 .666667 rgb
f
159.467 166.089 mo
227.007 166.089 li
227.007 203.123 li
159.467 203.123 li
159.467 166.089 li
cp
.556863 .556863 .556863 rgb
f
159.989 166.479 mo
226.081 166.479 li
226.081 202.624 li
159.989 202.624 li
159.989 166.479 li
cp
.568627 .921569 .94902 rgb
f
226.04 200.607 mo
174.579 200.607 li
174.579 169.218 li
226.04 169.218 li
226.04 200.607 li
cp
.439216 .439216 .439216 rgb
f
210.394 184.552 mo
210.394 190.395 205.657 195.132 199.814 195.132 cv
193.971 195.132 189.233 190.395 189.233 184.552 cv
189.233 178.708 193.971 173.972 199.814 173.972 cv
205.657 173.972 210.394 178.708 210.394 184.552 cv
cp
.14902 .14902 .14902 rgb
f
206.643 184.552 mo
206.643 188.323 203.586 191.381 199.814 191.381 cv
196.042 191.381 192.985 188.323 192.985 184.552 cv
192.985 180.779 196.042 177.723 199.814 177.723 cv
203.586 177.723 206.643 180.779 206.643 184.552 cv
cp
.317647 .317647 .317647 rgb
f
202.547 184.552 mo
202.547 186.061 201.324 187.285 199.814 187.285 cv
198.304 187.285 197.081 186.061 197.081 184.552 cv
197.081 183.042 198.304 181.818 199.814 181.818 cv
201.324 181.818 202.547 183.042 202.547 184.552 cv
cp
.466667 .466667 .466667 rgb
f
201.248 184.552 mo
201.248 185.344 200.606 185.985 199.814 185.985 cv
199.023 185.985 198.38 185.344 198.38 184.552 cv
198.38 183.76 199.023 183.118 199.814 183.118 cv
200.606 183.118 201.248 183.76 201.248 184.552 cv
cp
.317647 .317647 .317647 rgb
f
216.362 177.846 mo
214.723 178.918 213.432 181.916 214.066 183.504 cv
215.041 185.939 212.936 190.703 212.913 191.613 cv
212.888 192.521 215.499 191.225 215.75 191.808 cv
216.001 192.392 214.901 193.625 215.181 194.19 cv
215.369 194.572 216.752 194.696 216.752 194.696 cv
216.752 194.696 215.9 195.171 215.768 195.602 cv
215.369 196.906 216.877 196.826 216.728 197.443 cv
216.579 198.062 215.425 199.011 217.072 200.584 cv
218.718 202.158 221.758 200.758 225.375 198.231 cv
228.99 195.705 216.362 177.846 216.362 177.846 cv
cp
1 .694118 .560784 rgb
f
256.378 214.109 mo
255.567 213.012 250.01 208.976 248.79 208.475 cv
246.211 207.205 245.203 203.364 245.203 203.364 cv
245.203 203.364 243.438 192.973 245.646 187.285 cv
248.892 178.929 243.652 168.705 235.501 168.42 cv
225.621 168.074 211.748 174.507 210.981 177.162 cv
210.281 179.585 220.806 192.35 220.433 200.47 cv
220.123 207.243 214.02 206.663 213.249 207.83 cv
209.062 208.394 207.941 210.342 205.223 212.254 cv
202.491 214.179 223.182 249.421 222.586 252.122 cv
222.358 253.163 244.661 254.586 246.975 254.301 cv
264.699 252.122 265.978 249.369 265.978 248.762 cv
265.978 247.776 267.652 229.338 256.378 214.109 cv
cp
.168627 .168627 .168627 rgb
f
200.074 179.866 mo
199.814 179.866 li
199.814 177.723 li
200.074 177.723 li
200.074 179.866 li
cp
.439216 .439216 .439216 rgb
f
200.074 175.043 mo
199.814 175.043 li
199.814 173.972 li
200.074 173.972 li
200.074 175.043 li
cp
f
195.285 176.187 mo
195.06 176.317 li
194.524 175.388 li
194.749 175.259 li
195.285 176.187 li
cp
f
191.709 179.573 mo
191.58 179.798 li
190.651 179.262 li
190.781 179.037 li
191.709 179.573 li
cp
f
190.306 184.292 mo
190.306 184.552 li
189.233 184.552 li
189.233 184.292 li
190.306 184.292 li
cp
f
191.449 189.081 mo
191.58 189.306 li
190.651 189.842 li
190.521 189.617 li
191.449 189.081 li
cp
f
194.835 192.656 mo
195.06 192.786 li
194.524 193.714 li
194.299 193.585 li
194.835 192.656 li
cp
f
199.554 194.06 mo
199.814 194.06 li
199.814 195.132 li
199.554 195.132 li
199.554 194.06 li
cp
f
204.344 192.917 mo
204.569 192.786 li
205.104 193.714 li
204.879 193.844 li
204.344 192.917 li
cp
f
207.919 189.531 mo
208.048 189.306 li
208.977 189.842 li
208.847 190.067 li
207.919 189.531 li
cp
f
209.322 184.812 mo
209.322 184.552 li
210.394 184.552 li
210.394 184.812 li
209.322 184.812 li
cp
f
208.178 180.023 mo
208.048 179.798 li
208.977 179.262 li
209.108 179.487 li
208.178 180.023 li
cp
f
204.793 176.447 mo
204.569 176.317 li
205.104 175.388 li
205.329 175.519 li
204.793 176.447 li
cp
f
197.696 180.365 mo
197.472 180.494 li
196.399 178.638 li
196.625 178.507 li
197.696 180.365 li
cp
f
195.887 181.984 mo
195.757 182.209 li
193.9 181.137 li
194.029 180.912 li
195.887 181.984 li
cp
f
195.129 184.292 mo
195.129 184.552 li
192.985 184.552 li
192.985 184.292 li
195.129 184.292 li
cp
f
195.627 186.669 mo
195.757 186.894 li
193.9 187.966 li
193.77 187.741 li
195.627 186.669 li
cp
f
197.247 188.479 mo
197.472 188.609 li
196.399 190.466 li
196.174 190.336 li
197.247 188.479 li
cp
f
199.554 189.237 mo
199.814 189.237 li
199.814 191.381 li
199.554 191.381 li
199.554 189.237 li
cp
f
201.932 188.739 mo
202.157 188.609 li
203.229 190.466 li
203.003 190.596 li
201.932 188.739 li
cp
f
203.741 187.119 mo
203.871 186.894 li
205.729 187.966 li
205.599 188.191 li
203.741 187.119 li
cp
f
204.499 184.812 mo
204.499 184.552 li
206.643 184.552 li
206.643 184.812 li
204.499 184.812 li
cp
f
204.001 182.435 mo
203.871 182.209 li
205.729 181.137 li
205.858 181.362 li
204.001 182.435 li
cp
f
202.382 180.624 mo
202.157 180.494 li
203.229 178.638 li
203.454 178.768 li
202.382 180.624 li
cp
f
183.235 183.118 mo
183.957 183.118 184.871 189.417 186.025 189.61 cv
187.179 189.802 185.808 180.895 187.54 180.125 cv
189.271 179.355 188.44 189.579 189.233 189.552 cv
190.027 189.524 190.435 179.331 192.201 178.986 cv
193.967 178.641 191.128 188.973 191.994 189.165 cv
192.86 189.357 192.985 184.913 194.739 183.596 cv
196.198 182.5 197.641 181.957 197.893 182.608 cv
198.144 183.262 196.521 184.254 195.464 185.985 cv
194.406 187.717 194.324 193.333 196.413 193.264 cv
196.843 193.25 198.103 188.003 200.31 187.089 cv
201.125 186.751 201.719 186.877 201.248 188.744 cv
200.581 191.381 198.329 196.054 198.38 197.016 cv
198.432 197.978 199.84 206.223 199.814 206.8 cv
199.788 207.376 190.134 206.992 189.233 206.8 cv
188.8 206.707 189.348 203.583 187.747 200.014 cv
185.934 195.975 184.253 191.075 183.655 190.277 cv
182.501 188.738 181.821 183.118 183.235 183.118 cv
cp
.168627 .168627 .168627 rgb
f
168.375 172.794 mo
162.804 172.794 li
162.804 169.218 li
168.375 169.218 li
168.375 172.794 li
cp
1 .788235 .192157 rgb
f
162.804 168.42 mo
164.854 168.42 li
164.854 172.794 li
162.804 172.794 li
162.804 168.42 li
cp
f
168.375 181.26 mo
162.804 181.26 li
162.804 177.683 li
168.375 177.683 li
168.375 181.26 li
cp
f
162.804 176.885 mo
164.854 176.885 li
164.854 181.26 li
162.804 181.26 li
162.804 176.885 li
cp
f
168.375 174.56 mo
162.804 174.56 li
162.804 173.383 li
168.375 173.383 li
168.375 174.56 li
cp
.411765 .686275 .709804 rgb
f
168.375 183 mo
162.804 183 li
162.804 181.824 li
168.375 181.824 li
168.375 183 li
cp
f
235.099 214.109 mo
235.099 214.109 233.042 209.264 229.354 208.51 cv
225.667 207.758 220.706 207.697 220.706 207.697 cv
220.706 207.697 228.375 204.749 231.318 206.83 cv
234.259 208.911 235.099 214.109 235.099 214.109 cv
cp
.137255 .133333 .133333 rgb
f
223.786 231.074 mo
223.786 231.074 224.674 243.366 227.851 246.405 cv
231.028 249.443 234.757 250.353 234.757 250.353 cv
234.757 250.353 228.127 250.963 225.089 245.991 cv
222.05 241.017 223.786 231.074 223.786 231.074 cv
cp
f
202.252 235.796 mo
202.252 235.796 206.843 231.27 209.183 227.306 cv
211.521 223.341 210.377 214.893 210.377 214.893 cv
210.377 214.893 214.043 220.729 212.88 226.398 cv
211.718 232.069 202.252 235.796 202.252 235.796 cv
cp
f
201.416 243.777 mo
201.416 243.777 202.5 241.489 203.388 239.246 cv
204.277 237 210.948 233.181 210.948 233.181 cv
210.948 233.181 208.944 235.67 207.221 240.103 cv
205.499 244.537 201.416 243.777 201.416 243.777 cv
cp
f
231.763 184.913 mo
231.395 179.312 227.851 173.682 223.241 170.45 cv
216.854 172.485 211.451 175.533 210.981 177.162 cv
210.281 179.585 220.806 192.35 220.433 200.47 cv
220.222 205.065 217.348 206.274 215.279 206.942 cv
217.137 206.757 218.999 206.485 220.706 206.086 cv
228.161 204.34 232.354 193.896 231.763 184.913 cv
cp
f
239.259 211.578 mo
239.259 211.578 235.219 206.089 231.328 204.504 cv
227.436 202.918 224.033 204.615 224.033 204.615 cv
224.033 204.615 228.669 200.059 233.832 202.327 cv
238.992 204.594 239.259 211.578 239.259 211.578 cv
cp
f
206.779 210.716 mo
205.224 212.017 203.493 214.329 201.013 217.871 cv
195.778 225.345 189.261 238.562 189.233 241.201 cv
189.187 245.563 188.954 248.504 189.509 250.199 cv
190.204 250.777 190.747 251.097 191.05 251.058 cv
193.316 250.77 204.145 231.41 207.68 224.57 cv
210.475 219.165 208.489 213.302 206.779 210.716 cv
cp
.117647 .117647 .117647 rgb
f
200.31 187.089 mo
198.103 188.003 196.843 193.25 196.413 193.264 cv
194.324 193.333 194.406 187.717 195.464 185.985 cv
196.521 184.254 198.144 183.262 197.893 182.608 cv
197.641 181.957 196.198 182.5 194.739 183.596 cv
192.985 184.913 192.86 189.357 191.994 189.165 cv
191.128 188.973 193.967 178.641 192.201 178.986 cv
190.435 179.331 190.027 189.524 189.233 189.552 cv
189.231 189.552 189.229 189.549 189.226 189.549 cv
189.322 190.781 190.112 194.726 190.673 195.683 cv
193.237 200.063 194.305 200.446 195.505 203.296 cv
195.991 204.452 196.184 205.803 196.404 207.104 cv
198.287 207.106 199.803 207.029 199.814 206.8 cv
199.84 206.223 198.432 197.978 198.38 197.016 cv
198.329 196.054 200.581 191.381 201.248 188.744 cv
201.719 186.877 201.125 186.751 200.31 187.089 cv
cp
.0666667 .0627451 .0627451 rgb
f
222.586 252.122 mo
222.358 253.163 244.661 254.586 246.975 254.301 cv
264.699 252.122 265.978 249.369 265.978 248.762 cv
265.978 247.776 267.652 229.338 256.378 214.109 cv
255.567 213.012 250.01 208.976 248.79 208.475 cv
246.211 207.205 245.203 203.364 245.203 203.364 cv
245.203 203.364 244.652 200.123 244.551 196.27 cv
244.551 196.27 242.544 204.404 245.942 211.924 cv
249.338 219.446 254.812 227.939 254.253 235.796 cv
253.695 243.656 248.305 253.339 237.67 252.122 cv
232.061 251.48 225.918 249.861 221.365 248.474 cv
222.207 250.364 222.684 251.682 222.586 252.122 cv
cp
.137255 .133333 .133333 rgb
f
244.095 217.655 mo
244.095 217.655 249.191 226.155 250.962 232.485 cv
252.736 238.815 253.4 247.011 253.4 247.011 cv
253.4 247.011 256.059 235.431 252.07 227.596 cv
248.083 219.762 244.095 217.655 244.095 217.655 cv
cp
f
213.872 233.41 mo
213.872 233.41 214.703 228.908 218.693 229.316 cv
223.293 229.785 221.776 241.821 221.776 241.821 cv
221.776 241.821 220.036 235.746 218.324 233.919 cv
216.108 231.557 213.872 233.41 213.872 233.41 cv
cp
f
245.203 203.364 mo
245.203 203.364 243.438 192.973 245.646 187.285 cv
248.892 178.929 243.652 168.705 235.501 168.42 cv
233.788 168.36 231.954 168.507 230.09 168.8 cv
233.28 169.782 240.309 172.918 240.54 181.561 cv
240.839 192.75 242.031 204.784 246.985 206.942 cv
245.73 205.353 245.203 203.364 245.203 203.364 cv
cp
f
211.461 176.402 mo
211.215 176.678 211.046 176.934 210.981 177.162 cv
210.281 179.585 220.806 192.35 220.433 200.47 cv
220.329 202.75 219.562 204.184 218.57 205.146 cv
218.577 205.14 218.585 205.14 218.592 205.135 cv
223.936 202.441 220.89 193.8 217.14 186.395 cv
214.952 182.073 212.843 178.574 211.461 176.402 cv
cp
.360784 .494118 .498039 rgb
f
113.957 71.9961 mo
113.957 101.147 90.3247 124.779 61.1729 124.779 cv
32.0225 124.779 8.39014 101.147 8.39014 71.9961 cv
8.39014 42.8447 32.0225 19.2124 61.1729 19.2124 cv
90.3247 19.2124 113.957 42.8447 113.957 71.9961 cv
cp
.666667 .666667 .666667 rgb
f
87.3667 110.958 mo
86.1572 104.118 86.1025 96.6782 83.4731 93.4482 cv
77.8232 86.5078 42.6484 97.8525 42.6484 97.8525 cv
42.6484 97.8525 35.8809 108.175 34.2485 110.508 cv
33.71 111.279 32.562 113.226 31.2681 115.485 cv
36.9531 119.401 43.4375 122.237 50.4346 123.684 cv
51.3774 122.111 52.7881 119.795 54.5801 116.958 cv
56.2319 114.345 61.1729 108.848 61.1729 108.848 cv
61.1729 108.848 63.7681 114.267 64.5728 116.508 cv
66.1094 120.791 66.9458 123.124 67.4028 124.401 cv
74.9263 123.515 81.9648 121.055 88.1787 117.348 cv
88.0151 115.374 87.7637 113.199 87.3667 110.958 cv
cp
0 0 0 rgb
f
23.939 44.5391 mo
24.9189 40.5117 32.8862 26.2788 45.9932 26.2788 cv
59.0996 26.2788 68.897 25.0063 78.2119 35.7422 cv
87.5283 46.478 83.5381 68.1738 83.2886 76.6519 cv
83.0386 85.1304 90.2705 98.0977 86.0322 99.8433 cv
81.7925 101.589 42.3389 104.332 41.3677 99.8433 cv
40.3975 95.355 43.8882 84.6313 40.1479 76.6519 cv
36.4072 68.6719 20.4478 58.8774 23.939 44.5391 cv
cp
.0862745 .0823529 .0823529 rgb
f
74.3677 80.7324 mo
74.6821 83.8857 76.2764 96.2603 75.4644 97.0952 cv
74.5908 97.9941 51.8794 97.9556 49.8174 97.6802 cv
47.7563 97.4053 47.9849 83.2173 48.8096 82.3872 cv
49.6338 81.5566 74.2461 79.5098 74.3677 80.7324 cv
cp
.109804 .105882 .105882 rgb
f
25.9351 40.0234 mo
21.2593 46.1055 18.4526 53.8608 21.6943 64.2593 cv
24.9365 74.6567 37.6543 82.3872 37.6543 82.3872 cv
37.6543 82.3872 43.5859 75.6543 41.3677 71.1655 cv
39.1504 66.6768 25.9351 40.0234 25.9351 40.0234 cv
cp
.207843 .207843 .207843 rgb
f
33.3188 62.626 mo
33.3188 62.626 29.4839 52.812 28.2227 50.6274 cv
26.9614 48.4414 24.8682 46.9448 24.8682 46.9448 cv
24.8682 46.9448 24.8682 46.9448 26.5493 52.7183 cv
28.0391 57.835 31.5723 61.8115 33.3188 62.626 cv
cp
.14902 .14902 .14902 rgb
f
26.3374 32.0269 mo
26.3374 32.0269 24.2729 29.9502 26.3242 25.2261 cv
28.3755 20.501 42.5356 12.7744 52.0088 16.3198 cv
61.4824 19.8647 62.5005 19.71 62.5513 21.6733 cv
62.6025 23.6377 53.0801 34.8633 53.2144 38.5503 cv
53.3491 42.2363 51.0278 49.2388 50.7632 49.3203 cv
50.4995 49.4028 45.2612 43.5371 41.605 40.7202 cv
37.9487 37.9033 26.3374 32.0269 26.3374 32.0269 cv
cp
.0862745 .0823529 .0823529 rgb
f
29.4082 21.2173 mo
29.8945 23.5615 34.4497 30.8115 37.8872 33.5068 cv
41.3247 36.2026 45.5845 37.2837 47.7915 36.8364 cv
49.9995 36.3892 52.6694 32.8945 53.6768 27.7334 cv
54.6841 22.5718 54.1094 13.6963 54.1094 13.6963 cv
29.4082 21.2173 li
cp
1 .694118 .560784 rgb
f
24.8682 32.355 mo
24.8682 32.355 25.1333 30.9072 25.9175 30.9976 cv
31.4097 31.6343 44.9766 38.5088 48.1616 43.4316 cv
52.2803 49.7939 52.5254 54.1499 52.5254 54.1499 cv
52.5254 54.1499 46.6333 46.0869 39.9043 41.2061 cv
34.5366 37.312 24.8682 32.355 24.8682 32.355 cv
cp
.207843 .207843 .207843 rgb
f
63.7539 21.6982 mo
63.7539 21.6982 62.3599 20.21 61.8955 20.6655 cv
58.0249 24.4551 49.9248 37.1563 49.8218 43.002 cv
49.6899 50.5806 52.5254 54.1499 52.5254 54.1499 cv
52.5254 54.1499 52.5229 44.7544 55.6543 37.0542 cv
58.1528 30.9116 63.7539 21.6982 63.7539 21.6982 cv
cp
f
51.9077 53.3359 mo
50.3359 49.5376 47.1069 44.0845 40.7061 40.1489 cv
36.8228 37.7617 33.6279 36.4487 31.124 35.7422 cv
34.0542 37.3979 37.4346 39.4141 39.9043 41.2061 cv
45.3413 45.1499 50.2295 51.1685 51.9077 53.3359 cv
cp
.486275 .486275 .486275 rgb
f
55.6543 37.0542 mo
56.71 34.46 58.3184 31.3193 59.8237 28.5552 cv
58.3638 30.3789 56.7725 32.8022 55.1699 36.0146 cv
51.9277 42.5156 51.9517 48.6533 52.5669 52.7183 cv
52.6992 49.8003 53.2627 42.9351 55.6543 37.0542 cv
cp
.278431 .278431 .278431 rgb
f
28.2227 57.4478 mo
94.0513 44.8862 li
100.923 80.8872 li
35.0923 93.4482 li
28.2227 57.4478 li
cp
.568627 .921569 .94902 rgb
f
36.4644 59.3916 mo
88.6953 49.4238 li
94.1445 77.9883 li
41.916 87.9546 li
36.4644 59.3916 li
cp
.180392 .792157 .937255 rgb
f
55.3179 59.8047 mo
78.0679 55.4648 li
78.769 59.1475 li
56.02 63.4873 li
55.3179 59.8047 li
cp
1 1 1 rgb
f
40.9844 62.5854 mo
50.8247 60.7085 li
51.5269 64.3911 li
41.6865 66.2681 li
40.9844 62.5854 li
cp
.619608 .913725 .937255 rgb
f
42.3926 69.8804 mo
52.231 68.0034 li
52.9341 71.6875 li
43.0947 73.5649 li
42.3926 69.8804 li
cp
f
57.8613 73.9858 mo
71.0698 71.4653 li
72.2529 77.6685 li
59.0444 80.1885 li
57.8613 73.9858 li
cp
0 .592157 .729412 rgb
f
56.7231 67.1016 mo
79.4756 62.7598 li
80.1772 66.4434 li
57.4253 70.7842 li
56.7231 67.1016 li
cp
1 1 1 rgb
f
49.4966 87.8096 mo
48.3594 87.5166 44.4766 86.5923 41.6465 86.5576 cv
39.647 86.5332 38.6938 87.2319 38.71 88.1528 cv
38.7246 89.0239 39.2935 89.3213 41.1147 89.2866 cv
42.7573 89.2554 44.1528 90.0688 44 90.4883 cv
43.3696 92.2222 36.3599 92.6001 36.3599 93.2065 cv
36.3604 94.9365 40.21 97.2832 46.604 96.0366 cv
52.999 94.7896 56.7856 90.3672 56.7856 90.3672 cv
49.4966 87.8096 li
cp
0 0 0 rgb
f
68.7075 28.5552 mo
77.3911 31.8149 83.8911 37.9097 86.0483 43.8384 cv
88.2031 49.7676 89.9487 67.2842 87.3667 73.5186 cv
84.7842 79.7524 54.915 95.229 52.3823 95.229 cv
49.8491 95.229 45.7129 86.3335 47.8477 85.3359 cv
49.9819 84.3384 73.0894 68.3154 72.5815 66.3042 cv
72.0737 64.2944 66.2603 52.7183 64.5728 42.5723 cv
63.6538 37.0527 68.7075 28.5552 68.7075 28.5552 cv
cp
.207843 .207843 .207843 rgb
f
75.8179 67.2432 mo
73.2529 64.9385 76.8848 61.5044 73.2915 51.8232 cv
70.6323 44.6621 67.7739 36.4463 66.6699 32.6133 cv
65.3867 35.5479 64.063 39.5142 64.5728 42.5723 cv
66.2603 52.7183 72.0737 64.2944 72.5815 66.3042 cv
73.0894 68.3154 49.9819 84.3384 47.8477 85.3359 cv
46.7212 85.8628 47.3423 88.5908 48.5527 91.0488 cv
49.5483 90.8882 50.5093 90.6606 51.3633 90.3433 cv
55.894 88.6636 70.7515 75.7822 72.5356 72.6729 cv
74.3198 69.5635 82.8242 74.1177 83.4731 72.3662 cv
83.7017 71.7476 78.3823 69.5483 75.8179 67.2432 cv
cp
.239216 .231373 .231373 rgb
f
29.6411 74.8066 mo
29.9878 72.9971 32.1147 72.1128 33.832 71.561 cv
36.3335 70.7559 38.4521 70.1021 38.6968 71.6646 cv
38.8374 72.563 36.4229 73.0068 35.3096 73.5498 cv
34.731 73.8311 33.4204 74.0977 33.3853 74.8242 cv
33.3169 76.2324 34.4277 75.2456 36.5459 74.4551 cv
37.7402 74.0098 40.9731 72.9648 41.3896 73.6729 cv
42.4199 75.4258 39.7407 75.7896 37.752 76.5684 cv
36.4468 77.0796 34.9541 77.6113 35.0684 78.1792 cv
35.2397 79.0342 36.457 78.4702 37.8169 78.1792 cv
39.7573 77.7637 41.5117 76.8149 41.8643 78.3242 cv
42.1621 79.5986 40.2153 79.6855 38.5386 80.0801 cv
36.4697 80.5664 34.52 81.1201 34.7935 82.1069 cv
35.0186 82.9189 35.9121 82.9541 36.6831 82.897 cv
38.311 82.7749 41.1831 80.939 41.5151 83.1074 cv
41.6104 83.7275 40.1934 84.2163 38.3838 84.8423 cv
36.335 85.5498 33.8511 85.9839 32.7832 85.0039 cv
30.6724 83.0649 29.1069 77.5991 29.6411 74.8066 cv
cp
0 0 0 rgb
f
33.4639 28.4658 mo
36.9844 28.1035 54.583 23.1235 54.5801 23.708 cv
54.5723 26.1479 53.9995 30.9697 52.2451 34.082 cv
50.1147 37.8613 42.4199 38.5459 37.6787 34.2197 cv
35.8296 32.5313 32.5952 28.5552 33.4639 28.4658 cv
cp
f
32.4653 27.1157 mo
32.4653 27.1157 39.6602 25.3149 41.5151 24.6011 cv
42.3081 24.2959 42.6948 22.54 43.519 22.2651 cv
44.3438 21.9897 45.5117 23.6816 46.7485 23.6606 cv
47.9849 23.6396 54.2217 22.2349 54.2217 22.2349 cv
54.2725 18.4863 li
54.2725 18.4863 45.2939 19.1011 39.7407 20.5781 cv
34.187 22.0557 31.124 25.3149 31.124 25.3149 cv
32.4653 27.1157 li
cp
.858824 .509804 .415686 rgb
f
24.8682 32.355 mo
24.5498 32.3594 24.8159 12.2314 30.6953 5.00244 cv
34.062 .861816 41.9136 -1.30029 46.6631 .836426 cv
52.8838 3.63477 63.8384 21.0303 63.7539 21.6982 cv
63.6694 22.3662 55.7598 18.6431 42.6616 22.0269 cv
29.3027 25.478 25.876 32.3423 24.8682 32.355 cv
cp
.207843 .207843 .207843 rgb
f
38.2046 2.4502 mo
33.6089 3.76318 33.9121 19.8921 34.3691 25.1045 cv
36.5874 23.9717 39.312 22.8916 42.6616 22.0269 cv
46.186 21.1162 49.3315 20.7227 52.0532 20.6177 cv
49.7515 15.5889 44.3716 .686035 38.2046 2.4502 cv
cp
.266667 .266667 .266667 rgb
f
77.9692 54.6157 mo
77.9692 54.6157 81.8823 59.3242 80.4937 62.2832 cv
79.105 65.2417 74.3677 66.0396 74.3677 66.0396 cv
74.3677 66.0396 74.8018 65.6436 76.1885 63.252 cv
77.5757 60.8604 77.9692 54.6157 77.9692 54.6157 cv
cp
.176471 .176471 .176471 rgb
f
75.436 47.6855 mo
75.436 47.6855 76.2817 54.0938 75.4556 58.6333 cv
74.6313 63.1738 73.376 65.603 73.376 65.603 cv
73.376 65.603 72.3462 57.8862 73.376 54.8916 cv
74.4063 51.8965 75.436 47.6855 75.436 47.6855 cv
cp
f
73.2915 67.9839 mo
73.2915 67.9839 75.1919 66.272 79.0044 67.873 cv
82.8188 69.4736 83.4731 72.3662 83.4731 72.3662 cv
83.4731 72.3662 80.4917 70.8613 78.3823 69.5483 cv
75.8667 67.9839 73.2915 67.9839 73.2915 67.9839 cv
cp
.14902 .14902 .14902 rgb
f
58.4995 61.2471 mo
58.4995 61.7368 58.1011 62.1338 57.6108 62.1338 cv
57.1211 62.1338 56.7231 61.7368 56.7231 61.2471 cv
56.7231 60.7559 57.1211 60.3584 57.6108 60.3584 cv
58.1011 60.3584 58.4995 60.7559 58.4995 61.2471 cv
cp
.207843 .207843 .207843 rgb
f
61.9849 60.5483 mo
61.9849 61.0381 61.5879 61.4351 61.0967 61.4351 cv
60.6069 61.4351 60.2095 61.0381 60.2095 60.5483 cv
60.2095 60.0571 60.6069 59.6606 61.0967 59.6606 cv
61.5879 59.6606 61.9849 60.0571 61.9849 60.5483 cv
cp
f
65.5029 60.0054 mo
65.5029 60.4937 65.1074 60.8921 64.6152 60.8921 cv
64.1265 60.8921 63.729 60.4937 63.729 60.0054 cv
63.729 59.5137 64.1265 59.1157 64.6152 59.1157 cv
65.1074 59.1157 65.5029 59.5137 65.5029 60.0054 cv
cp
f
59.874 68.6089 mo
59.874 69.0981 59.4766 69.4956 58.9873 69.4956 cv
58.4956 69.4956 58.0986 69.0981 58.0986 68.6089 cv
58.0986 68.1177 58.4956 67.7202 58.9873 67.7202 cv
59.4766 67.7202 59.874 68.1177 59.874 68.6089 cv
cp
f
63.1333 68.0034 mo
63.1333 68.4946 62.7344 68.8916 62.2456 68.8916 cv
61.7549 68.8916 61.3564 68.4946 61.3564 68.0034 cv
61.3564 67.5137 61.7549 67.1162 62.2456 67.1162 cv
62.7344 67.1162 63.1333 67.5137 63.1333 68.0034 cv
cp
f
66.3906 67.4258 mo
66.3906 67.9155 65.9932 68.3125 65.5029 68.3125 cv
65.0122 68.3125 64.6152 67.9155 64.6152 67.4258 cv
64.6152 66.9346 65.0122 66.5371 65.5029 66.5371 cv
65.9932 66.5371 66.3906 66.9346 66.3906 67.4258 cv
cp
f
68.9902 59.332 mo
68.9902 59.8232 68.5933 60.2207 68.1025 60.2207 cv
67.6123 60.2207 67.2148 59.8232 67.2148 59.332 cv
67.2148 58.8423 67.6123 58.4453 68.1025 58.4453 cv
68.5933 58.4453 68.9902 58.8423 68.9902 59.332 cv
cp
f
72.2529 58.772 mo
72.2529 59.2632 71.8555 59.6606 71.3652 59.6606 cv
70.8745 59.6606 70.4775 59.2632 70.4775 58.772 cv
70.4775 58.2827 70.8745 57.8853 71.3652 57.8853 cv
71.8555 57.8853 72.2529 58.2827 72.2529 58.772 cv
cp
f
68.7075 28.5552 mo
68.7075 28.5552 68.3257 29.2012 67.7969 30.2329 cv
71.6182 33.543 80.9468 40.0337 82.6836 51.8232 cv
84.7842 66.0732 86.6387 71.5391 85.5332 73.1377 cv
82.0845 78.1274 60.1641 88.4248 56.1235 91.0488 cv
54.3677 92.1899 52.2739 93.1357 50.4355 93.9722 cv
51.105 94.7358 51.7871 95.229 52.3823 95.229 cv
54.915 95.229 84.7842 79.7524 87.3667 73.5186 cv
89.9487 67.2842 88.2031 49.7676 86.0483 43.8384 cv
83.8911 37.9097 77.3911 31.8149 68.7075 28.5552 cv
cp
.156863 .152941 .152941 rgb
f
260.023 343.193 mo
260.023 372.344 236.392 395.977 207.241 395.977 cv
178.089 395.977 154.458 372.344 154.458 343.193 cv
154.458 314.042 178.089 290.41 207.241 290.41 cv
236.392 290.41 260.023 314.042 260.023 343.193 cv
cp
1 .835294 .152941 rgb
f
230.75 338.512 mo
244.474 338.512 li
255.812 367.176 li
239.39 371.166 li
230.75 338.512 li
cp
.517647 .329412 .145098 rgb
f
240.749 352.26 mo
246.369 369.434 li
245.042 369.757 li
239.922 353.458 li
240.749 352.26 li
cp
.427451 .266667 .12549 rgb
f
231.107 341.01 mo
231.407 341.01 240.555 342.61 240.555 342.61 cv
249.647 368.674 li
248.357 368.987 li
239.506 343.436 li
231.481 341.759 li
231.107 341.01 li
cp
f
162.208 311.753 mo
157.456 317.322 li
158.072 325.599 li
163.088 335.959 li
163.918 343.149 li
172.062 343.149 li
172.062 325.01 li
162.208 311.753 li
cp
.768627 .54902 .286275 rgb
f
195.814 335.682 mo
195.814 335.682 195.74 326.362 188.799 317.629 cv
179.277 305.646 162.208 311.753 162.208 311.753 cv
172.062 325.01 li
174.173 351.191 li
195.814 335.682 li
cp
.647059 .443137 .215686 rgb
f
164.031 314.205 mo
159.984 309.019 li
163.541 306.129 li
167.852 311.876 li
164.031 314.205 li
cp
f
189.844 335.682 mo
187.894 328.213 185.705 317.625 177.331 313.584 cv
170.803 310.433 166.401 312.613 164.378 314.671 cv
172.062 325.01 li
174.173 351.191 li
190.513 339.481 li
190.377 338.189 190.164 336.904 189.844 335.682 cv
cp
.568627 .376471 .184314 rgb
f
170.071 311.598 mo
169.292 305.2 li
173.798 304.367 li
174.832 311.475 li
170.071 311.598 li
cp
.647059 .443137 .215686 rgb
f
176.763 311.855 mo
178.907 305.775 li
183.314 307.032 li
181.082 313.859 li
176.763 311.855 li
cp
f
182.975 313.725 mo
187.88 309.543 li
191.063 312.841 li
185.705 317.625 li
182.975 313.725 li
cp
f
188.726 319.214 mo
194.387 316.131 li
196.823 320.013 li
190.595 323.595 li
188.726 319.214 li
cp
f
191.915 327.111 mo
198.06 325.16 li
199.713 329.435 li
192.917 331.765 li
191.915 327.111 li
cp
f
188.726 363.482 mo
191.915 377.599 li
187.896 387.997 li
187.896 392.748 li
174.173 392.748 li
178.22 384.479 li
181.563 377.248 li
177.244 362.896 li
188.726 363.482 li
cp
.517647 .329412 .145098 rgb
f
194.407 364.381 mo
197.597 378.499 li
193.578 387.997 li
193.578 392.748 li
179.854 392.748 li
183.901 384.479 li
187.244 377.248 li
182.925 362.896 li
194.407 364.381 li
cp
.768627 .54902 .286275 rgb
f
234.33 363.482 mo
237.52 377.599 li
233.5 387.997 li
233.5 392.748 li
219.777 392.748 li
223.823 384.479 li
227.167 377.248 li
215.203 362.896 li
234.33 363.482 li
cp
.517647 .329412 .145098 rgb
f
242.453 365.946 mo
245.26 377.599 li
241.241 387.997 li
241.241 392.748 li
227.518 392.748 li
231.565 384.479 li
234.908 377.248 li
222.944 362.896 li
242.453 365.946 li
cp
.768627 .54902 .286275 rgb
f
255.81 398.144 mo
169.951 398.144 li
169.951 392.748 li
255.81 392.748 li
255.81 398.144 li
cp
.647059 .443137 .215686 rgb
f
255.81 394.237 mo
169.951 394.237 li
169.951 392.748 li
255.81 392.748 li
255.81 394.237 li
cp
.898039 .627451 .380392 rgb
f
255.81 399.322 mo
169.951 399.322 li
169.951 398.144 li
255.81 398.144 li
255.81 399.322 li
cp
.517647 .329412 .145098 rgb
f
195.814 335.682 mo
227.836 335.682 li
242.453 350.298 li
174.173 351.191 li
195.814 335.682 li
cp
.768627 .54902 .286275 rgb
f
242.453 365.946 mo
178.043 365.946 li
174.173 351.191 li
242.453 350.298 li
242.453 365.946 li
cp
.647059 .443137 .215686 rgb
f
230.696 338.542 mo
227.836 335.682 li
195.814 335.682 li
190.513 339.481 li
190.513 339.481 li
190.513 339.481 200.826 343.784 210.335 344.142 cv
219.473 344.485 229.896 338.972 230.696 338.542 cv
cp
.839216 .588235 .317647 rgb
f
234.908 377.248 mo
227.518 392.748 li
236.344 392.748 li
241.139 377.822 li
236.195 365.946 li
225.486 365.946 li
234.908 377.248 li
cp
.827451 .588235 .32549 rgb
f
165.75 341.47 mo
165.089 341.47 li
165.089 339.499 li
165.75 339.499 li
165.75 341.47 li
cp
.427451 .266667 .12549 rgb
f
198.706 354.838 mo
177.331 354.838 li
177.331 353.759 li
198.706 353.759 li
198.706 354.838 li
cp
.517647 .329412 .145098 rgb
f
234.255 354.838 mo
212.88 354.838 li
212.88 353.759 li
234.255 353.759 li
234.255 354.838 li
cp
f
219.613 347.677 mo
202.981 347.677 li
202.981 346.598 li
219.613 346.598 li
219.613 347.677 li
cp
.647059 .443137 .215686 rgb
f
204.13 343.149 mo
187.498 343.149 li
187.498 342.07 li
204.13 342.07 li
204.13 343.149 li
cp
f
222.443 338.512 mo
210.335 338.512 li
210.335 337.433 li
222.443 337.433 li
222.443 338.512 li
cp
f
180.039 318.983 mo
171.877 325.942 li
171.176 325.121 li
180.389 317.263 li
180.039 318.983 li
cp
.768627 .54902 .286275 rgb
f
182.808 326.759 mo
172.885 335.221 li
172.778 333.894 li
182.944 325.223 li
182.808 326.759 li
cp
f
182.975 333.933 mo
173.437 342.066 li
173.33 340.738 li
183.268 332.263 li
182.975 333.933 li
cp
f
194.78 363.436 mo
182.672 363.436 li
182.672 362.357 li
194.78 362.357 li
194.78 363.436 li
cp
.517647 .329412 .145098 rgb
f
241.139 389.086 mo
229.032 389.086 li
229.032 388.006 li
241.139 388.006 li
241.139 389.086 li
cp
f
216.706 359.924 mo
195.331 359.924 li
195.331 358.844 li
216.706 358.844 li
216.706 359.924 li
cp
f
238.645 363.976 mo
223.568 363.976 li
223.568 362.896 li
238.645 362.896 li
238.645 363.976 li
cp
f
175.932 329.563 mo
175.932 330.171 175.439 330.664 174.832 330.664 cv
174.224 330.664 173.731 330.171 173.731 329.563 cv
173.731 328.955 174.224 328.462 174.832 328.462 cv
175.439 328.462 175.932 328.955 175.932 329.563 cv
cp
f
242.24 367.887 mo
242.24 368.495 241.748 368.987 241.139 368.987 cv
240.531 368.987 240.039 368.495 240.039 367.887 cv
240.039 367.281 240.531 366.789 241.139 366.789 cv
241.748 366.789 242.24 367.281 242.24 367.887 cv
cp
f
193.875 367.887 mo
193.875 368.495 193.381 368.987 192.774 368.987 cv
192.167 368.987 191.674 368.495 191.674 367.887 cv
191.674 367.281 192.167 366.789 192.774 366.789 cv
193.381 366.789 193.875 367.281 193.875 367.887 cv
cp
f
176.374 336.603 mo
176.374 337.209 175.881 337.704 175.273 337.704 cv
174.666 337.704 174.173 337.209 174.173 336.603 cv
174.173 335.995 174.666 335.502 175.273 335.502 cv
175.881 335.502 176.374 335.995 176.374 336.603 cv
cp
f
176.708 343.436 mo
176.708 344.044 176.216 344.537 175.608 344.537 cv
175 344.537 174.508 344.044 174.508 343.436 cv
174.508 342.83 175 342.335 175.608 342.335 cv
176.216 342.335 176.708 342.83 176.708 343.436 cv
cp
f
162.208 311.753 mo
157.456 317.322 li
158.072 325.599 li
163.088 335.959 li
163.918 343.149 li
168.532 343.149 li
166.881 338.491 164.63 332.58 163.237 327.451 cv
161.612 321.468 162.594 317.133 164.082 314.272 cv
162.208 311.753 li
cp
.866667 .6 .329412 rgb
f
165.373 326.759 mo
162.208 326.759 li
162.208 323.595 li
165.373 323.595 li
165.373 326.759 li
cp
.427451 .266667 .12549 rgb
f
169.292 318.265 mo
157.456 318.265 li
157.456 317.331 li
169.292 317.331 li
169.292 318.265 li
cp
.568627 .376471 .184314 rgb
f
172.062 336.828 mo
163.237 337.247 li
163.237 336.352 li
172.062 335.959 li
172.062 336.828 li
cp
.647059 .443137 .215686 rgb
f
211.296 362.357 mo
194.621 363.044 181.581 358.224 175.241 355.262 cv
178.043 365.946 li
242.453 365.946 li
242.453 355.888 li
236.467 358.398 225.915 361.753 211.296 362.357 cv
cp
.576471 .392157 .207843 rgb
f
183.843 365.946 mo
187.244 377.248 li
179.854 392.748 li
187.244 392.748 li
191.915 377.599 li
189.282 365.946 li
183.843 365.946 li
cp
.827451 .588235 .32549 rgb
f
193.552 389.086 mo
181.443 389.086 li
181.443 388.006 li
193.552 388.006 li
193.552 389.086 li
cp
.517647 .329412 .145098 rgb
f
309.829 395.876 mo
309.829 395.052 310.999 394.382 312.441 394.382 cv
313.885 394.382 315.056 395.052 315.056 395.876 cv
315.056 396.701 313.885 397.369 312.441 397.369 cv
310.999 397.369 309.829 396.701 309.829 395.876 cv
cp
.686275 .686275 .686275 rgb
f
314.534 395.876 mo
314.534 395.876 314.176 396.838 312.381 396.838 cv
310.227 396.838 310.227 395.876 310.227 395.876 cv
310.227 170.509 li
314.534 170.509 li
314.534 395.876 li
cp
.486275 .341176 .109804 rgb
f
311.414 396.745 mo
312.019 396.838 312.725 396.745 312.725 396.745 cv
312.725 170.509 li
310.227 170.509 li
310.227 395.876 li
310.227 395.876 310.249 396.507 311.414 396.745 cv
cp
.647059 .427451 .160784 rgb
f
316.343 170.509 mo
316.343 172.698 314.569 174.472 312.381 174.472 cv
310.192 174.472 308.419 172.698 308.419 170.509 cv
308.419 168.32 310.192 166.548 312.381 166.548 cv
314.569 166.548 316.343 168.32 316.343 170.509 cv
cp
.486275 .341176 .109804 rgb
f
308.417 170.509 mo
308.417 170.724 308.449 170.929 308.481 171.135 cv
309.191 171.801 310.136 172.216 311.187 172.216 cv
313.375 172.216 315.148 170.441 315.148 168.254 cv
315.148 168.04 315.118 167.833 315.084 167.628 cv
314.376 166.963 313.43 166.548 312.381 166.548 cv
310.192 166.548 308.417 168.32 308.417 170.509 cv
cp
.556863 .380392 .129412 rgb
f
311.742 169.427 mo
311.742 170.02 311.261 170.5 310.668 170.5 cv
310.076 170.5 309.595 170.02 309.595 169.427 cv
309.595 168.834 310.076 168.354 310.668 168.354 cv
311.261 168.354 311.742 168.834 311.742 169.427 cv
cp
.647059 .427451 .160784 rgb
f
361.125 371.128 mo
361.125 371.128 367.969 375.048 368.13 376.591 cv
368.289 378.134 361.372 392.704 359.213 392.143 cv
353.876 390.756 360.346 381.368 357.801 376.222 cv
355.253 371.079 361.125 371.128 361.125 371.128 cv
cp
.0862745 .0823529 .0823529 rgb
f
343.285 381.714 mo
343.285 382.512 342.078 387.446 342.555 388.563 cv
343.033 389.676 353.064 400.422 355.767 398.631 cv
360.04 395.8 348.954 381.645 348.954 381.645 cv
343.285 381.714 li
cp
f
355.572 314.086 mo
355.572 314.086 358.348 329.582 357.04 340.245 cv
355.731 350.911 354.298 354.095 354.139 356.96 cv
353.981 359.827 351.751 384.501 350.955 385.457 cv
350.16 386.412 343.154 385.617 342.518 385.457 cv
341.88 385.296 340.228 366.952 343.091 355.169 cv
344.042 351.255 339.014 320.982 339.493 318.753 cv
339.97 316.524 355.572 314.086 355.572 314.086 cv
cp
.188235 .188235 .188235 rgb
f
339.493 318.753 mo
339.014 320.982 344.042 351.255 343.091 355.169 cv
340.228 366.952 341.88 385.296 342.518 385.457 cv
342.863 385.543 345.096 385.819 347.186 385.895 cv
347.989 380.699 348.233 368.328 348.837 361.618 cv
349.507 354.214 350.199 348.483 349.594 345.737 cv
349.12 343.565 346.939 324.32 345.987 315.993 cv
342.661 316.816 339.699 317.802 339.493 318.753 cv
cp
.219608 .219608 .219608 rgb
f
323.254 319.549 mo
323.254 319.549 325.884 349.359 327.513 353.02 cv
329.142 356.683 357.801 379.408 358.595 379.408 cv
359.392 379.408 361.939 373.317 362.894 372.304 cv
363.85 371.289 343.481 351.22 341.125 348.355 cv
338.77 345.49 341.821 320.707 341.183 318.157 cv
340.546 315.611 323.254 319.549 323.254 319.549 cv
cp
.239216 .239216 .239216 rgb
f
345.482 268.23 mo
347.207 266.737 349.536 265.05 351.652 263.601 cv
349.917 264.384 347.866 265.556 345.513 267.297 cv
340.754 270.818 338.503 275.283 337.448 278.462 cv
338.624 276.394 341.571 271.615 345.482 268.23 cv
cp
.278431 .278431 .278431 rgb
f
334.081 350.003 mo
333.981 348.404 332.994 326.709 332.914 317.768 cv
328.211 318.425 323.254 319.549 323.254 319.549 cv
323.254 319.549 325.884 349.359 327.513 353.02 cv
329.142 356.683 357.801 379.408 358.595 379.408 cv
358.882 379.408 359.389 378.625 359.969 377.581 cv
352.943 370.041 334.177 351.58 334.081 350.003 cv
cp
.317647 .309804 .309804 rgb
f
314.738 272.904 mo
314.738 264.228 323.254 262.167 338.897 263.601 cv
354.54 265.033 359.791 271.032 360.983 275.328 cv
362.248 279.876 353.025 301.241 353.502 305.221 cv
353.981 309.202 358.754 322.553 357.942 324.191 cv
357.538 325.008 349.315 326.936 340.813 328.037 cv
332.241 329.143 323.385 329.421 322.346 328.941 cv
320.277 327.986 322.458 309.321 321.185 300.724 cv
319.912 292.127 314.738 279.989 314.738 272.904 cv
cp
.0862745 .0823529 .0823529 rgb
f
353.502 305.221 mo
353.025 301.241 362.248 279.876 360.983 275.328 cv
359.99 271.749 356.152 266.992 345.854 264.677 cv
344.733 265.033 344.069 265.253 344.069 265.253 cv
345.223 265.742 352.07 266.611 353.502 275.328 cv
354.936 284.048 348.142 301.399 346.921 302.115 cv
345.7 302.835 346.921 303.853 348.837 308.087 cv
349.499 309.547 348.335 315.569 349.326 319.231 cv
349.779 320.903 350.315 323.734 350.758 326.367 cv
354.809 325.519 357.707 324.667 357.942 324.191 cv
358.754 322.553 353.981 309.202 353.502 305.221 cv
cp
.0392157 .0392157 .0392157 rgb
f
329.146 307.227 mo
328.156 300.476 328.03 271.471 329.146 267.81 cv
330.26 264.15 333.923 265.698 335.389 264.22 cv
335.389 264.22 334.278 263.812 332.472 263.215 cv
320.951 262.929 314.738 265.507 314.738 272.904 cv
314.738 279.989 319.912 292.127 321.185 300.724 cv
322.458 309.321 320.277 327.986 322.346 328.941 cv
323.006 329.247 326.82 329.245 331.708 328.919 cv
330.912 321.669 329.758 311.397 329.146 307.227 cv
cp
.0980392 .0941176 .0941176 rgb
f
315.056 268.439 mo
314.093 269.711 311.349 299.165 315.887 301.433 cv
320.425 303.702 348.848 299.677 348.837 298.694 cv
348.812 296.347 347.208 291.736 346.229 291.688 cv
344.419 291.604 323.573 293.054 323.573 293.054 cv
322.733 291.143 326.103 273.934 324.626 271.032 cv
323.15 268.128 319.016 263.196 315.056 268.439 cv
cp
.117647 .117647 .117647 rgb
f
324.015 287.098 mo
324.079 287.158 324.15 287.207 324.195 287.291 cv
324.324 287.541 324.183 287.672 323.894 287.736 cv
323.607 289.27 323.403 290.809 323.479 292.34 cv
323.491 292.54 323.504 292.678 323.517 292.792 cv
324.387 292.877 325.273 294.26 325.976 294.214 cv
326.247 294.194 326.511 294.203 326.781 294.196 cv
327.638 292.753 329.066 289.197 329.066 289.197 cv
328.217 288.814 326.338 285.897 324.33 285.597 cv
324.223 286.097 324.116 286.598 324.015 287.098 cv
cp
1 .694118 .560784 rgb
f
326.902 314.833 mo
327.226 314.786 330.642 314.702 331.394 312.508 cv
332.148 310.312 331.648 308.505 332.043 308.484 cv
332.443 308.459 344.228 306.84 344.255 307.316 cv
344.284 307.793 344.444 310.507 346.655 311.578 cv
348.871 312.65 350.95 312.629 350.789 312.877 cv
350.628 313.125 352.457 321.123 352.419 321.205 cv
352.38 321.288 342.818 323.231 339.578 323.732 cv
336.337 324.236 327.437 324.291 327.416 323.894 cv
327.392 323.497 325.805 314.99 326.902 314.833 cv
cp
.117647 .117647 .117647 rgb
f
334.689 301.212 mo
332.82 300.326 329.816 299.835 327.552 299.65 cv
323.654 299.332 321.193 298.85 319.354 297.341 cv
317.516 295.831 319.036 288.345 319.354 282.456 cv
319.584 278.235 320.054 270.93 320.864 266.737 cv
319.133 265.743 317.072 265.771 315.056 268.439 cv
314.093 269.711 311.349 299.165 315.887 301.433 cv
318.217 302.598 326.846 302.104 334.689 301.212 cv
cp
.0980392 .0980392 .0980392 rgb
f
322.346 295.993 mo
322.346 295.993 320.708 297.659 320.708 299.332 cv
320.708 301.001 321.313 303.47 321.526 303.47 cv
321.744 303.47 321.344 299.752 321.822 298.283 cv
322.299 296.813 322.346 295.993 322.346 295.993 cv
cp
.168627 .168627 .168627 rgb
f
317.518 301.162 mo
316.648 300.448 317.285 297.819 318.957 296.388 cv
320.627 294.955 321.903 295.509 321.903 295.509 cv
321.903 295.509 323.176 296.485 321.903 296.875 cv
320.627 297.261 319.513 297.168 318.797 298.283 cv
318.081 299.398 317.518 301.162 317.518 301.162 cv
cp
f
340.111 347.887 mo
340.111 348.483 340.708 349.207 339.213 350.945 cv
338.559 351.708 335.812 351.587 335.812 351.587 cv
335.812 351.587 338.378 350.939 338.976 349.742 cv
339.573 348.543 340.111 347.887 340.111 347.887 cv
cp
.219608 .211765 .211765 rgb
f
334.975 347.528 mo
334.975 347.528 336.17 348.302 337.662 347.887 cv
339.156 347.469 340.111 347.169 340.111 347.169 cv
340.111 347.169 339.156 349.319 337.543 349.2 cv
335.933 349.081 334.975 347.528 334.975 347.528 cv
cp
f
354.438 352.185 mo
354.438 352.185 354.019 354.036 352.885 354.275 cv
351.751 354.513 349.826 354.75 349.826 354.75 cv
349.826 354.75 351.94 355.533 352.885 355.349 cv
354.737 354.991 354.438 352.185 354.438 352.185 cv
cp
.156863 .152941 .152941 rgb
f
342.975 384.065 mo
342.975 384.065 345.475 383.246 346.677 383.246 cv
347.99 383.246 350.378 384.662 350.378 384.662 cv
350.378 384.662 348.168 382.512 347.094 381.916 cv
346.019 381.319 342.975 384.065 342.975 384.065 cv
cp
f
358.758 369.02 mo
358.758 369.02 361.184 370.831 361.184 372.304 cv
361.184 375.407 358.758 377.02 358.758 377.02 cv
358.758 377.02 360.449 374.571 360.021 373.018 cv
359.594 371.466 358.758 369.02 358.758 369.02 cv
cp
f
357.066 366.751 mo
356.826 367.348 356.588 368.901 357.482 370.034 cv
358.378 371.169 359.313 372.602 359.313 372.602 cv
359.313 372.602 357.715 371.886 356.734 370.811 cv
355.751 369.737 357.066 366.751 357.066 366.751 cv
cp
.219608 .211765 .211765 rgb
f
324.544 256.972 mo
324.544 256.972 323.813 254.702 327.048 252.029 cv
330.285 249.356 343.423 248.982 348.993 255.058 cv
354.56 261.135 355.356 261.399 354.667 262.843 cv
353.98 264.29 342.914 268.919 341.649 271.645 cv
340.384 274.374 336.11 278.598 335.887 278.561 cv
335.665 278.522 334.03 272.325 332.416 268.929 cv
330.803 265.531 324.544 256.972 324.544 256.972 cv
cp
.0862745 .0823529 .0823529 rgb
f
330.771 250.26 mo
330.256 252.141 330.884 259.09 332.385 262.318 cv
333.883 265.545 336.576 267.905 338.344 268.398 cv
340.113 268.889 343.342 267.337 345.984 263.964 cv
348.624 260.586 351.489 253.93 351.489 253.93 cv
330.771 250.26 li
cp
1 .694118 .560784 rgb
f
323.357 256.667 mo
323.357 256.667 324.084 255.716 324.621 256.068 cv
328.373 258.564 335.682 268.571 336.175 273.323 cv
336.814 279.465 335.381 282.719 335.381 282.719 cv
335.381 282.719 334.084 274.688 331.002 268.653 cv
328.543 263.842 323.357 256.667 323.357 256.667 cv
cp
.207843 .207843 .207843 rgb
f
355.533 263.307 mo
355.533 263.307 355.07 261.709 354.564 261.868 cv
350.352 263.19 339.774 269.418 337.539 273.625 cv
334.643 279.078 335.381 282.719 335.381 282.719 cv
335.381 282.719 338.853 275.897 343.974 271.461 cv
348.058 267.925 355.533 263.307 355.533 263.307 cv
cp
f
335.381 282.719 mo
335.644 279.378 335.168 273.408 331.974 268.183 cv
330.038 265.013 328.205 262.879 326.646 261.44 cv
328.163 263.725 329.871 266.438 331.002 268.653 cv
333.493 273.528 334.964 280.526 335.381 282.719 cv
cp
.486275 .486275 .486275 rgb
f
331.19 258.143 mo
332.297 257.985 335.298 257.815 336.617 257.703 cv
338.921 257.508 338.882 256.119 339.925 256.281 cv
340.968 256.444 340.929 258.117 341.806 258.659 cv
342.5 259.089 345.733 259.634 348.13 260.667 cv
349.972 257.448 351.489 253.93 351.489 253.93 cv
330.771 250.26 li
330.43 251.509 330.602 254.993 331.19 258.143 cv
cp
.858824 .509804 .415686 rgb
f
323.357 256.667 mo
323.124 256.553 330.758 242.036 337.699 238.959 cv
341.674 237.2 348.177 238.531 350.835 241.84 cv
354.316 246.171 355.841 262.853 355.533 263.307 cv
355.223 263.76 350.858 258.131 340.094 255.747 cv
329.12 253.314 324.093 257.033 323.357 256.667 cv
cp
.207843 .207843 .207843 rgb
f
344.097 239.884 mo
340.275 239.138 334.531 250.961 332.934 254.915 cv
334.964 254.913 337.343 255.137 340.094 255.747 cv
342.991 256.39 345.419 257.265 347.435 258.198 cv
347.624 253.691 349.227 240.885 344.097 239.884 cv
cp
.266667 .266667 .266667 rgb
f
337.627 260.356 mo
337.627 260.356 339.175 259.667 339.515 259.888 cv
339.857 260.109 341.32 260.951 341.054 261.186 cv
340.791 261.423 337.687 261.065 337.627 260.356 cv
cp
.858824 .509804 .415686 rgb
f
337.424 263.842 mo
337.917 263.504 338.613 264.573 340.679 264.304 cv
341.714 264.169 342.301 263.698 342.425 263.875 cv
342.545 264.051 341.324 264.787 339.936 264.876 cv
338.409 264.976 337.16 264.027 337.424 263.842 cv
cp
.737255 .380392 .294118 rgb
f
342.573 262.938 mo
342.453 263.131 343.181 263.181 343.172 263.693 cv
343.167 264.021 342.807 264.125 342.923 264.236 cv
343.041 264.345 343.24 264.007 343.396 263.619 cv
343.551 263.232 342.75 262.655 342.573 262.938 cv
cp
.858824 .509804 .415686 rgb
f
343.974 271.461 mo
348.058 267.925 355.533 263.307 355.533 263.307 cv
355.533 263.307 355.514 263.252 355.493 263.177 cv
353.546 263.873 348.868 265.771 344.352 269.368 cv
340.837 272.167 339.17 275.309 338.11 278.237 cv
339.593 276.073 341.602 273.514 343.974 271.461 cv
cp
.14902 .145098 .145098 rgb
f
358.452 271.361 mo
361.197 272.059 361.939 276.986 360.809 286.668 cv
359.68 296.349 354.834 303.263 352.132 303.846 cv
349.429 304.427 325.861 294.888 326.428 294.143 cv
326.996 293.403 325.493 288.904 327.314 288.61 cv
329.131 288.316 343.96 292.186 345.697 291.744 cv
347.432 291.3 345.212 268.006 358.452 271.361 cv
cp
.2 .2 .2 rgb
f
356.871 271.103 mo
345.433 270.097 347.36 291.319 345.697 291.744 cv
343.96 292.186 329.131 288.316 327.314 288.61 cv
326.381 288.76 326.612 291.413 326.597 292.211 cv
328.875 292.723 332.389 293.496 335.206 294.062 cv
339.762 294.971 349.472 297.355 351.223 294.457 cv
352.61 292.163 350.773 281.644 356.871 271.103 cv
cp
.168627 .168627 .168627 rgb
f
351.6 286.698 mo
351.98 286.029 350.031 285.837 347.989 286.065 cv
347.758 286.106 347.53 286.164 347.299 286.258 cv
347.319 286.22 347.357 286.181 347.357 286.164 cv
347.777 284.997 350.127 286.047 350.72 284.596 cv
351.005 283.888 349.04 283.966 347.052 284.48 cv
345.329 284.928 341.928 289.444 340.53 290.964 cv
340.871 290.985 341.216 291.016 341.589 291.1 cv
341.741 291.135 341.867 291.21 342.008 291.266 cv
343.167 291.422 344.329 291.56 345.475 291.78 cv
345.852 291.554 346.119 291.376 346.173 291.3 cv
346.899 290.308 348.868 291.99 349.841 290.767 cv
350.224 290.29 349.04 289.868 347.491 289.695 cv
347.817 289.431 348.026 289.217 348.066 289.142 cv
348.637 288.035 350.833 289.411 351.6 288.053 cv
351.829 287.635 351.179 287.403 350.165 287.346 cv
350.739 287.346 351.292 287.25 351.6 286.698 cv
cp
1 .694118 .560784 rgb
f
313.664 179.922 mo
313.664 179.922 325.104 173.22 348.416 179.922 cv
371.727 186.624 391.507 179.922 391.507 179.922 cv
391.507 236.609 li
391.507 236.609 370.209 241.95 348.416 234.776 cv
331.747 229.289 313.664 232.935 313.664 232.935 cv
313.664 179.922 li
cp
0 0 0 rgb
f
345.164 202.203 mo
345.428 200.411 345.798 199.487 346.243 198.357 cv
346.688 197.228 344.215 196.333 345.196 193.458 cv
346.176 190.582 347.896 187.885 356.276 187.769 cv
365.805 187.636 366.28 193.866 365.65 196.694 cv
365.258 198.452 364.192 198.773 364.183 200.074 cv
364.173 201.375 365.551 200.952 365.096 203.407 cv
364.791 205.053 363.98 205.481 359.824 205.24 cv
353.892 204.895 344.521 206.553 345.164 202.203 cv
cp
1 1 1 rgb
f
363.205 202.377 mo
363.146 203.569 362.539 208.082 361.081 210.063 cv
360.319 211.097 357.113 214.25 354.19 213.694 cv
352.544 213.382 348.68 210.288 348.299 208.8 cv
347.68 206.372 347.261 200.75 348.133 201.095 cv
349.003 201.441 348.975 207.451 349.926 209.041 cv
350.876 210.629 357.341 209.993 358.393 210.026 cv
360.933 210.107 360.903 202.53 361.424 202.94 cv
361.945 203.348 363.205 202.377 363.205 202.377 cv
cp
f
348.918 196.877 mo
347.195 198.22 347.491 200.296 348.891 200.774 cv
350.291 201.251 352.705 201.44 353.028 199.875 cv
353.35 198.312 350.739 195.459 348.918 196.877 cv
cp
0 0 0 rgb
f
361.329 196.171 mo
363.229 197.246 364.333 199.136 361.558 201.189 cv
360.369 202.068 356.923 201.214 356.539 199.663 cv
355.76 196.525 358.146 194.374 361.329 196.171 cv
cp
f
354.619 200.899 mo
354.619 200.899 353.157 203.364 353.89 203.601 cv
354.624 203.84 354.812 202.497 354.812 202.497 cv
354.812 202.497 354.742 203.701 355.734 203.767 cv
356.727 203.833 355.547 200.575 354.619 200.899 cv
cp
f
349.523 204.208 mo
349.955 204.934 349.248 207.089 350.38 207.11 cv
351.511 207.129 352.308 205.655 351.445 204.292 cv
350.581 202.93 349.523 204.208 349.523 204.208 cv
cp
1 1 1 rgb
f
352.332 204.415 mo
352.763 205.14 352.056 207.307 353.189 207.315 cv
354.606 207.326 355.118 205.861 354.253 204.499 cv
353.388 203.135 352.332 204.415 352.332 204.415 cv
cp
f
355.358 204.435 mo
355.79 205.162 355.083 207.315 356.214 207.336 cv
357.347 207.357 358.143 205.881 357.279 204.52 cv
356.415 203.157 355.358 204.435 355.358 204.435 cv
cp
f
358.077 204.334 mo
358.508 205.061 357.801 207.214 358.934 207.234 cv
360.066 207.255 360.862 205.78 359.999 204.417 cv
359.134 203.055 358.077 204.334 358.077 204.334 cv
cp
f
358.391 210.843 mo
358.097 210.348 358.58 208.879 357.807 208.865 cv
357.035 208.851 356.492 209.857 357.081 210.787 cv
357.67 211.715 358.391 210.843 358.391 210.843 cv
cp
f
356.221 210.829 mo
355.927 210.333 356.41 208.863 355.637 208.85 cv
354.865 208.836 354.322 209.841 354.912 210.771 cv
355.5 211.701 356.221 210.829 356.221 210.829 cv
cp
f
354.209 210.814 mo
353.916 210.32 354.397 208.85 353.625 208.836 cv
352.852 208.823 352.309 209.829 352.899 210.757 cv
353.488 211.687 354.209 210.814 354.209 210.814 cv
cp
f
352.198 210.801 mo
351.903 210.305 352.384 208.836 351.612 208.823 cv
350.84 208.808 350.297 209.814 350.886 210.744 cv
351.476 211.671 352.198 210.801 352.198 210.801 cv
cp
f
344.997 190.042 mo
366.574 203.841 li
366.59 201.619 li
345.879 188.327 li
344.997 190.042 li
cp
0 0 0 rgb
f
341.572 216.819 mo
341.572 216.819 361.542 227.08 362.449 227.543 cv
363.354 228.009 362.017 232.25 364.975 231.263 cv
367.997 230.255 365.37 227.853 365.845 227.798 cv
366.32 227.744 368.625 228.185 369.117 226.65 cv
369.608 225.114 366.609 224.467 363.84 224.833 cv
361.073 225.199 342.966 214.108 342.966 214.108 cv
342.966 214.108 344.862 209.256 341.352 209.704 cv
338.269 210.098 341.206 213.883 340.911 214.22 cv
340.559 214.626 336.674 214.631 336.651 216.078 cv
336.609 218.643 338.61 218.579 341.572 216.819 cv
cp
1 1 1 rgb
f
365.879 218.086 mo
365.879 218.086 343.849 222.408 342.849 222.602 cv
341.85 222.799 339.077 220.217 338.232 221.484 cv
336.596 223.936 340.364 224.17 340.025 224.507 cv
339.686 224.843 337.957 226.05 339.02 227.261 cv
340.807 229.294 341.491 227.596 343.437 225.593 cv
345.381 223.591 366.465 221.076 366.465 221.076 cv
366.465 221.076 368.639 226.05 370.461 223.534 cv
372.285 221.015 367.702 220.252 367.608 219.733 cv
367.522 219.262 371.794 217.859 370.202 215.619 cv
369.016 213.95 367.115 214.868 365.879 218.086 cv
cp
f
8.9165 385.548 mo
8.9165 385.548 13.748 368.793 22.6216 364.5 cv
47.585 352.428 83.4609 356.085 103.384 363.685 cv
117.541 369.084 119.863 387.18 119.863 387.18 cv
119.863 387.18 93.4448 395.493 63.2305 394.15 cv
33.0161 392.806 7.99805 387.37 8.9165 385.548 cv
cp
.0862745 .0823529 .0823529 rgb
f
44.811 361.809 mo
44.811 361.809 46.4424 367.519 49.7876 375.676 cv
53.1318 383.834 63.2305 394.15 63.2305 394.15 cv
63.2305 394.15 55.6611 369.967 51.9082 366.948 cv
48.1553 363.929 44.811 361.809 44.811 361.809 cv
cp
.137255 .137255 .137255 rgb
f
80.3799 362.053 mo
80.3799 362.053 80.7056 372.006 77.9321 378.207 cv
75.1582 384.406 63.4922 393.543 63.4922 393.543 cv
63.4922 393.543 72.0581 372.578 74.1792 369.233 cv
76.3008 365.887 80.3799 362.053 80.3799 362.053 cv
cp
f
28.1235 342.765 mo
28.1235 342.765 27.8564 342.196 33.0161 335.918 cv
38.1763 329.643 67.2832 322.955 80.1143 332.438 cv
92.9443 341.923 96.9858 341.187 96.2124 344.189 cv
95.438 347.19 72.4351 365.138 71.0405 370.789 cv
69.6455 376.436 63.6665 394.139 63.2305 394.15 cv
62.7935 394.159 56.8145 374.903 52.4912 369.044 cv
48.168 363.187 28.1235 342.765 28.1235 342.765 cv
cp
.0862745 .0823529 .0823529 rgb
f
28.1235 342.765 mo
28.1235 342.765 29.1543 340.684 30.3032 341.161 cv
38.3574 344.509 55.8193 365.77 58.5161 374.617 cv
62.0024 386.053 63.2305 394.15 63.2305 394.15 cv
63.2305 394.15 57.791 379.367 49.7021 369.044 cv
43.2485 360.811 28.1235 342.765 28.1235 342.765 cv
cp
.207843 .207843 .207843 rgb
f
96.9419 344.115 mo
96.9419 344.115 95.4741 341.253 94.5703 341.742 cv
90.1953 344.114 81.9502 351.352 76.5249 360.284 cv
72.6313 366.691 68.2939 372.916 67.1699 376.599 cv
63.6831 388.036 63.2305 394.15 63.2305 394.15 cv
63.2305 394.15 69.9585 378.218 78.0469 367.898 cv
84.5 359.665 96.9419 344.115 96.9419 344.115 cv
cp
f
42.6904 333.99 mo
42.4111 337.755 43.9253 357.413 49.2979 361.727 cv
56.4771 367.493 58.6987 372.424 62.2524 372.432 cv
67.7148 372.442 69.9375 367.111 76.5449 361.646 cv
82.3047 356.882 82.3765 336.205 82.3765 336.205 cv
82.3765 336.205 67.416 331.273 62.2524 331.475 cv
57.2383 331.669 42.6904 333.99 42.6904 333.99 cv
cp
1 1 1 rgb
f
60.1816 339.36 mo
60.3687 338.125 58.6963 334.792 54.9927 334.247 cv
51.2896 333.704 44.437 338.381 44.437 338.815 cv
44.437 339.251 43.8926 340.339 45.7422 339.36 cv
47.5913 338.381 52.5068 335.853 54.6821 336.6 cv
56.8574 337.349 57.4272 340.353 57.9458 340.353 cv
58.4634 340.353 60.0435 340.274 60.1816 339.36 cv
cp
.0862745 .0823529 .0823529 rgb
f
66.3022 339.36 mo
66.1152 338.125 67.7876 334.792 71.4902 334.247 cv
75.1943 333.704 82.0469 338.381 82.0469 338.815 cv
82.0469 339.251 82.5903 340.339 80.7417 339.36 cv
78.8926 338.381 74.2148 336.231 72.0396 336.98 cv
69.8643 337.729 69.3774 340.449 68.8589 340.449 cv
68.3413 340.449 66.4404 340.274 66.3022 339.36 cv
cp
f
28.1235 342.765 mo
27.6392 342.633 39.3813 310.917 51.4312 302.502 cv
58.335 297.681 71.1802 297.806 77.4556 303.106 cv
85.6768 310.048 97.3604 343.138 96.9419 344.115 cv
96.5234 345.09 83.5322 334.057 62.1987 333.51 cv
40.4424 332.952 29.6582 343.183 28.1235 342.765 cv
cp
.207843 .207843 .207843 rgb
f
63.9272 301.885 mo
56.3882 301.885 49.8545 326.479 48.2871 334.583 cv
52.144 333.827 56.7441 333.37 62.1987 333.51 cv
67.9395 333.658 72.8799 334.424 77.0537 335.446 cv
75.7437 326.822 74.0464 301.885 63.9272 301.885 cv
cp
.266667 .266667 .266667 rgb
f
46.7632 349.322 mo
46.7632 349.322 48.7275 358.985 54.9927 358.557 cv
60.2573 358.199 60.4849 355.188 60.9429 355.839 cv
61.4014 356.492 64.729 356.531 63.2305 357.325 cv
62.7012 357.606 62.1953 359.493 60.7529 360.189 cv
58.1099 361.468 54.8555 361.892 52.3003 360.987 cv
46.8618 359.062 45.6104 349.54 46.7632 349.322 cv
cp
0 0 0 rgb
f
80.0815 349.322 mo
80.0815 349.322 78.1182 358.985 71.8525 358.557 cv
66.5889 358.199 66.3613 355.188 65.9023 355.839 cv
65.4434 356.492 62.1167 356.531 63.6152 357.325 cv
64.1445 357.606 64.6509 359.493 66.0933 360.189 cv
68.7358 361.468 71.9897 361.892 74.5444 360.987 cv
79.9834 359.062 81.2358 349.54 80.0815 349.322 cv
cp
f
48.5088 341.913 mo
48.5088 341.913 49.1206 342.205 50.729 341.847 cv
52.3384 341.491 54.1753 341.723 56.085 342.792 cv
57.9956 343.86 57.4448 344.367 57.4448 344.367 cv
57.4448 344.367 55.2788 344.859 53.2671 344.679 cv
51.2554 344.5 47.897 341.807 48.5088 341.913 cv
cp
f
78.6509 342.097 mo
78.6509 342.097 78.04 342.389 76.4307 342.032 cv
74.8223 341.675 72.9854 341.908 71.0747 342.976 cv
69.165 344.044 69.7144 344.549 69.7144 344.549 cv
69.7144 344.549 71.8809 345.043 73.8936 344.864 cv
75.9043 344.685 79.2637 341.99 78.6509 342.097 cv
cp
f
68.0356 352.672 mo
68.0356 352.672 68.3833 354.609 67.0439 354.815 cv
65.7046 355.019 65.3188 355.527 64.5293 356.043 cv
64.2334 356.239 63.9214 356.309 63.647 356.322 cv
62.813 356.322 li
62.5396 356.309 62.2275 356.239 61.9307 356.043 cv
61.1421 355.527 60.7554 355.019 59.416 354.815 cv
58.0767 354.609 58.4248 352.672 58.4248 352.672 cv
57.4712 353.542 57.8579 354.864 59.7305 355.507 cv
61.6045 356.153 61.0332 357.069 62.3628 357.287 cv
62.7446 357.348 63.0195 357.35 63.2305 357.325 cv
63.4404 357.35 63.7158 357.348 64.0972 357.287 cv
65.4268 357.069 64.8564 356.153 66.7295 355.507 cv
68.6025 354.864 68.9897 353.542 68.0356 352.672 cv
cp
f
65.4268 363.2 mo
63.2666 363.2 li
62.3779 363.2 li
60.2178 363.2 li
60.2178 363.2 61.3198 363.958 61.4619 364.936 cv
61.6045 365.916 60.3809 366.487 60.707 368.199 cv
61.0342 369.913 61.5234 372.105 62.8228 372.105 cv
63.8613 372.105 64.6104 369.913 64.9375 368.199 cv
65.2632 366.487 64.04 365.916 64.1821 364.936 cv
64.3247 363.958 65.4268 363.2 65.4268 363.2 cv
cp
.0862745 .0823529 .0823529 rgb
f
49.1909 351.913 mo
49.2524 350.297 50.1294 348.012 52.3047 347.794 cv
54.48 347.578 56.4478 348.467 56.5518 351.122 cv
56.6563 353.778 54.3721 355.3 52.3047 354.973 cv
50.2383 354.648 49.1265 353.6 49.1909 351.913 cv
cp
1 .592157 .592157 rgb
f
77.6445 351.913 mo
77.583 350.297 76.7061 348.012 74.5308 347.794 cv
72.3555 347.578 70.3872 348.467 70.2837 351.122 cv
70.1802 353.778 72.4644 355.3 74.5308 354.973 cv
76.5977 354.648 77.7085 353.6 77.6445 351.913 cv
cp
f
55.749 359.266 mo
56.0752 359.482 60.2695 360.897 63.2305 361.006 cv
66.1914 361.113 71.8525 360.136 71.8525 360.136 cv
71.8525 360.136 66.5596 362.202 62.7856 362.202 cv
59.0127 362.202 55.749 359.266 55.749 359.266 cv
cp
0 0 0 rgb
f
36.6533 365.316 mo
36.9795 365.806 41.0581 367.274 44.4854 375.759 cv
47.9111 384.243 44.3218 390.769 44.3218 390.769 cv
44.3218 390.769 42.2007 378.533 40.8955 375.105 cv
39.5903 371.679 36.6533 365.316 36.6533 365.316 cv
cp
f
95.8794 366.295 mo
94.4106 369.396 92.2896 371.843 91.1479 380 cv
90.0054 388.159 90.3315 391.096 90.3315 391.096 cv
90.3315 391.096 93.1055 383.263 95.0635 378.695 cv
97.021 374.126 95.8794 366.295 95.8794 366.295 cv
cp
f
91.9639 391.666 mo
91.9639 391.666 95.7974 380.572 97.1025 377.471 cv
98.4077 374.373 101.427 370.947 101.427 370.947 cv
101.427 370.947 101.345 375.676 100.529 379.103 cv
99.7129 382.531 97.9185 385.629 97.9185 385.629 cv
97.9185 385.629 101.263 383.917 101.917 381.143 cv
102.568 378.37 103.221 375.596 103.221 375.596 cv
103.221 375.596 104.604 380.692 103.221 383.753 cv
100.938 388.811 91.9639 391.666 91.9639 391.666 cv
cp
f
62.1987 333.51 mo
77.5347 333.904 88.5596 339.715 93.7021 342.591 cv
90.0923 339.752 84.6265 336.398 77.3608 334.561 cv
63.1665 330.972 52.6421 331.788 42.6904 335.132 cv
37.0005 337.045 33.1685 339.434 31.4165 341.201 cv
36.27 338.452 46.3018 333.102 62.1987 333.51 cv
cp
.486275 .486275 .486275 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (AKSANA) ()
%%Title: (1701.i216.hacker.P.m008.c15.hacker character set.eps)
%%CreationDate: 1/26/2017 12:50 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3Q=sde<S6>hAr[3J0Wgj8dh%!GlRg0OWqF2AX^@1.kU:Y0Vmd\%d&eogkj2L,E:kUM$4T1UMJ>]=KLoFj7UHR9I4+/61"P
%[D1<+L7Lk=oH4"#1orq@F77uWdQu7Hl]cF,haC6jV0TMA^k8]JNKia2#%#L'$LLG^D='8sKqR,Cf#kBiF"NOQRBIrDjj31XI,[Li
%0%^(pABO_b-,#N!Ytqf$j^>^OW8q.h-`(gXH,;5LD:2WF!1paW4kZf2dp^U<dE6-=FME%h//+S;>5=ee:C"^]WS)%I>GYNro.mnS
%G8qLs0W=0r#9%D1U!l5!oOB']SE8MeQHYc\p7fUYEWSV0,kgM:C%>I<9r.AFRefPRd_/CCpeOf.s*)'a52k0cQjHFJg#(+a%RW9:
%>/IT0B1'A*%nqM>-!hj?n0k6bbP>0]k=5c5j5p;trXj=N1Z49bh(r!DP=XDrST5-5:H54C#OT,0]A(#Gd_UuBnCLk'H&sZ`%<\?.
%7dI;N?TL0i`gSd8I*aJNNORG9Mg!D)2IFbh<NR+&$.A8-gZ:PiD?Nf8YNg+lDk%%a_U2PtNMBTKGZsmslZQhus"aZ7H"rMUH;Hc)
%^#OenI3[]R.E?GpKMK.Pl^"14CbIn)O1&,6,6o*HMa9$b34Q$g%nF$'34[WhSX6?l8WQX"0m&,PcPiWh(L(16>Q2OeUqFd`Ie^*M
%1i5OZ'i`(fd>a@VWsIQtWE4kBHE15neg`Y;-N;4#``J!6b-c<`C\JA=NJ;,u'hI,!o"%:DPc>SqO8lkYhn50OEgqN*eu6"B44U[k
%+9,J9(Mfp7ia#AoeJ`P@`PgWt2u7#EZ,AJe3,7L^1^<p7l''8VlH<ZA,WH`/6@PbTq+pkE1]20]pPE:7GB=(Oeue4uTNnNf#4AkZ
%X2W"s^/9qIpjP51br6:56YGcAdLZ1#:KuBj^"X<<=Mg^lD%aV%IJThNU-n">0iKr6m8e29^&RdD]lmN((ML-JjYHd#<*([a]cIq-
%V:/PY]Us+J&CV,h`F`bFnn6i$87S/5%t@VTCZSI#dMXamdWpk`\lR1VmT!hdNHXn;EE'!(]DF#te5'@TBscrlWL9R2H.W8lj7EhQ
%bnEjC2tHX";IS5Q6[nJt1ud=n=B+3a+#[Wt:S#T3hjC9d66t87QAC<Vi!ri^3W(Db.U3OO3c3psV-j]`icrdA<FQ/h_fi!oFO.!g
%WC$b]*+%^lBL^>88C-_6p'Jj/W#SAUa%@1SP91=m4X6iRK'r-,o:/pX^YZ`ZI8,S"5NbWBaSC5DkEqmm'2*gVb#S9m8Xi-'NE@<C
%XB"PQDD^q_I0pdeEj63U\VH;lZpQsho-=7`q?bg=a!L-0EoPIi%9Yj_mIDK/DQ>sNO6BKd=/6(uQISYZ#X;gLn8iUmkZSrKr[JXe
%(GPnerMCO$MkG0@d>@s!fPsgIUj#S^jn_FF6luq=W>G^[FIEmt2-+T>2XksYcBrg\JJ/-qT&-O<5aaO%fP3??af)6UK(6GtDiNS=
%cJT?:W*29!Pt64]#H,]B?oH%cm%3&IA,e"&*Y6n;^):`GK(!P;ei:O>YQ(DK1WDd_D--E<Xo+5^-Pl)3.@<A,j2#I5c#u+-HjDgR
%A2^46XC&BtnOt\t)TOZYCVG,X-ZUW^mDf61Ws=VHWTGoFV;$,j=E[e^2[[AWZ+a[<mSWKJ8FGcM;ba5PMIZ:q@8*1tfFVi(Bbl>+
%Ia]cK=W+u)8%IP/Z+_pRV?2F).5u+Zbap7r/PN_T%9)\rOXG:\r45pD/r[?/0]lhh=_?0LMnsKN[bS`c>M*s(>AdlmrK#]R8Ri73
%\TgA5]00fOP<B]iQs$`X1;T$EI!Cc,f)E8F!8T3[4!H-,aINDn)+.nO[YhWR7u<F4@i7;SmZW7g[+l]KWFf7JI[4n2S#(Ki1E*jh
%esg0B>;;/Z/P].)`do:n`%=_\jMiF*WTRTqZa48j\q1i4R+D!K[[Er^13=:Bo+h%$`EsFVm?SeRo<TFW2lQRI$Kkl/68[GVZ[<oU
%/EGgleC/i^&q1,qUq#m$8(#R7nq5%d'JU/ZJ8U_FNGP`NCuq^;TGi2h@dn+%!SmO`?E4:^!jMREN#E[->LR%tdBn6MF=e7F;sp\W
%)Y(W<D[\?!4)l9N^K.ACG2p+W<e'!^%Mbu2._T7;Q(GMo$,i.*;m-j>dq*TkR)!g9bcKJ[f8FZC)[D1mW*PiH%Ki7KKj$3!gZ9hC
%HXP3u)hq3bS/rNKWE/jKj7'%k$*pOXUXZlR"KaWajdD9jo+imlL8:GffiTl7pbr(;3<%@g:Rc16Ni2V4oJXenI2+Ta"75)BC-1ql
%D*H;+\#s2&j`=qWZ[9%I3fB8$1?FNP?!elQN.PXKP'jRC=uk%;K)`gre1L**beq+'4Vd#>F!G$C[H$UEfPseZ?7_dZh-A[%o9*i(
%",<5#ai6?%)pX*6D>IkH;85Am^DI<r'Ug0Q2E(5EC`\tqDn:NXXfs@Df=tkLbsO,J4HOcGGg#I#pB5AJr%8&Ci@NVA]GM^uZ_j;E
%kPTLQ%!?eaDth;n]Ul[grMOY:Q^JFJ0n>Z,_)(*T$:a+p7CcXXlNn6=QS8q*-Pg8eIr`MB%()HDDA<8@W=O+k`/&;C0CmY.:d,<1
%r-=8]_9RU5-3[a;7c<n7n.!)e@;1oU2='@O+i*8C?KLK/.<6n`)D4LXD'gg)m^J;k"-7cSj*6+M0oeR=G+<<-3;'"(L/2Z0ACM'T
%;4JnmP:q)b`?_=M^Vr6lBr?tNQUthqhFA";_!FmG$t/52bg'A8A>D$\0Njp)SathOZk9Nc2]eE8YunjJg1!=sm5c\pWjQR]O:$\b
%V0td7]*G9*kD?0eUK"Y"#;nK%`TgI<8V*$Xs-<U%!utcpXaD??CQtES!i]G)#5K+&!"/OB!M9UV!E6Jn'MIPo7]d;YcZ-Ec_%B%P
%[;'\t^Y/g!Ld<]539@WFf;-3<TuBHgF?')3?N576h:mFRQ:8MkWl1&QX1rERF&85Ukq+YfVSYSKbYoi\*+3BtIBgj]R3qrM/BjQ+
%>+bC[PWA_V@%<Zs1RF"tR&=2R35EaqkaCsGPSgF^N9$_WL"(rJ):P49;OF@ePW6H0E`!U_.0#%/=lc;NRB87l!G+H9;.=O`W>Du6
%P`$.ZQs%h8B0@%Welb[.Fj+VR8n"<3;;qR3.o_"^;4:Y3WJPb`fAIR24NlD1SeiopCN0un=.E`C%cXt#@Zi7/X87P7SWb&FKK6SO
%&()rNY;dT<7AZW5(G,G8Ks<#J=Kbe;B#3*%_q1C^?]2/m$bj(-CC@j7'7=Yt5qNIeD8+N-!/J/DC(%3<^Wk:Eb1^)LCC@;Ri+i;@
%>V-j+3gi6\HePnR`YSJe89Uj3J."-D4rLm=15`=?$SknI;%Lt)>/H;^^aDAh`6.%soUV4)7a,;UoQO-g0B[hVh!f0rM#apX[SVoW
%C'9gUa<Dt;<kP8./I#jalKAasp7ui]K7#0cX#rYCn"`3Qe>6<tV-2<E\IjplF]>4U&(5:EV29hG1JeKkSC2MSPu&fK;@.d-ck<oa
%s4%bSmlEV\s/sf]M;NA+A9&I,FXk+!Rqaceht6d^%,K%dkJmAFprk#R`rkLS0o^ZL(<)f_>[l^EZu`QhLQ883P'jB0Y;OFDh.r)2
%;npE"-HQP!+`oN^"_)_o/k;bb6k9Bj->&I]J70.^4YZ*K%E#-S=:Yhk"P*Mh0Z7C#QP8F[q*q?+;$gEG=RSpTa6PJ=)3L)e/XVrh
%Oh[mji`lc2=U[]'o5&%d)/+$=D\<#?^%h%*QfMAhJ#AS!0&jX(q![::>/Yn,n_\g:V"sp@aWg^G,Oo-l*YAE2[.TfTj<E_JV&kgL
%p\udR^5JBI,3F5h;&U7Y%V(ekn*)ta,l8IDbI,+)K2sUq?aQb!Z@Kf]0qdi^@:C-O%/m)GG1LO8fijY?ctXQO0_!*#["]F!]\POl
%'/;+?p3*'KhDahb<oM.?$)Q8cc2.sTKnjL'+e'HN$P1q-6h[^91nPhp3Vcor/-UIqh.0uuXIhG'TXmm%@^&V5X)qZPs&#e]K@Y>n
%.'D/?q<H&2p;2;;#pStM\23aV/QLN,;;Y:<_8WYAUp/4&!DZIg^LI&c,(1j*VTG+UU>5u3R:pJ1:(3+f`R\W6m>2_*ZY*k.I$e[3
%6aIgJ8=shu[[R@4MJ1#F3X,=:4F2X`9JotPeSb=k-U[B,!-V^P3*mA\Q\FJ]RSYRU0+5hD^CJ]/nZm,H9\T$2gaqH0;-k+5^FU?X
%;f%";*&#o`]M+?8bYOhVe2WO"Q,,9**i-=s1iY+F`72D$k3XM_Dg*'nOu(@+Z&(G/%]6ql7%>G+Mdd@K!Q1Ya`'e1ZDu'=MP\1D"
%^O.T!>5S-D8:UM'3)6_dR<IQ!W5LM5_JrG0Bo7USHj2_+Eq,TanBAtn70TRaWk`_9F'VaP>#\jt'UknC:(ArJ`S+[WO4=*2'IfKS
%>PU!gCFsGc:Q7t#o@MZ*Hml9[MX0oq?MlrHe;=>qN3B@(Vs,OhWTRTqZa48j!];fd@SE(MCG`fH0`E`Z!<;,%kL198[Zd-2O(Bsq
%[(3NiP.H'[4GLl'3@:\F_uh3DdP4%Y6asE>5l=V3`_$S;r?_`-)$cOe+C7B<VrOSgl2!+M`Kh<hN#Au*S:r%pL2<<HpLAGhi5^WU
%_nqHh[?g6^dJUkBZ1)6sgW;#E(^iRJN;,,8TsaHrEiTuLff[o"B8q;4PqTnTQ/\SobBm_XVDJ-<5UtQ.2U@%k0c[VoXhlJ.<KFtQ
%IRg5TXBW_.]dEuRQASNEjtts([N!'WG#0d/0bF3X:C=Ni212FkarXF9O'!bFm6!+dMW(b.R4:jLJ6>irmKga"TqOoKTgbZK7<P1P
%6(4e<4L*CsZUV&0L\#Mpa[$R"HUk2A*0n2q3@O$c=Ag,mogW^C:!WQUS[(PrbOKZ'DOe/Y[+DYK'V)f#-aD1dBfEYRA'pK3\n\Em
%a_Ti`N?NT9c$[*(*"\u1fh7g4A?T+NbYk`J=%&[>W_fo*.*PgZTf#RsS$d4PS9s8'q/sZs83ND%:HZ^6rj$\_[bPuXEq-AM@EhN$
%=r,]E_O=\2Eslc$En4J(ST/)_c%@l4LZr5gDU6;#)_n,M>R\[hk1mhD>F9I>F)GF3rD/o(8UV'W\p-J6]1HY]P=ZPuQru3/Nbc&^
%Gp=D$i%=<+H*HJom/mbOCk>)AL<3f5Lj=Q#7Qpo5o5u>poe@8*-"aBa_utX\+6I]%"YqFbN%U=*.\@nk4"]V'Qg4rlWn$]p;X<LL
%/FR5Xos5XY9<J%b$L_GQEHu0[-mh'_6:T]p]U>Ri\as^Y`N4>!UGME,S@R2\RU",n4(#X;m_>)9=E@Tca&3%dH;=mqrjmo.]tLL2
%#bJ\d.7SmSIpl7E`AfaJZ-@*eb$SS<A)$[k0e)<qjNBC7NO+!ULl7M2h%p:^07a`41TiMYQf<L^G0UJdk[k7WbQ#%NBuc)rFa?gJ
%@%A.rKn;)Y(":tZkrU>U=9M?k-I;-YT5l6D2S8LrJ?-G++j:(4Q&)&(D/S5'SqUc1eXF=^5%H`2g-H-Y3s>I"g@jGT'8%rmO:54&
%oln)M%B]kBpQ^G1ZquX/UJeJGM/I\aLPgh!=t,n%(]H;,(I."R_f*atT)R3,[CZdPmHfiVpb#(%?AT^-3_ck;H9&!$%h/<q@#/k6
%UN.#o@'HLIL,cj2Ee:ABh^Glb.RC-H(sJ4tS@?Gmp^ZTRQ]L6+CHl/EBgOG*itMleBbueLR.<R':'WC'K]CQ<i2N'$f<g2IZ>oSL
%j",M<(EXTd<i,!RnA<j=O5IO+RDanAXPksB?PT4!MF@&@@!40;oes7'cOB,U1L?HIP,I8Je2<U"*j-kIp!9k?:<Rlqq(WA%KcOfW
%ZDLrA4eoKU=/;Y:0UL_`4Kko^[HV9:o;*JPCPe,0Ij8io1c4e]16V6*,U40opR_42)8FM@1_F^#rh]LrPGJ0q/i#/*\TQM#eE2p;
%AfsWr:]c/.R`fH]Z^jL']sF,Q$I[s^qfjI\l0(FP\4nqu<&F1RofU>>i7e(7TWqd;9[NeoD(",]T>inIRIEriM&<sT#5DJ/pL@"f
%$$2<tG-u9CPAFd$O=]K?[)BVPfs:jN9cD:Kq.F<-M'e"^M1[=p7u_o(Go#R9$<)cPF6ED0SshS1>3E<^JBW],6_KmL-G=AH$p,J)
%GtXLI$Oc-iip.f-o(Sq^rh^E8o-6g#dQ>$`Z;iK"5).!m2O[BIf;e^)$J-+eWqK,*?E-JEq;X]Cli6`#?[bX,>)+M+h'>C6=fqX&
%jhH<t9:omkH(qdo"Oh-i59nWcWDYASSPE?t&,ut-Dt)*M4B`6Y5:P424Iaj@PiJ3uiR!5E3Mu2kKBm<UK*U4S%GSmTU"bUR&%:RI
%hPW)%R*tU*-iSEX:Z&,<YCs&)?6qd`ee5qdkf3dq*R.ib"`jGpp,BS14uOejlM*Nsc^08b.hLY4:B?HY)jY8Jm@NV\=L+_!Sk2sb
%b',GX<D-WoF?fpb>7L:>dcLRfp]&3epAXR%J+a8f2K.iIX&c3lIr,kj*!+;#0%Fo6fuLI@o^<%]pZ5mje'np*RI75"@)!`im1O4u
%BJ[0kdcDQ[/5ZfTGkeUc=t=*]rthN+^=H.;W(#laKm&/LmTdIpHZ\`;;:klM`h,CLJJo^6A&uukfe7L90]7FrQlDK*'VE$^Ei#;<
%GHu>*g-#1nD`$(d$9@C1+3#4YS^fQDs.&neWflH[B:$cK_IYF0?4X4bm(,4m!1oLVpnZL9<(uRM3-,qD?8FDm!0)0:8Yl.S9t=/e
%\9AR(.n];o`1i2M-TuH;\3<hnq[oGPT^QtF4Q%ctS#ok*$J=6S7FAMT*nh`I.+)IN9`6p6k&>\PdD*Adq'+q_fj@[.h_W'iS)mOV
%Ib;/=Vd.uc&s!NSI/0dPO*BY`_R,Mm@AV&jo#JU)2W'd$nT.=\14:h;gR:8@XB6Rljb7e@UH8qCq'je>h6GnWqlDER,k>C"aTG)h
%-W@'O"kdUl7@M56E7W`YPg7=]%!aR[027F(_;%r$V#3+,l-LnNfM0=G.R>Rl,^&DW(?>Gc@dXqqcQj:O7='$=((tJ]*!F4_&Dat>
%ke02&e`tO(48eGJ\TXDp*sD7[\JaN?p:gtlO1m_A`MO=BYNLh_mMJ99Q$i2/T,O3l>-#DF^0D"Z`RH`P\]&kDV&Cr9<2c'$h-EV@
%,gu'\/THkj[Xq!5^Hqn(koF&*KNjeQXHIF-CUXr>NEWrCFl-*'<mJ1+"=]sZJIhJJ'D6`9BI'%C9"WkQ_!E6p]&Xg4dosI_9QY(+
%GM*`mZk0XJk8Up*:$X8DBtOoq[UC'1aO(V)Xf`\Vms-/AT^UOYNK+CbZ#.r2h,TN=@;Oib)THsgY!I8*cg5`_SW2<Mogc`Af\J0n
%k:$'D5r33P#SKYDhlXgtZ.-pgQHH%)W*Ls&H5.,em7Q@\TX/MdIrgA\H&RbjP73Or4g@`Eg^:''kWF)?&b2IVG)(#:c)[L_dD8Jq
%NlX=[9^f^$f5B+F3QJe.>Fg`j>i9M6HJZr>#DrC_]n>9:\s(Q?d57*2oZhWl>Rk+i(GnDWoP97(?>!^DoNOI$P5c+V,O@Mn5M5hE
%e`B2#oOYJ\ds4b5mhLe:62>f?7I)-'K>pZhaZg:PU7K$1[6hTdPN_6Om;W7J&lT<PE>b)*II+:m86Y#SF6^\*b,&j7BG!]C_7<u[
%S#o0IZD.Xm#Bh<)o@6kj5s-jYm,N<*$\`^_\Mrn<0K?<Vr!:I$0gg=B:(E,iarT2>0ndR6;H_<Y)iSIP+*:s[D^5Y[Hp.<uYR9Ji
%SHopiMnb*6cfm!M@pZ-iFBJDP2!TlE1e1sVSQR>I5X.Cu[JpH/4/JE7DU"Nac[j2os#9O68u2'KCfMd&XERm[*VLG[P>&]0frbE]
%[VLjp5!2;UGjj8OMB\("bn1.7Cgc11X%/Hc0(W*B16C?oNN!+ECnI8`rk;i$bl+sfAD(VH1[NIOU96RH,)2cGTp27/4:!F5C2pF\
%%XZl]4*8n8P2>;5O^>sA9!r,`/?).5egLaA+\7]>oX`W=rB1j\]7d;#,pIMQr?*.^oCZTkd=PH-+1.4Zc/9RD1k;(orTa40`TU(-
%7fKTbZJX$?S9Ma?G>KV'c[lXV))#0P"R.O?M3D7@!C[5E+q5=8>u?jIGf2/S1TSUg?mL#<h`\rP%S(Q<So.&(Sekrdgdac`UNaRH
%1B!`=VsdqV(Pj;k\+U?9Z!6ETDS'H'R/82#a)>'u^C`OSSRQK))R4e<oV`[3X`[c^U/Y^tX>6DW;-8%G+*A%E8)J'ZWB.!kUn=7Q
%05R:'VTtP*,uT6%k%1N@8q:6.l.7'Ben>7i@Ui)5dM8IQ%kuH2I\Ce-*GE<6,$n9G=CS%4e4t4fB=1,qXVeOp4\6g7<XNLA*[7Ud
%%U!DM<DF9?/7*1+T8&Dbm]'X4XLt9G]iZHVTj3SlML':/W"R\Gp)J7Qom0!u]4,)g;Y,X[agY3G&IP00^/:etBB^jpABu=kQ0tM+
%CK/VXKkM]2->ba/4`XB`g8]jIflk&nmTeS[&Qsm%paO7q]"e$96B4ZO7LZ5_3;o8d2+S[)N5.Bb?gZgHK6%b'GAqZ-T&%"fYaW.t
%5&Rn0IKPDAh:R<#_^:7,ZZKN5C1bIc`.+e7B31,84_n],!KD.[5A?^T>*]#Yb1GO_pH/XG/iQ[nY&6J(9;,C_@rK36EYTSXg6!DR
%SEcoY`uWmI;,#LY-.7,9Ph_rqcUbQPe/JAS;]ttLZ)el'IN"aO4EWLkW_QtR>Lu>fj3*OTdDgA-0a?'<TjBAL]RjWbVa@e:,rS]"
%<iOlLE/oI3Ni\bSa4LmPnL=P(kEX4i^o#SGS/L.Oa@!QPKt3[ln-E`5d?egd<GHZ5-tV$u=WR>Odt_Pca,Pg,ob=;%\5%`IXZilu
%Pb8X\qJlHPOo3/&o>3m[br;(m*FKZl@Y@TU';Kb%$J2f5;.27c/tmV<hmdLrXX$C)mRgr1Niln0*M$27WFC,]s-$4N``]Ei-1aL=
%B)AsgmfVcV?B`1lqHAVg,L+_P#s-sDLYb^)KC_2f@orDVmS;>-EsrPP,71"-R*j&;`p5ZGL@[FjfY#:hXrUcT>Ncg/i7=mUqRZPY
%FM,>*mP*MtG<OLBF6YgcqmnX'"&;[>7+_$]Xs5tW!SQe\]:u(qn]#YsJTpdgnFPagNRAD%C\>PE*/AktY<%.#;/F9/ZMRrJUP"XG
%eVkY+\D(/u>.=oBUm!S$RtG%UJ\Lqp[1ba8U>&cpU/6^3;+o/dB:6]`<n>ZHa%70uI?]Rh+akuCoaOhFW=t5m;Y;NpifV/:>,_A3
%asN/@XL0\#g;K_!%O6XHJtU/ALr$6@q@D\I4i=au6*=6rTDNSs3ZYr&k]PI#*%^fKDRVn:*koQ4nc)!E1uaL@f#SZ$cR/55U5IW/
%)5WJ)G2_:L2rlP#0+EYMHKGi!cF#$`fAb"tm@_gN?c>dNgh(u3ek"S\hZ=b,TA)OiC_85o7e%tX"=WKg#t&&_Y(aS5H<if[i=_.h
%q0IHo:L4%A;_hWiD8ZLcDoYcmUTXYu]$_T7p>+"Q>K=SE]2J-"aK^aXLa=>;N?CML+eefW$'N]GYL-&AFV.RdE5C"3jf8]Xk-Aqe
%Ff+)*M0ot$VMhi\6BBoF-iTZ/]P[5To\ZOYf/)pB>!#S/iLQoI'-p]L$SOjO4jTIpM,I@1910>*2*hn"#,i14M,k&f'nSi1SX9.?
%3A9k"7&6F"W*GLI8tsuk>[YB0eJt(Mh8*W62':ch0q(MtXLk-'1XW@3idt3G"9sW`5pI0aV><0[flMfOA!GOs*f4c)U`AF5%taCS
%i3T\TObkjRn_K8/[!]`nqntF:Xu:aGY"+IL-+`*:k[-[4#kD##q]\eO3VI61fKZ.4E9(i=C=QMHU/@tQ8GT;9WRM#dEN%`>]dW+.
%SP^"[K&'Wt#haT21(?jlebVu.DIdP5,!/,7MR4n1ZVj<?&!b'RNl+VtD;#<5X1rD/bP:9lCb=DL2cOTR<,7F)HcPTLTN$-mGMn'H
%T@Q'CN>:d;,'1LM<K#J]o/,.fVtnn]rb'U:b1GCD0(rW]-u[NKON'<5!AqQ[R)UBk(q)5<^%gq^Dd(Ama=)?O6g^reRraiMe,+IX
%>aI/n3"gSALCBSjC2C!,NiVrG3rGO`JX?VC[YN79aaYUO"29*29eRLV`g%Df=(+h\?H/e\B:(+)$B?amQ.'K^<5-M'cr"=aKh%94
%[i!7+.3lJ=7oB$EeW^'$q?c+QM/q64"^9EUXTP5+9GAI=2T%XK;([=<mn#s[*kIB`KoH@fL\G6XjfW3"lDF7#fAg=o&Zplm?iCrJ
%5ido?/?DWDNc>s2.ji<an<A&AB*2ANK'SI4X.u*IE-<'G>OWO`S3CDWh^)hXE]@Q_a9[66jgOgp6sOmV1V[`hYs`X=+PDdk)4In"
%;J=4M&$n>ZSt.*I[`E"rmTE?[mXJEn3.Cd54o^!(KmA/$RFuC=X'D`s=)Ye)^9tQE+C!!dRWk=3caTE+CR]774aCU%?/,>L_5kgM
%]ARRF)6^]"\n0^FZtA`1mX/$H]=Ineol+t^[GK\T^,-nY1n3gC[i/\Y(TkpWo/F:N)cgpF/NnP\aJDcFc3NLc/Uj?!h;%_;2>?.;
%<pn`*N:ep9R]b.`S*?K]f#>cFk>$@cBAG_rHn.E@VJ1'`g5FFRUYU(k1\]^p:Of7&ZDi&CB8uUhqn0IZ\c$epXdQ2jjAt`W\!N[$
%cY+6RYO/M]F1JX'a)7ce=an,/QFU[?0AMV7c]3CdT.B-;h`!Kc4uejZB[P)kQh)jfHFj,>[o;(mPt?;Zm\UMYGH.s)p\A9fVX_DQ
%XVA2Np7%oFKls]8OhPJb?cfrerOT;&IIMDA)mg\NH2$=D`Hn5>^Vj&bAa=1,6Di>A7sVR@])-WPo]8Lr;ni"u6*dcdB03eRGlKi*
%=Pd;4EFI9PcMG0!S*=\H6"T0JX7\u#jj1snf6u.21Xh?#NkTPEVK[bGjBa\#dE]95!r(?sMJK'TUHBR&rp'#OE](q&h>N5Hn6u(J
%Ap.hIcLKJcDkf'WDWd4)kD>\1I9G6J=8]F;SDO(cj$'I!,ESKV&+AFY4up[/Rjtl38`k'H8Lajk=5;?ucZ`^W*p#?KDr4aofYB<R
%Ie^dTE#4s442&=;nK08W[Pu^b`pqVQl(;8;qC86X+,h5Wi:ksJP:'S87dfO:@l;X'j,N`k\(>!^1cm4bnb+_]3">Q']]^p*F*@re
%dc1H%$7p)$De3r:]\UNWT3BN1k?B*XPl%nP4+$Vjqc5o\i,6OpIJ_%A^\@_EH7tc@c^c)B^2JK#]QR'!A?6;3-aKEfS`7\l'7JtJ
%`d496gWk4/509,)3KMb;.eh5tZY'ekg;>:F?2(!olV?XaI]pCXn*N;d\XcqW^6IF[pKC)f.+"ulhQ/hfQiAZ\4`S.4k5%s@G5CDk
%X$$_nhr[CO,!:hYNEb@<LI=FT=d8+%qH1CSDLC8bRa\_Fgb]lZ2SO'Fk6OR!Y-);Mrg3WUlJ:7ZiJ*+2kk"G@g#d\a1srFOZ26)#
%nj7!%fiY5WJ)+ElH^RKA)b2!0jh"kXA0noNij96o@!h-eI5uZ5**dB`m&%5'pe#YtTuP==E2s74h'D9cgaD%J/8*9^[[QW1iU&qb
%rFd2FT>U["o"1L0Da2uKY+GL-NlAaA?=mo?o[0`!$8J"tIP.u(iH!Rs\SJ"uZOcIA&^Qc:):,BcKBUe<hd5.mYA`UjO2f>+B4"NO
%U^J*W<B/aib1U[P8aa9%hNQB[^K]f&F-"&d+(i6pMNplGqQ?,J\p/^k`d#&B)5+^O>'k+&hbUhUdKaD$&*UFIpG:+;mY,,@bIOqa
%cQ-2-m6Xq7f":\&6]Ont]_m.fDJu+2ILgo-20We@*2h]N.l;VMh+o+4I4BU$b/k+TDI'f'Bt>="0=6__j\ie!^%"d'MQlr<#7pFR
%D'@RF@GSM<g>6"Zr;F,UH2;sn68,b%F';sj37,M=]!B'!4<si2\791DG55)5nEZ"6qUJAkh;!7H9i77\mt`(PhTtC-gF)7'p6!o(
%PrjVr;+kK,;-:F`7i!E#7isX\mU`H%q_EXkHdV\sWP)Q:Csd`i)==8,9ZtnC&!)-bHN/ZPnse#brB.u9@%(c\]R'22dWm`uo,BhE
%qtorIH9Ica#*RC!gXP]V!BkkS8JfpfY,:G7&A=e?nMHM9rtpm[GM[Ra=j3l,aI9=o*ebBGdg2a3,aPj.3KuEZ)T0PCi:[(Tl7BMr
%f%geC4#ENooBBuMobXaD%I3W[.K/F.3kCeCs3d7YE$I<u6oI?>o](SUi@&']h9Enq]r*acI'7l6I4*F5`jk[mgb2j2lMp*?\5b[R
%,5o*&$IUX)@-YQsN.ND%YqQUW'Fq*kmJ.F*_.PP*4g)S[O10;-E-:\^E52/QSn?W($+RVciJp=!7d$KBap8W2>4#aBe+s*CQdg\Z
%0m]0"TiM3he!$A+0qQVcre\urpW.ZA<jiN+8q5QR@3hTr'<crsU8Z4UI8ad2%bKP)Yt2dEra(,5?s;ac].XIRSnJ'81@h[uJ7[2s
%VD7tRZPPe[8,u%cIILmQ:A?Mko^6:5Hh0OB7!?A6&X=Ge\k:EBI!>JRWt0"#[iVChf!O@WbmQCZjB^2HEgN99GM\p(94(FP[gJJZ
%mu)"?kSSJYJ$ca"eO<N!g"_.denagF;KM$CjengdmdD_,fbJfrp6^#9oA,$F5C:dApm?F(np;\j;W]5q+&m<.Rtk>hVbh9SRh`V\
%RM@_4em<.RPE"YTm99OnO)?V#,")$/IB0SuoI/b$)TdeLWFnuPF2>brk?X@2'rVpc^UlEs48[L]Mcb1#c%>:`(r1TG]65N9gV<gX
%/UB!OHh?U]cSQCA"c@DIqr=js0/5!o<hOohG_ok>K^)qM;3LuT%-nrBq9*@$K(7!_`cH84Dsps][H[XJ$u<B/Xm-BRGD6@WgS)UZ
%r6O0AN:VR3=?b!Bg&1IroB+om(9>U3MeBU_A?2H%$=j)Lk@H-Po?GO(G7K?42GY>Z])(31=5H)4n%F-@BMW.g38.Z[.%<T4oSMTj
%m*NST9\DH+`3o\@dkqX?QQ#5PSmC1\LsFjn_#7-'Vq'A)qX%5=?WjjEpPujI_M6`gTU=!1oO3#dKjI"DXqqS>mMVL4Du%PG4aIsl
%IU-,eS--dOb<+C85B![OMGHu6'_n1BJ5bA-REJY^A>nje=WKh3KAH#CF(mbNebu1oo@dBQ;V#ed07#0`-aULkok19\MS&iKo><ZE
%>LbXQe%"RB4Me5O]8o.$DIN9.k0<nf^9RU0nldWQrS_)Zc0N8k0Zh3SNk^usRqqaUpTf4YYO0n>j_)iOT[>]@8=k79ht5DT9a<J`
%2]Ia7\(996j/5#W](U7E.h'4pG33F],(o@71X@jX4/;&@Dk"4^cJd6=[(lSqg%jUJqOT15`EM#"h/(kqnU15mnu>-[l^/*ReRFf^
%e\UtQamuPA^hRb)S:7GT*ktjg^NQl&=<_JCIq*S]nEL$Ua7Ej07H<?.KkZ0aF)1)uFR;nFcY2jifPo:5=X:<!AfN+d>sIH$A/n_Y
%aI''Jg0(l6/33'G8:DbZ@dABLDo`dPJB56=DNQU`ak5+8ARCb6bF7kTH4;L2r*d@*Iec8_b#poWq7;qD<rCJZ"da+j3WE(%AY7il
%iKUG"HBJnrJU#q0+5:SIfDC-QWos8?1?I#::4jTg=VmcGABreF^!Bn1?g`?:je(Gar1<_ie.H+**UG!lm+f9ES)Ng$#+]\'55JCH
%eSLV&Ips'uM=B>B-rB@%X868.4I<5=L:J%8IG$\F+cU%R]]X*VX0A>sRC8FZ2oH&a4jaeir8sQpNMg^`kB8>O:Ds&cqc*F:_u93!
%_9pC`kiUa.cYhlC0/fO3N!PfkO)d=SFrs$Q3T)O.X#CND/`/Y$J+mpZjNd]7\MMsF9\I%iRX;<H]Yl9qQOC$DEIRA>0Z1Z=IWkJT
%@`YVdM:I7@f#gAC/1U+-?M0N+Qd'_u>HQ3#]6)9[\")%;2N5M3I?[@tr:]'7[e&b:L)Qg3EnRYnlJ("F>3Wkm=/>/aVRLUgSj+2!
%>YdS2Kr/#Q>l40V<P@6PFC,j8p\MJ&#@EcMg$cBCqL#u`[9EI+':ZB%oV&tsq,sQen,`B6lS+e/>e8B0g%+Dpe=3A]qe+U6flp6h
%&4FK$)Rhnm9)\^=:3uMY6u>mjBdqcpA!@_jprSV=8.hQ0FI^D+hk+iJb.Dgu5un6djj(!`g#:Od[WMDL:&&SmV5mC8C;UU>cN^ng
%="Df!=(dTdo\S<QbK]]R4fXgK[;@I32NiM.*-sF.IP/@[SbZV7D1)grp\VDKs42F67(U1#&*_fehEu*_0?SCD./rhamdb'p:Nn"]
%o&R&c%`8qZ1;.gpG5VNo-VnbqDjh6c_DThhTAS>IVE^\kB/e-IT&4stn"fnPQg*I7dLX*0^,t&jDf=]?Ol[-]^2nXBm5R)_o]hDL
%G%D/OB$4;*aQH"%[!rZ(<mgqn8(i,fIT9Nri]_]!H1V!pqM3@1RD^tlRW.f3+WU<$J+MLL;*-Q.'B_eGQT?NA2qMAc]8UFkoUdAk
%p3&<o68oprrLPnYMTAaf*qgSiKCYdqi60_k])sRp,L?,<\`[=gc.qUKp=@7Sh0X&H,<pS%<;)p9K1PUr2Mnc`O/tUKlV#1gXF$b\
%*BhQ9*AtnZeBTNU;VYu8rqc!<p8s[NNB:KN\[,Ha2$@iGP,%3`#S+Q*cCR0V]4;W02p`CH\8Oh/g:mI`>=gX;bDY/^-hd\j4+'O\
%[tT#JS"4QN\!M8qa"TdY"LiWJ$T>`7OD(h>D8]2:aF(M)m+IBk@oAVaI7s%n)3_/lVjEkl:[3.u6lB`0oMg2Pfgr6UqU'TZf%NaN
%ad6q]1@ua=E%bP_QYkbrW0"U(]j';BfN"A$R9CZ;?OtTQiN$fVLCa:H>5E&L`&+ju0>14m/<Ni,SZf_10hJeph7j\_A:(OfS]rPa
%kkOPQ(6S2c26@`l\).a3IFYb5*u]<?o6L:]fQjk/7F)Q^HM1dRbi-T=j]Hg+io>s<#*Bc!S12(>GM1D@!Ds)a$27jIXQ*\?H+),a
%^`)lG]R%;nA]j-2f028\JnYfoI_'[%D*3X>pM*5hIRogs!Fcsk&F@fm#IWAgDKYDp0iXeugRVpMa;^`5r`8!do9h/#>E/#%n)/K+
%#4h`g_(M5+lXuL[pW:#Hk&aV!+^2]4inmrh5&a2:Kqbi$]X>'>@"n=D9Cf*3:L4Vr^:[*;Dl8=a:"+2r5Mk0DD_FTqo`!5J7h["Y
%q0Vi.QN*3RbfZ.38&*4q_)_VIj/"]X+(2ptIT3nb[\7g!Yh/S?q2n#Qdj]4Hn'AJkhQpf%Jb8$sdYm1uXT#ZV>S#ER<s\)Djlk2i
%^/nFMA.JRF&G39RG1o$[T1:.0Zepg^o$9l6XD.!5m@_kQLhdNBO!8La@a'ckn8`p.rBjK&&%B#,cO&88gIK6QB^Ds7bW>hUi>(=u
%YsD")`iJajl6`(Hq86sn1lS26L%ant[$OJBL8sJ0+W8D"C65\QMacgbgX#=NpM'>Hp>T$@2GC@0Ri?:i0=dE&2f<j!cMaq4:YX1P
%hqD?8r0B0;pW\S-XF;f6e,OYa@ed$r4t,1+4Y/VnI^?T_rc[_k$^7gp:8U46]7rlWq]FXhPBI[Y]>H_`a169G\\59%rj1ZJq>P>k
%bbU$O[l:`'$7S'LWl(]#p7uq:;qW/fpK&DS]!laNN'JohS95@#[10)"ot+Ro?'"2QYuith1\)(N1ZbE]o^)OspJj8D<i53_P:j&R
%S@5oAIVrL8KAutO:W_neOi<(f4`HCq"!K%4p*b2[VuLoh>s1>hG5,=gOC*qR9>sHY7aJU58?`!?VEOirO'(2,G5#'lBufJ5\*d+;
%qu"X^Dn?."jg`@UM4OWl9JWZO2:L:!l[$L3b57HLY]5nS=F*s!=T._EPP/%$0])a@TOFkfkXhOm5<L'bqJD@TPprO'?9Um7p&"o8
%_WY.OS(f2=Jkt_.j4ZGZ\<")4h:pfWCSe-dmk<N1mn%sFdf6B>G43m=`GB_,ru=&op2Xr^[T.:4mEDWmjcWj(H*b?lHbUNs%I!qt
%[N?&]hu1'Mr8=,YXCF%(6%RINearE1Y5-H?r\FNG0j2jrA:8=Y]b>QYH2&4uF1QPj3;9uUiD'O33WlY_:GSk(C(0].p0t@qbjCY$
%a*h]QB"[s2cM#]0N/+ams0u6jCdF*eh<FEb&o:Nolh"l6m]ss+WBW_;G[=oVGN_`rkd1/?/SS-6pA/FQ[dme?Xer-pDs_Im?2AAf
%./qH(\94Zk(DmX2nn!5^n+hO@pAXG.5ne&bh2r7DnVn>'*5p5(Q>)(<UOIZ)mEXls=\H2QZEj.<`@'qT=X@64C2OcX4K"n0hQPi0
%hemkRl^o9:P,>WMLJL/--%0l4BOR2+pZ.C\,s28UD%_2CpSF;!ELkV9CN]UKrG^"6]P6?u(57VU(!46slJ=@\6p=lUY=ZM.!a3no
%L6m3Ibl7rT[EG[M]c<jFMY2X:MZ%<coAb9[?gUYO6lostc+,n.$Eno>].c/p0="Qj/2pe46ET(S&/JSsgo4U,n@bCV9h0U?B^'R5
%0L4K)&?2NbY`QprS,0kJEt;XS!FUCF^)"YR.-)%<])#m#T(!BOQ^)CbBD;%Zs"&01KYO&0Xn$qfZA+WGJ%Lo>rK5qae6;q(:8n'E
%:>Ih0nH>J&ipTj[s6GaG['>:+^&([.P],lBB&H$NL@1L*6@I00V>H!b]BW$lYs35>G\2hpe4_-92aubPM+Y-P2scd&4'odCoTWs]
%`H"iRgJ&MsoWJ>0V-3HWfTB4j1K&s9lB-Y/:#UctC:DU\;nCrbM=+c;P;7PVVGkg./6l!GF(`Uc&I'AQf?Qi,;1HJ]^9k>W<A'X5
%3dHJ`dCMu8Ed3_M#A\,$o@7;1BLM''?m&8:gm$oCbG@]5?<bSW\B"(^`,sg+H)Ba5mJ8r6VsX>hO`Ki,rM(O2^@.tlhEL_/cX3M\
%5J?f5g8UBW1]L02NtPk'Kf48Rm[&OC<kcsR=3it;^omn)GZaX7SfS+oWMgINEoc<V,Zpl"qS6P,k8X4hF2ZB,'NjPeUq)4kj'unc
%kF;%8l^EORUNql;gA#]WjuJ03o7LK*B(l>%W;@XpWTt3$kkn"0(BgW4I`el(C=Mm?jb'!1SqHn8e4h<$V]es8iIasK3bccM[(#st
%n'J$]I1pjD'4I=Ya7:g@AYq<%+O#$8iGID.b_]D,R_`SKem6L;;+E]ZCVC%2V/p[57XfrL5r`2X[>ZEd1pcTX.I4Q4e3+)l%jj#`
%r\R:q4T`s&QbZQWO3#,6<I%onY[!o*64Or]Qm>QeM>m$+0o;.^=[`%f7hC9u3%<*lkrmWjBf),A,d3[oJ't+>*J+sOfhT]:*1]Uo
%_&3ZNaNj>'c)1R^HBJ%830@d+0A<k\46jBem>@a<FL"eU7m5`s'-4+8@S6t6e'r5`eYK0dk&(;.]ujT;*XF[X,qW\CFF7c-%*MRD
%\g-O;<m@sM,B1IQ]Td&skbm_qgED;[cq[fR`d$Lim[LLk_anK"c_24*g'E"K@)IKb5sR'L*ZC!&Zj=N&OV]Ie[r`X(9G=tD%cAhY
%'D`C+i;+lm,ACDF7aoqnZ#j0X@kapO[%T;o6#@6Dda8AV@o`uuj^gIr^3,Ome7gIhERc7fmp^JlFdQjJBSE`R"Kq/`UVe$DLI)tD
%,T3/BBFGTj:(h:S1!5t2H?A&Ops_Htd"!Oa2LL^>dVRBD'H_k4/Ghl:[ksGdLZm08RCkhsk:p!&l3iH?m<JoMfa-<Zn6kM!M&k8;
%Ra:JS:EC@(-C[PcRXkpBq-95`QBuVLT,UIj;2c(0U-X$p0!-okCn82dLdY+[Iud'oj!U7mGs3IfV)\[dTjopMZ.e\]r><e`B^NAN
%SB+5'r<\%jFZ^2%A839Q&uW!/&[nQ&G\HE#Pd"=P8].s_%D9^M(sOoCqs4o[d4r_#QD-?R["s/"Gn\FA4I#1.?A-%,%0W.e!"A28
%_YEnV!58sHTZ*CtNu]H/j;AHFB\W/X<h7!BR(O0*V5^"4>S@5uCb%5b6s4[/`%N+Ri3P?'e!Hjr33;f#3EWEgbj[kO5R>[]PtR[Z
%N\>'tB)i3R9LW'OB&X@ai`r?0"Q5ud4'H`a=N:qT19i4!)hfs"7/+8C^k3F)AI3fP%ff(fPV4CQ\qS$2Nb]$sUiU`O'BBVS1u_Gd
%.oWO#`/R,G"iu(cAhXDC-?09<FtCLC^i+n1p-17Xi.We*1u^PCR3p/>8bKteUWpUJlZ>`/:5Pd0Bc4]\U1rF.n/N(FVPaoo2Vl;u
%`/dL[e!]B^U`rWkOYbtU^bn0E,jBc4DCW@2h?)2KLtt$5#2>p3/`DDP&(IBj_c(@An=:_O&NZr8kiCY`Vn`X8#E=%kMNFT=PdWl@
%#/<[tpcK^jQ33\nd"oTL^;IiM7"0uDN=jEVpjNh>HA]'LQZ`N;`ZGZ,JS@Ab,o%/gdW.KFNh=n>,)NOXoYC[Oe7>\O`)0%=OW#B.
%khlc]CGT4ebAnOa)XJ1EL2ra$Dt,kp0q#/-T']"c%kkmH%a2kC"r:k\Jh%Zr\Et$aFqP@X^^I"K!GiX^[.lg>?VFp]m$Y>P1`N5S
%YmI]@/:j/0*P=em&d.J]MHPK5=FD?C/S1pj".4<AT.0renr#IkXT`ND-Tj:15F=]'bln[-@]U_$p%&ON@YnJ8&`K2k6R%^c(WZpm
%2;CCgo*47efE7?I@#RNX,4@^(Lr"Gu6cICiAUMZ:@Ndn*2)s/hm#Zt<&:m6XbMn3%:WtQA:.b9A(/G=ISe/rl9lBT3S735AmtTYG
%C$Ao)61H2:$IPpq&o.3s0JQ"W2/Gp0TKYUr.92iS)1TAf:m@c.!)3/\]Bla7@[ifgZ3CFbe,a<[rtWXEg]?4:'f8e@CsDO]_)?Ep
%KZ%r!M%Fja9Jf!?_rDN!#a@'lpSG^X4*lg#6Vm>O,aY>Hfs)YHmU^]2IA@YSWfPToko=e@/RG@H9OQrtN]0O52GJ!7"p)BZTNra0
%+lVPIs!H$6<*04QUa$5-^bd(b?cOl,kmUY#4+`)qWlo.5%@%F-lJQO`H&lef+*sFE1$4;&6+q)<:N)0W)+I,Z8>?\-aJ8X0k&LQn
%41kQKaWNVd*O'J)ZA92_,:>K_Z\%H=H;mBF!=Y*W,c1V(RZ>sQ`!6)oI+BT[;A1nRS`.rq\O.Ek?7j,#*DHs*MJT5nH'(ScAEHP3
%#]6'u#"('K;T^ADc^LHMWXH;@AVH8fVA$4'XP=^;h$D2DqV8#r5-%sWC=;%WS0>#h"VF)=Y^Jkq9B)G:_&0g7_@Kh8"k1CE+tF`8
%Yjfh>Qe>g!Y`q8n&"/rCn+a,(71ZOT*?.Ho4!Z@OZk.i='m\fNSsXWl#"^R?bR@:&[Kq"[f)u\.#MM(P'&QU^CD\'dh.Q&5A-A%(
%cZYK0*UH>SK.T/5;%%Ee-8>h.%_Tk?R4mk9>CHd0\s4*6C\Hm)3?scAZr/;fm%Y[WD3rjHXN7gAKFSCmkL-'E6MK!'"@9TI9d2LE
%E5e;ZZ5SfMP,=Ft-3:6qZ.WOk$A-h3O_l&KoWh.lp0S&kKJ'>>SnY;$e*OdQFV25Qr5\!Z$ml$8*n[2dr^V>u8N%CU)P.ACRZsXb
%0g6+ug7_p'!G-n82,^OFT\BGK&$BcSeFB3<%mGg.2kW7:jTfA9%o$2/-;Z)$Ftm5O:gsmc&ROpN`.P@iFngP<JC.AW&#FQ6jfO(W
%=\t/AUCW8k4W1D1]+[5h#WGkrU[9mC=6NKd8J!3CXsK8ud#42Yb*-\YCLY_4?,KXoac;TO:r?QaTeG8:;M9HFB(-(BT'MR%!Q<G]
%f+9_+HOs/``(s(5J\P<iBZ[i+0OV00=5ZCY&%*XbR3+[s(OL[%(JZ\L!@7A@9gM"e,5.d!'/;*'jH6U]-k#p=jh2//"#c#`nP8>1
%fJpbZ65;].05AJrgHMfoW6Gp[J0sbQS7jh>?K>sUY`dfgr$nZIieeQU3:oYL\mbH:&-;eJ2-j\`&0*=%X?(9s"-mQ@6b&PA,+nrM
%p'G0Fka,=J#;'D!E:/";`D@.NZts*X'+Qr7Rn%c691!M/4>Kd9?W3EqooT-?-J\,P7KdXO)1E2<:`aj_fE:9Z4Ke(>]IROkHSV;t
%5<Y<,LulglN+gn<^m&br!BS.61d6RF"#M"4KB7sk)Yc^OkrTIeBTU.W"^:A+JVFCi!ZtR3#EkXQlW+N,,eA2e:89?O*Xn8.?&&U;
%Zm"cZkd!GlNGMA)Ns46>Z:H.X!_M$J#XV!_huKu_lB0]-?%/1H&/9f8AfhPVAW&"bi;mJYUkk\6?7nK8'ql.rduY$s.)fKB@0;7b
%K51'c5%(lGTQP8*.R&A0@Fl)LJ,r7+Z6F)bM\3Z9i;sLBLDT%q0S%7TEVm8]+NWX`5*TDd-=,Da0GB*NQtX+U`,Ign[<e2H_@N)+
%QB7MRPK9^/1VrCc-<c.5-9+jKa.pksJZkUjA;?SgkHD,uUr,l>ftPX5=Ho3^!ct.6%FE$FeYAOaUH%VH+g$cQIYcOYA!@/"O1#"L
%?"I(`[t6H(C<>fV!D[[kA@0/g^]7u8@!>f[$_cGjkMss__-57*$sDHs4"s>u,;i(eFnkb$i3VN9/D=Ktm"AtIs+ACqNW9O++U[$B
%gp!n#BsTcsiG`#qmGY10pVd?1^O5N%d^3ia5'.ifU0C\56_E%8n,N)5(=U[&p+/+<lWGdOr0GaFf\rsgpWkfFJ/o_h5Y:Q$fOc<V
%`2:+8oW7dh9RRH2Y_Mo#<D#;\N3_!mZo.MICUpq)"nsja2)<&<f'WfVb0+WnG!KS))qkf9HZ[+qCLlYM#fBkn-@G^2J,I75EoR%;
%s1peJ!%p94n*,N)`'0t7hV*8RB!aH:i=+&>H[,jcA%E96*BG0@m+RNk%]FU<*f]Y!;P-[Mq.Gq;BH2;>]?DLoa`b4Mc>K-8C5+;/
%B,<@Rfo@82Cm_eC@?(\k^lQQ&U9LoXgZXMc.?"4m$%?Ec/YTFimp*b74-Q4lEC?7ThR>7bJm!5VY,p@p?%Ye59cr%*>sW\3iN:LM
%h3?.K%M.Y:^<U'[_U^mNI9N<+ot`Db&Y<(UGPaWCfc&-n)T(S.60t+X%u;5gl2e/J>u>:HGVle8#Ft!o_ct.`$'(&GM[O$ZmmWjm
%1Fg(TX'4R8Zt+2n^71Sl`sMbdb^/l`Q1a;<e#YKAc6d(AJqJ_/GUOgos'OA,X^=$_bp"opM$iPb3?=B&'Cj-X.+BHll+=AZj;\<U
%9em!%dtfoEjZnEQ%b#Ko*GGpf9F!FY[j@OWDg!$j:LbJ`G:Z-ED'H=SS7)f=fNh_6(p6%BW#rg3A\aEhCK]5JB#'PEYf6HCAAJ/X
%%(L(!&<WP[GfRg_k"-IV"g,]ki<NaT$8_bs5uY[$b**@*$r+kbX;bWQJM[qT(GCqh8HoXdn8s\'e%7:g,-sTN1Gj8gE%APrFQAb9
%GU@fclnYBAI%TWBjQ$q3ZX@pf&lM)t"Aa,m\k*pZ=HZVbrQ.Dli[8?r4?;L?Fa4=)E+ju0$HKT(TVJ@=49WDMAT4E]X:1_3]?@o$
%cZKXSP=VH)Td.EGl\<&(0>$8L.tQni1W<'tP&f^$=@bJ&DIJ^jk^"0B$au(30p@6K:srVpq"_LOm4651$P.pXnsT9a8h8nS)6B<+
%,<3.Vgb7a^=JeK.?+<k\c."T3L>mYI!Y&HJL=dVi94"I^oH`To'B@m?kkKQV[*deppaKG2>?7-i6B1)8n99!D?VT:^82o*Oi2fXH
%L.!uD"q?,6SJ+n+SM1@S-94YX+W`epr5!*`Jo(Wb"\KjC51i@ql$YN(:A2I(QmU,":h^NsTQPF5,b$HH8-LkV=3O]OQ;(nFmBViG
%RC#Q)n82*1FHq#]@:K^5<m&OG2Gu@;_$2%siBWUU:2?Qt7MED'Al!]8Ob\TQO`#7RT!(8h9S`m\%UCZplNdqe#+9)epb>@&0VJt2
%5p4Fi-K\tchBb?I^gTfFeO53kJi2'CP(A-![^t/.@tBGc%UHDKJr'U`9i>+7(`B2),d\K4k]Ap`\Ef"(a#jX/7,G9[3,fV4e*^q?
%H:b5pH^J)O3fI*Aac$<+8#L/:88j7D7>@KbF8.@ASYWQ0.=9WsNJ/_.FT':,$\J9rh.D_PkA,BQ#[fTWejYlKSITGon.3-oZ>@D0
%.U:a3CBOHU81@De"JS:kdb.;a$Y^Lk-C?6(qLf]%='>g%Zt&Vl)OA0,ql<9s*b\qA!Z&YVA7OV8-1_F6V'BIUkee8=4G,p.;r/h_
%mlSZhCEetcA3Y\,/A&]@DIKB4%4e%b7t0!s_J,,VBfL562@`5UTgJq8GU=F*QFP@W!?aaYf22h36T"Sb%gVf(cGjs_M0YCZJ(5OI
%++\]j<f0taPVM^YAkh9/0&-^b2[SFfVX8-4bRM6\QRlV*qO6i/A9#/T77,1:Pf32S6QD4Y>p:!,O?(49_\)YafI`M(B[T$&&glW6
%(8p=>/E,8;0<LY<^88%ES-CsQigd@i(E',ad`")&(q,;7ZIJM7`RZ:;DM"K!RM(]/V?:S$[\<D`UpeK?9U0jlA9-&D1rmCtG0%HS
%FNMG)9iLs%L?3ChJqT$+Ou8DXJV9cc"-WcEYqAdaSWhIR<Wl_Wn$Ih^'UMa=dAf=^aSBq76SM7Q@D4i[OO;/$LSXm9XH,dF:.d`5
%i/T0*,r&,Lh/+jF+l:+>rh_=lkcBjaklS;.7Fi6C9NP/d/5A;rPARXeLmfl*kOH1r)&t_m++R$?10Il(%-BML,R#21EI1Dk$Q+Vr
%a<f'VLAbpU=`B1f=Det%241XV"2o.&gdJ)r:S7EZ-#OU!+kTYfP*h^/6odf*0G-n8F<_nPSY%;hnFp.!QuDF3:1D<?IL'r6Z#rMI
%ZN#&AjmXC]LK%I7jq^>4:^/".7G'LL2'&?kLn:F1($NBM4A?X$(*nMEEB:rZ@'jA5i?PJQf/YqGFHFGb*#,YKN=["ALFABTs)A'j
%3cV39MsAFN_t'0/M,W/pMDEi2W(0_J+;k\5p>K8me)X+.\&*Itji"BWSKe0R;,"ea(#.\$;-'RED$Cn=%`g\><Ef-&&J1b+8X""+
%VF!aFDLOi_C8S$Um68sH=E3nWI=*ie[^\m4M[\faDMJPpL8-ZC!*b0N0,]nB5,u/fXnSE!iMQ6@OFm_BL5t[OM1FAZE![d>Ld2R.
%TCbCi64X</#U(GYfd3ac\?Z:g&\=khqO#H_aZ='>H&cM,%MG'gXK\uu<gt45BBVK!M+s'^)C^m*i]<sX+,@B1etTH.9dIRFFUf5I
%!]hJRSt+oa$(rWd&]s8uhdZ07V[l2rVe%U3-F*hZ32/Yo+aAg#U<.CS&kdJ!%umG28]pZT1(_9KIFE;6ad*.e;7U!cK"6c^.cfXs
%Hq4$)$l=daXp>FUa-DeW,VlTdC*#GdG"lc+;Mh+j-Wa6XWtP%rKSmRq+gjH8R=,2Kaa9T#:=oVV&h@A&F,"^JK"3pMfdr!5/jtj2
%':>nBEufp:>q\#]4;Pnl_@j^5?t/EJR`3>K1[uL5i@qc1[*[3F3O8mgp;h<,bsC&6N=X]m*6k+n^qACaHgONT`p"Uk6Y*#:Wj.2H
%>Su.[,SG=m&.CT,U\c/P0p6ca#=\Uqa_&rU/?op,d9*Rb&p.,MM(ct>]S4;7>t]&;J:Qm&F_f=Cm0:W5\N0pNg,?na2IW0:k)'hG
%!#?8?QgHG]#t9&3\H5'Pk4?^#(5q5B+Y:E=?!f=6^,dcr`o0iQR9i?:Pl]_t^n-8lbu!+4:4\%^C.lj@\5dJ[d6pHZALJ1h?*t>5
%N[4K44=Ik[=Jj?%85q_,emYbD%D0eAL7gKpf!iLj#.nHUMP6gs%`5RsEX7DLe2TCLf^42l)PT=:9cce23#j'C7N;dGGe'!@^'Us$
%'6)T`eA(pR2^XoR*lG$(1p]>bJ7-k%hAC9_fc>\\aio:abkK'5"U.<Sb?ME"aJ(#D+Zo3mLqrQ6FL't"+8YflI5JC&IRNR#SlHF3
%X*8PBB`)UcfbV6F[Zo4$q-^MgJ99NZ@b(;RVPD>B!0EOXI)/WK"Lo]@OA82VD'3*lLZlep!r&*beMSXrD7RfhUdj*^jDpTcX3A>(
%7NZHi?mMus\1sr$dm@];V.;>"F`oR&Y,&,1otCS:#$S<6Q#iV*N[j+q613`5Xsn)rhsB:EH_N=-$KZ9LedIg:HpmDUj#SkfG$;QH
%q/RL?j7q7HG5gICK;Vh)lRMW6;&:[\KI)^I3o>t8+kWOboUa&3$Y3^k^@-m9eT(I!WkN%[.Vu;08jBQoboZQi8nh_7@)KL[(j_QO
%;tUSS/[,=f2T`'Rf9"??X4GMHYb/#-]#\^Gqg5nPfa-'fU5]O=/Vi]Hlnr<.NK?3B:u#M2b1T^l$VmA6dVW2VJ1cdJ]"qWn6Y?i`
%+)q$rk`u`@R=Wg+G/bTdl[,W9K-r4.0>O=$_8Td4ht_jV\:A:L]`VH"$dC$]1SI*?J2;oQd:,J5o:7.)T0hcjfcV?aIM`t"cR6*j
%IegP_?t$$B_boeOiR.29P2%FCK,rKMk9fmLCh3;p%QHBfM(*EG7n&R!40WZ@X;8_4@@M:A%OC9-V,t$KVB3`<CcIp3aSB4W@@mXd
%6<i'[-K9C][.p=<&#/gJX\6h>V*`\rlGa,PYfZ\_VH=GE@<PV"cXiG$KTa@cAkeTL8g*;p`$49R"2(HK"IkGm7"E5,q2XDE&Vr=J
%2,maS8/^(4%X[pZBSp2kSgug(Y/B%cE!i0E6uF!feKm"DDN:Y#iU3k+-UFmrMRhdDM_F4RD)+uHrYs%#6lhXCVFEGKZnN6P@+>N4
%4tct3%W5aFJ5+Wq096;R%tYr;M#@[6kr*b8,Y"YF$GE+U=@.q;X_<T8Ja!hj9HZm15?P\$I*_u-)JW`rRKLXb"k*o[!7GTB]Tg9l
%7Kd-bEOc":Uh)No,;!rfa`Sn8>DZgKFYR@(NaX@5LG.u0NM>+7\4PV@KXbWP7EIJ]=!8TX&[_$[&\OFL4:Hh+l,](@)<6LI!bsXC
%GFuHdoa^&4,0]!)#V8?R-#?pNLruitZhqqrfk)Ss<b6(+&f+qh-DDac`]'a$K(=u-;Zq^)f@dRo8hMioM$p4)4@\<bKT67BWZYc%
%IMG:<*!!,X)N3Oqm)m_m1PT".(*9gs%lhOpY;M)hJB"`)#85;T&qahAdj!QM>@XXKfXU2N:E0ZFene'p<s=G]XLeB9iT'm7=8A]A
%ZW)kh]<?kO+V(5$`AeJ9Uh,7;PU/$n:oHg`ZD7nZYHq#)(V?2Upqp8l/\!WCV^otXf7p1p:mRl0?sB-($pPbA$U=jb1U74XI%jjp
%M0ZT[?5kd/fb&-i6UY/h-d4MqBkr+koWkc0QKa2KigHt5YjAhhMlX2)E<o"gOGXM[AO+aIa:p>h\6r=q9TiX/"C0a2<S"JcWF3ds
%FbbY]Y!Vp+or*RWLs$>@G]9-,o%TbcdHM!\,[n<Yf9$dk+?JE0isZ,%>_aKX%n\qUYZ5(j16r6?A]Pp^EkNQSS<aKG.=hr8YRXCN
%P0btl(iTjjosFU6a)UBH+\9%p&1*WR,Lg>1`m@$4:1=B.7tEO+X3rS]e`)f\Qj]>.m,%?`TsAT"X#?U19+J,q./e[;Q2r2m0u7!@
%V??sR^;;d!'TR7NQ&T>Qi>Y74KS/bI\oC%:ZCF=n5tm)XruE<RVXbOu"q5BV$mNZO0I?B8VkoPW%3nO+YS*G=SHk=\[O-goGjH42
%IpfWN'`btnks.s_`<Tr4:7!WE>Dbi1(+q,eYceWVOXh_/>@!LGk,I0k1Iak=!#-VQBiI!.>nI`KfDT)e,,C>9@csa)9TWYd]+Ta\
%$6k:?5iAW/Pk$UQL8/m;MYdrrUHHU'gJp33E0CD$bMbEfZH,R4&Lr?1`\=3Nn$B&4jO-(r!eGU$i=iJULusAk9714VAhhT'8(3_U
%!Z"2&ab(3)=b`ji&rm*nI)rIjn%q0'Xs'1iKG_T*FEN-C64<V>fN_X\m=8n:J0K$M5o&ShVVD2,EKf&\V*MIl!YTQrp9#QpYBJ>$
%Z[-:g9;aRG4[hqa_se^e*n992okLutM&*KUS?aa]A=9HN(BDEWW$sRa\ptPU/;G#2HFTj3*0r1&R#Ba9=3b@W.<ig'=43U0o#-fr
%H6S+bL9o=6Q)@Ht6$8HCJCGBfP8;9+YXOQ69gXKX@8+D4V>)AhfJ*N`\;1h;3ppPuR"b9N[Nn^)``%ZC^P853'1?T@':hm^mH0:0
%/*aZa7MJH_R'rk)Rh3(sn;?skDl(!8c#E%]-/!P+ZU:]2`d#327H[;NOpn1.@"d??L*Oal^PnWcoASGn)s])r1D9/7J,I=nF,VuL
%Mos`Oja.R*eDN<`Vb,$nZIW^TUeDQ]cPI[U-[M!<"/Xpc@ibpuS#^a<&Jk9&&`hji".1[1;J(_rb[X;R._$XMjf(2(_$qF=7m*?e
%6X^q"jbOSWGG0^cp6".#`fuS('lh._XZnZ5K%Q>?L$DLh6"Mp8H7C%O[\n<b,&U5B:rT,^&58,o1FpFu;*#@?B9Ds\:p>M7bm)`6
%g=MXa9,NPJd*c#eR[VL+'-1frHU9i>M2+3H/eQ4^F&\R'MWfuXqm+b3>&6?[#ng^;*r&+\P=r'gg<*Q]NiJ5]&O-"p`*E'UCU#;^
%U^Bi#HNF:@d4r7CK;e%mdf@[HWEdf4*L3BW\9+"Dj+Wik*P:Xq,OrS.9#m#S+RC8u<-XBIh4+i68<$A$g,MS,8Z$XI6O^Z_bl:Y^
%(F1&/d<-EXHcHV/0(XnlL'i+MZ8t9c3^du`PCCD;75N[lMD!R!SAq4W$;UVR"Jpqb,VdQJ,qW//^A,.J8MA@VG'CHZ\Dj"6oIgO3
%U@aJ]gs,!N"WI/jCco>pZ3]X_5k-Ng^C%AeO?<&$q)hX48P_r1%9];a.V/<H5pqqpX4!'JPpj,;=9nS>^!DkG^[B9n;HE$.bmp-d
%[P)MZc*uJ!a.LL_AUE^2<7du'RrNrj;%UsYea$J0F)ZtNl.p.iY0l<g<J+aobSniC_RC3[hGeBj+/1otXCsu_7C"Nm?pcfZD:s&1
%C@L^6l_#m&P>YU%cjt2`,LaHjd1\lJ(qoV8l[Erc**C!$ePqP=-0r(XUC199-Ll%"bEij1Gh')#401_0%)gP%]TZ983M?SU\fl?=
%_JkSQD>KDXf<^4567Y\tAf[iN;\;+40eK(q!mp)*C;VgGlJ]Z.`'[Xf$2G.%6(U\XK%7"skhJN7cQlIM:6G&UPtD5'_,352^cBuT
%O<>c^I:;?a%cn6'6Cb4g$dn>YLaF>N$q(ij=8""$Q8<jlU95=b2&[J45^co",cj'@QJf-\2CY+/#ge,j&P6qEMcUWp#L51@gSR#&
%m#Y`3@GZ_!X)au&/?mMB?&uM)dDBHF@B!pp\.gs+JefO:fcr=o2OBD12=V"j//N70@"![.a:;HjA]gbMdo;"P5R\A1V\u#LkkH\H
%UJC?n#K_,W1U&C7%;bC(iF:IUOGOM&:flF\8Qk#[$SL:1!,9#P-#2i<#,'A/(^%E;R#]'OTI/EJ+bmp%fBZ[=:aI9-8aWjo(p(V)
%!_6VF`F]W`(mS/j-Rgf)<#qhs<s$Ei<Qa:4+HH5VfTO,5X/rt4*'Z'RHR"/3i_'Qj)._,(ls@,q26bWNg5OR=%8#D:_E`._L:UJr
%X,ATXlqBTN#9XK;E:^U?+cHUme!58SZMkkXf/N$M66:b.VAs=1JrI.7!oTC+9.h8IT],%sAF\%Q^<ekhfV5..C,-OtlJ%T@E1A9K
%#u<94G*5nsT]<2+L6NM+nMu(keH"rc&8BS=e!)1%fkKAY!"1?;b=-rXR2j45#gO4;-Ll:OQ0ke+S*Nh[r1_[X[8lTNPJatdCpiFS
%cR]\j*)H(SP0?>@\LhpkqYJH_p%l,f#'^75(3/3'YL:Hj,-+74<0?g#=cFT89495bGcJPe7_rK`_2..T^3S%u2VX?n"=[=5C3"A`
%Y#C_)c+283<gHA!D9HUa,M>u]?A!*4aAia@jZ(0AG1C_1c9CmQ3)ka8Y0+M0Hf"4:0+@*#kumAm6:">48X3,0,q5uqGt`8WS!s9\
%e[i#RJeB&PZrD@E(V6Gk.58t9_s-9a$UrP8iKhm9:;2Rj-4Jj^Hm;+.FLGj+i#NdFifT0RhaCCGhRIGM8\^'.\Y9sEQ6u>5,T_Lj
%KVRrfFBBVEYcj3X,T?g4,X^mcd?V4C5n%FHV*Jm=2+`ed1@7Xk&<V=rKb7=dr=8PoDV/?jLjsG:)DuqZrn$guglZc`F[t0!c5gW\
%Bd%WVjtJ<JM:h$6kT!a!9scm\d394a^j5st2/c0`arGap%G&T0[dS3;a$as(iBkRA\Ng?O89"naM*fLX#Kj.uHR%2mWF(qlBYamB
%0NkQDH_rQo8p>R5r8elT207h!bVG%/5e8CA^nL?/LY"@_RRH?;o$C7W2s"fmZGRmtA,,%E?+E/)2>YsC-=;K82l![,&d;UOc67,2
%UJb)#gQ[p^A9f*[RHNSsE8751j-#IoV?43X<[i"DNi3*C_lmhE,ppJJ1pN5kM6bS%,P)MSg*U>;QX9k#_L2a)?A*dK4,GfX@VkP0
%SOS!_!Hh<L,TIZ$*ue3bTnAonkf$nci&S=`L+PLFRCkLTgaZPNc6i4@40c5L-HDCA0.pM,CV3nRPX*Hdqb0[A>_j.r!l`(f\(HgY
%FmQbKZNOLVPm+ZS.OUUV,?Lj7PC/5g9cQ3*BLtMu#sd+iA:7@V$rsM<)M`N=I'CC>'<*WIXY&tL,jM&50P:+R$G7&-`('LITnm\u
%2gO(NN:6o/1X&8(3A8Tr6[;l@JQJ3jQ6;k(.$3J,pm*aUfUj;G]@E@P^]ZOQ#(srT.WE[\fk(LV@l#rCKUSD3d_(r-f\mg;FNF1F
%X/J)#\.>>=Bq`no6*X"aQ:;WD[W)l.nitJOpdR<m>Sp$*!AKe5G-\*uC-a]Y*H9Pc0!=0M]MuoSZES\4nUR%#C?=IZen`-7O>-`B
%2`h7Qg\$(,*uCE1W.3sGfq@r'!b@AAm1I"2cjsP2V8Ap+8JN(X8E@dtP.$:3Eh!URD)-eFq;#qh/p6lajpj?'^;=K70:_Nh3SBMO
%,hdeeM+.^^HnOBqGJZ)#mPB]DLtOLDFb"V;5]%pjCmQ;d6d"=RE@A]I]pNiN.3roeDo2odOdh=W<i!:+'rb<J?IuP!XIc*l'/`JF
%AE4YM0VS86Qm3HGbDh!2:L0=7!Zl5`=4?I$?']]bL;H5.9lPBf\o8rg('eKIDKk5Sm1'M'/;W[e9;(3k6'Kg$!ikRT,gl-./n*ue
%!$jN2P;>=Hf0e>T*PSWFTujOV't]K?#RYO!!Hub/%$(u(iel^C1pu<qZs"jt3IFSW!;7hoK4n`C%Rf6d/<lkGV8F7n>SBWQMum(J
%>X8e:H,uH7@MPaY/IXr(/r>LDRW<3spr!/lMD#`ML@YJ1W'8J8JL]*jhf;;_=L\g\#qIp(FG[Tl#+-Rk7,\,%$<$Kg"(jalmY]!P
%_GAK_8s`G/W7Su^!Vf!g!Fl.)gkfAaZJ]K^W/H^g@;r.>N6SlO$L>Qa?cA*27t%?D\\]\fVd)>+WI8#lT@],t3*<f,nq,$2+:#Pm
%96+X-$R"I6'N0h=KT62#5B&P6qTdnj(_49V/pj@IUX;<))_PU*O>&iSFWV)`7l@MUL.-l\jj`9_4U.uS8(*s%<*Z/"]P!/JCIm_<
%Cg>.>7K0f_3']W,W/qs\2$u.e@Uq`8=XY2Er5n3_WhV">Ze(N[JH-!3i.bXUNEls43_'cJ0G#an:4r#9'CS5#e_q9C6e;Vop]J%C
%0UJ>/f1dD<q$UNWMW?XtQ\,nU8cFGVaJ2BBTR&sh[D2rHpt@E'Ejq]_Bq0Le4(7/--a:PM0?0ZV\uU`K_OXJ$:rejF5.JBjS^da>
%*/q*M*TeZ6-*B2>BZ[)1Q?To9bD+QKl\\tfq01VF[@#+!o&3-2,St5mQ40hTLmN*umuD5e("N'WLd3Vd[\8AJR-scb-\l_/&^N((
%U`6SR!T2W=0DBNG2fgVmFkTA^J`B[rUVX_m#1'Of5;[N+Q1DVuetFfVqg;V.F9E*%GDl0p$=)is#Vro4'lNBqiIOoEH<>f43pbd[
%,Da0Y)&\K_?0PRJY^WBDj%:/<iD!i=$M#Eg+A3F88G[KBL$#pr0OdP,_/F'T>.AmtYn%8h2-+BcQ]FC_J8P%&PnhVK2A*q6VH6\-
%*;0JtdWU>#/_89#?`q.hlKWk^$UQ@#*CNL[11/M_KQIO^I#"]TZC/?g?ha@D/Mqd]Yh4NX/TtNWQ+h6%S>J`1`W7:?HIOZ8nB"^I
%Q$!'Z?pf=idDbF0R^2hp1Sc=!+]WL+KqH7pkc":+N=2&8JL[g.Z@5W2RF>S%aj?6/X1ePV$[5U@!^"\7HGRH].?T`\%6q"l%Iqad
%Xl,7k5bUSJ8G>:?,/-U&o<X-RM.G'XYr'RT=&p-j5tJ9rDB::f_XgLH:_K533f8i5;@"!]RW"6UA1i?qaQuHAWOfn!Z,K=h.a?:H
%3VB16WV`JH(u^D".nul2nI5i_QHLOFY"B1Z1LE%Nh9L0)g/rp*;4/W2aCUa"I'_2Xg,('^&YTb=j@U%oJapSJPo/Q@abVDp!Tcl&
%M8A69T]e%q731/H<c&&LH13@S*LXp6W'l=`4C^m`VKN!.fUaPm^]_^2S\uM06-*2s"r@fE]gASUJ#F"`bt/qsnSuK9!*rF0!LF2$
%:d8NP-glmr/5VER&-!')O(,!JWqu:?*qM?*%PYru4"FTr)OEUsNY>V<r2#[[dN(bnkA1SthUT,`/,L,*:539@c(o-ebR%E_i<pA5
%5'QggU+`#"j$kVICb6r<3D.;Xd<2iDerE0j,!MuB't+>A1Gl1mL-%]V#,rT435Ds@!W^G>^!N`fbK!*2#I#1ZPI'"QE4)7lW.4Z/
%)Q4*;VcW5h_JhKCXcNQQ#d.f[`fHK5/gnDaqf%XPm96.bUU$_4$]^,T8+$Dd29=L+E^3BI?qVE[+L%E0gBffo/WN@FntSn+T/H0$
%B)+m$Cq1-h>"Bc$g#6/Nno62.2)o$)nX[GU-RQRJGqdBKee)ae_N(HC!p1"OL"@Q5;Vk[.?J$[/ZK'T[)VjQGWZRe1bK&V(>S(6r
%BjCq8R)r^<J6u,u`qpisL;#-'+dSS>!Pp..?1AN"1)8"BPJ9\@q)RJ$X9b8P9h&LXK^s7SQ:8;KL2&J.GlhQUH?'c,%G=3aVQ0(k
%^e:N9b$rpF.L$]4AK>uSmsgdDr7a+/)!qRY\]V+UF/F31;?%Qb$b;mBW[?@]W"d*UAqEqCk`Wb,+36.cGT;j/.r]lXL+0UP?o,nP
%I^'BC'.N6K.c%m6k")=eWsa-1f$KJh'SuV)n0SKGo2hU'(.Ft$#;.>;ie_U+F4H%n42I"0^F3HU_M]Tbi/6l_/i)[GWlg:b#kd`,
%8=d3;iU_*b#!+*8q;@>_k%MXRY)"QdLt`d3[MOGf=R-KY`!S#"Vm^Lh:rF(QPn%2W[uXoWZ_H.mV9u)8+U:?8P`df8EKIn3b;Z8"
%_[tDpUi]*6?WFUuX+)i9GUR!YDI2Od@Fr@,d7-,P""]_PX6=R-/B+1UMSi5UV,Adn^E\L2#2EnRg_hFo;\CNbI(tZe$D/5l;EVHI
%i>p`W&EtlZPPO7nlue"b%W<sdFfqQS.*Mr(_t\&.ns:P'ARR_0^.^mD'uDpG=th4m(#_$f:og@fn5hk\[OdX\bP.5+QR5An&V=hc
%<L@!2<iY^&d]0n76Iu$d#u35^&:EP_]7L0BfU@38'OPA#`Ne`eZ@lHfc:mWH)\Lb$_#c0V5=@]F2HfXEjc3O*!s\`9-brPcJYQ]4
%=<@@=OYJ?B2oN=*dL'"1`6ZP,QfU;=n9DLPEn@T!$D02BI7*6ljEt*bW_pj;^Ft]m>^^W%AS%"*FC5X#2-'WJ+[gsXai=V)8p5n3
%6RC,Ie(MN+F*19@!D!qJ!ZpXX&<aD'D+F*H2>E@UA>FMU"L_rVcl\>\U8!^eT99$&H!l%/m$*JY,`95)Kl0koEl@$jAkdUZGHOi6
%U$C'<3C\hHaDGE5`).?$q-1/W!dK*H+WB@+7`(DK.:n>l\?g!,lW0rqZ#Hq\0W5#cb8t4e%C*Et(hJ>cgOO]2?igfs'Tjcfk+jC!
%>EQ(`Z1%i+"3p_S\uX'Di@8)uhm9ho)NTnP>*L`RpReLhR114T?j>(E8]TaGN%cJd0HJ'A<]Z!,:XUtHku0@h8]G^22A7PfR-K#4
%[bOUagWIo%>O-ZV+S,6qf'`DoP@/rP5W21b9iBU<K/7HHMb0RFbJRa*]!0"*A[Ug`!PeJ2+&cJ,6l^g.DD1o%Td.sUY][FQ'q^1F
%"EHF^^sL*Bqq%plIh3;tH)^H8$[)9=>Y=CL83Qdod/>io[8FVPNG?g"a;7M:k1Z9,H8"YbJ)neL@c%4lhE1Rj`>Z#=3iKHe7J]=,
%$YR@IDFkr\?XV2]"3a;qs%&b!<W45VUIFm[]4<_qHi[?EKA3_6D>o<!+#&NElMH6#]L+HWeQ_p+OT*`'iZgf)L!5&=Q@>s,ph+Z$
%qd?-\(28N@B8V-Fin$BLnEZ]Qj3NR8;,bbKi"&XMrS];fY][FaeJ*f(DXRkK>Iu+2=Pkd:5#f5H7j6EiZ9GfHCFrZGrs7qsfo?n<
%CcBE2PhPlth`C`9mCh8W>[)4hpb"i3Y[7Nt+1O&oQgQ5jXTm;-L5g@\Xb0)1W2<4n)VhVA=VUZ*N\O#IPq+ZBk,"G-S#hh:i)D"T
%CX"`?1#k#5+q[oA7W5<ZcX*M40<7-Tej3D,61#j$BMkQ_lm\XU9$`0p6PWF+SV4b6<)sW&Z$Jeog1Dm>@W@jt()0)'hl3\dNW`<,
%!Y47CW\R%nOP,$l\pZ@Fn\O.U%jq^C5&hdX"CL.4A7oc,7ga2gXg-)^##[!Yp)II+3GJP,6#K$5YgO/&EqD#b8m0njDZXE^Li/@n
%XZ!_Z1%,Ed[c&'>erpgUC-`,VpS$P3^'Q'VRApl-o3($3OOO=9PCmTEj]3GJ@soS7caaB4o?u&,3.b?8$::Yq"l'rI8A)%N.S^RS
%UI3"1^1$@fekqU@#8'#/*=%d.o694%a+U+c1;([^7jeIL6P0'QL$hl3I$L\pS[ODj!b8"SX!P\`E:b8_C]Vl-N"dW`+N`V.!-OjU
%Uk1j3r,<>l:h.;K?I.-5Rq\kDF)FD`0sGN-9PIS=_aT!gVp^NV,SBM>/K@^`/c=F!1)%XC\OTITrI3EmX/8mKHr8eiWA)@*;#>_!
%_D-2jJd3r>TH@UAO'k,qrB\/sNB^De3Td248#EFVVL@)a&W-FeeQ..GNV\*"7;l;tj8H-36fS+DSH5BqKiXEpCK-7#8ITr=8?pFS
%>4igeJ#MRRoGg0T"iR)uHf\5(q;/&GHR]Au&d8$;DrI(pDrHsL@Ff%h5JJV:!Ks^9nT2gh88Mgqq^r6U7RU[:q7aHUi*X29=U3VH
%Q!+gD2HH*I5>boj/p)moN5;E^2B0V3H;QWD4,M'B$^9k:S`Gg5W=ruodm]BfKc!8cHaSTKf,_\?Vlt!6GH/m1cCLQ]NGGqF4k+\Z
%;^n"+!YQ`*^/?FI-%IlJCnXf`p_&)G3iS_icAu3W(&3%S0T`Xr$n>4f'!DE36Y[>41ILF<Id!GAHI1>2gScj-(`Tk)8^)/+6\aHg
%1f7NC=6fPI0t>P,Qugm1M0*ph:/n%bbu0M5[/^b^gRkj4`6W>7gE,.0Cc-E"fH:-lJNZ;Cr=_2+T,PucIFP9rHH]2_(n/R`OIbff
%PNk<4IHbj?5;jGbo1tmIZkF/TRE,d>'dF8R)A@XYq<Xn;l(&5'Tb1gWH8$r4jj`!Rg7Pbn'np%gl(4=O9pUb:=`Y55?2ZiJG8f2d
%g=9kdr1h82;1C&#mH)1^d)YM-D_u9+JXOj0fg^t*7KK@e-r[/f=(=#Mq3C(f5A83a[sN(*(>^pXOj4HjM2K6e=V#h"3%ZAG*UlLD
%-[^MinFYXQE*IBbj8JLD)Y/g<rhjed4u&KJpoL#tCQcg)iG2oq),Qb9^4p$tWIn7<eNosX@.IJ<9W''MH"/[!^F%MSd+1ZLZ/Hj]
%n.i%jM\1Pm.p#gJR+P'o>i@BkUPJ6"-t%BiSuc\1+rNU<CuA:pq`l@&T<C!Z/O'UK/q"rV\2WVc,q,_md@ZgF@p*rg6(2,:'CR\o
%J=:&pc(nR.R?$p!(o\Vmo.PF:D9MG%!7&mH,U!\Nno&q9CCrOH3+ui'?_GA!jrgW3]o1mD63MnOCkG!V>Dm<8."iKN8O^mLg`c$6
%APG?$#qJ]O.75(OI*-(l"pJQQV*A'3SrSf0aA(B_l#B>6m&,Vk^%'4k!'oS>2>Iu0'u/G\JK.LSJ5h8*bG>>8(GggY!0<pTE%^c@
%*E(`%Ft\5[AVEGu`uQ@=MXX)(TtkA-W2ib+n1nEPYn^A$QYRDL.d&S):T/W6%pK's=Z*@g1m9KtZAc(3$nSuYla@.9`Dml+I2NGC
%H39DMaJ7+KTu=YWeM6=2BH#8;@)uA_<D^6P;'<8?TR`N0l/r(5aUjOrr<m&j8g4:KR/:`&pR,dK[!?1i5HH$M8KR7!T^#J[&pR>S
%\Xm+TA;h,)5<(Qm!EV[fMS6eo'?B8-&Ju>k:33+Y`rh+TmMtoDj[3:OWe,c$XH!FKZ?nhf7ln<p8r%fOLm7=$qZTl2MLJ:8@+VZ!
%0[1&"N6gWCc:D(qZ2*[ARZPN6@5XfbHUZULY;b[WgU\2Os&Y:K5lQC4Q;_p_,#3PIVn.?UFPakhp!gkE\JJ@GqIb"*!!Aj"_Q<[6
%hM"j-:uLbJphdMW&F))YEe3&j]5Za_\Ah#%nXON7e>IAfS)Bpa><&LO>.F1+DrOt,d.li:Jd$Hq^:Qi&I-\4g$`21-k8Rl6YNH'L
%UO8"_<leS?,UtSnn6)WgF_Z'JCJ\-adp]klaL@i<gptuD>RM=ZQY,DMX:$21rR5_S46sJaXtO<k^Z1W^F+1)s"pT\-`1i+r#<n'7
%Pp=bV[4*:E1(U3sR\oW#7BLIt=@L:@)LXaYLQLV^IX])dGN*W4;fP8cic.\IT0&+Go=/#o3,VmJ"M^JID%RQ)AlY+urL?JEgs\92
%lm4,cGWK[8("jSt8CpX-8c>O>*)"%p=)9Ko4lL9A]<f%PYrUREI=?24/NQc3;e3qM<,h#p>QeGJNXJuB,$SJ[`&*,NoIBB,LX!Q5
%0\6<a\oYDL/r(.GjeY&s7U471bMKebS]fi@bAk_fq8JVpBi@sMFD.(VGsOBi>_FCej9r"n*06qWbuVkgZbhTa'o%%bm]0OQqPOLR
%h_^O4nbYq!%>f]54la>Ka5)Wn27kYWrGir\+'$0*U.Bol^[A>/:451$.T5Qrm/80_l0[)DQDQ`nH\oK\.H$,PSo2L):`cUK`'j&&
%m`sb)Nko_YRe66k$kCAh6?_uSoAVum9)R)I&=672-Kba[/pgo.;B,0/4WV!.H<^s%2A&f5B6,`1\V=4CmjuL6kO+nch:^S#fUQe]
%dk\\.c".X(Tg:9(E1nZD)1a47]gWFQ`\UQgmOWChW'VnhMue/aD"\US>ZVR24-r%iEWEG\3'0(*aH^kVaPFD^NOTt;CnG&SgOiUh
%0VW1bW5ujKHqE-6WRo6JY,H0ql*/uFA9.kC8tS:X^M,UXj,;k+2fl0_p)2K.S^$!Dgm>?-L*XdB&a!]n*[]FN3;?79gEGZRZJ6KM
%LOcqd*C"36H-((CXhLeda.gY!-?mPl&3'EUdD-3reT[hES]BQ@a'm$>3Q'J$jf42("g:sSDO9+54IkbYqiD&[S*aP+3K;P?ZPW#C
%,*tZWgi*dMG`g2BQNPoY`9%UZ*U\*]4.EhsS$O\Na-R#o+MW0'T"-JNi@0Pf=-<tlM+F5&G`16%PlNSX\Ysd-X[YS;Y8%1`ea2UA
%\PcC2rb(D7h^aff<s\2.O"l)q"n#X`cK2d)bC+MH(X`n\jp;*9)9VT3N'rf]gPs@eN_`9Wle.:pF>l`UA)c8uS>!@InqpefB_N7p
%S6'10Zaj.qmM^7#L-&N*cK9#^k.Wmf$ddccp9@cHQdeqRf2X$T/*[o+FkuJdZ8pJL^9b@sFP!).rFrLHYDhm9-2#)JLG:t.Ph\Hh
%js'@rNcZGh`MCoe:9B@U&<0j\h6N/J[/6k>DM7rZLNe.o2YV!?G86A]]!Jq/RsU^qY5B+<CDY!lH?s5$3?o^WkIG.V_U#KSg!%!`
%(.3o$/pG_*X4l[PHng*7cJlQbE#5&"88`k=E-Dfdb/%A^G8]^XE0jLqcD`;=o5s^*&af5a4h0e_jDVe"E*"&PjaLi]G6[dk_-O$)
%2O0=WEN=i$'m,inr3m?u#3n>3EtJniX]M42gf?W1X#==G_c9[[R!70IlNMI^Y,m5!(3aD2Y7fKA9(fKW)>j!ap@GPgo_RDWLDh(@
%'o1NpECS3<Aa>=:C\7u3o1!)L_'(r=:B1XtSJ^.c&^sb="hQS#4+k-SKDYM4Y-;Y\S],^<WMes^X"(5Qe5K&m<P,HUk47R->W)33
%1n2+tFPYX*:WDP218`5_0!?N;?ksg^6Bp4ljA)H)*[57HVKueHCeUr`;=:17=(QFrI7@B9%C<TP+f]=V.c?l@h7;=A7!52hAYJM9
%3*/#gmbAq/(@JD0jNbU_k+cXj;q.7G?dE%8ql2QbT'nSJf*pq2!r@(1Nnh2#Xgm0<"a,)^ll-WW%`SSu.kn.^mU2BYYP+o^r`.`:
%L<\ca"l!-&N-B[apZ(D=iit3.AP]@5)lhoOA$u!hJJCGT&=PA2c3qVFT.6'ElXS#P1C;!U]%6Z-SEgh7kD*>g$BS:;H[E44@06lQ
%$h'esE;#?G=jmHcjf.$`Ie9AaM#'ZEXZN1f^1WA[jaL&1A<]E`a[%d?=bki?9&8M!DoT^EfqYTP2d)P[V^GEcgK`bk;c2KJ33,q#
%oZ,Ht"b>CMF%PBIkTmuFX/E7G<:=!4JqB,?1+ofV[^+Qg^CBfl^6"N95lh_)2;X#JY>s0+_WSdG(eQ#dX\Et!4[q)6NXlOu?;;o7
%S^rG@]0'8=P\"bR,h*,tEb\NtC\H(4-/g,W7T;X^/"$\RAOFJn$52Y[]Am[T[lrldlCn@`OA]5$f1^mXo$IaiNOcJUmb[>N^04QW
%GO'W0-k[#W_;p6Mer6'b-fdS5<\<0>UR$XqA=JU29$=Zb`[!Ca*paUTJ(fnZGHpo.oEPchD@<5i]\7N]?)O>&Wb).qh1ppAR(6mL
%]]ZPM+YG_4aOA-J:hlI=%B%53]sCs,&!.cd&(id.EpjM/oncc7k'u'a2krudNfE.h7kr;"CubUcS3%c^mH-CqZf3*I@ce%+G9`6H
%SNPpTE=A,34Ah`rWEH('T?^Y#VOgt9-&E#<^6^L'T1@nHl0[RYdHF*&Gab+AdX2k>IOi8NY3d$8lu#kooUH`N*?r3T+\SZ:UHY5I
%O1Eq:4DqRr>("N]f_corlf[5281+"@ks+/<`OG1P]pllf.t#N.nG_5O2?2i(s0MOj]79GA2ug?4[S9AGdL];*kL.sOI6+9plsGE=
%gUD,q4gf6q^4(FW(CHVf@mPT+>jU(.^5sVBQ!)D/YDrC#:-I`Oa4+#qGNnG&-[h9VfQ+T:$NI6tX^>B1!`KH"__)^GO0lX!3C9,,
%,D6g[/7g-IhXH.UGPp[@*\(7"1Qugkpsi]'FR"Qd$"%5HQWCD%lD]KLo_)!a0L"XgU<E!qQ/;(ZSF&*]U[DCV:PT>W9%)Hh47&$A
%Q$0-L3qZ*?X)Qful'Foi;[[f`p"SM2`?r@TV7/PD\gcOj?kYOE;kOG.V0?;m:^e4J:3^2?QUI/i4e3JjS:2#+dDFp?85gRjE$5<>
%;=/"h$U,@ebn8VA,9?FpR<)(krI>.5A$Mrn=KX+'#8gT9.o%S=7*(F6E8u\/Q@]2U_185'G:Zgg)a:2b+c`GgZu3'PGOa]@)!UMG
%jN#WKo3WOQAd>]/!oJ-S9=cYA("&aJ8^\0;4f@s46V^*@H3EeLC(?]t58^dj''`jFY)tu.N`i^Mi=t@n0j5C$6\*087c@aeX]I)h
%Y]Q@_](I#(+OOg$\r3!Z38fF;!RKIi>>S@P]YPPgF!6nBJ;(@iJ\K`Ho,]YOPrl2c=Ogl5%(8l4djMJk);1t$oCdM6]'W30/Mj0@
%@9P+l=YUjEXqkk!qPOo8GL4=ZGEeodT!0*8`=la@8)$ic!go8R#as*FN.`_g;]@%;7`e'?[&Ej:?1.o7gX_giB(`eRO[+\V($0N$
%dI\2mOJP*(#SHJJ0$Q@6[f:I\^$!s12u<n"o.4XXAQ97,eY1HPJP&juSWne-1k"XD`B57!@_%VX![eAY[fgXXQ\@[0W+!AQA0iLh
%JnAbL<u@470bfm?a4[Mq1-Vu'\.4\]jLQ_s:U;0*[YSu19O\C!phmML5\Lg'!G&u[MZ45W`72TQh_CNg(?[SES9^T69cYS.7_%U_
%35%Uk+.J9.#n+V=#2ijMocUCeTrh'EL5X_"WWU:MnV1X#Ne>eub;og@iMU]2CDkC3_o`r@oQ?XJHjWa8,;l'n:.U[6Qi#E[<Cok\
%PR:#8gKq(,r[&L,E'<tb?A2fXIiBBmTSK0$<O&!ErP`/)TUuSE\ug#^`66iuC4Nbr<(@4%3),A3iWo9Bpp@6(*TXIB#4Ot_l<pNP
%j^@4c&fV*4%DnfT0eh#-ZJal*ri2CQYG-h'!'Pl&,b;,T.XOg8ClqH>D#Q&cL"O%u;AIai83O7+4_s;LA"\ZOg@Ho\fL3*A#:n+I
%+B>ktZ7)J:a1mIrJs9/>5WLota^6?@[*dU(S]/#]+<%b>8tI$*/T39-a;ILa<t!Ar!!!pi8_WFKk_KkaT&[<8"h&_5KHSH0"*+d(
%Q\#pJ[X<6RpfH$9CRm\+_"I>PlZ\=[o/p5Yi3`ZCgG'K3!&SnZX?/o0*C09-!.?LDs/mJr#=--n`8L_RnHcpTN-%146ll=UJZ]].
%4lIn%5aVdQc!sEpW$1Q,,^G2+8Dm\teZpFq:1s)4io;Ek&3JL/Q"/MN!?Pme/"*jNjp\t"T./N-D=Op_"d0"u:H*m/D'S`h=#DUD
%5M'-I`Xq(f_Whj*L`dB_2cO!(6:M*l'iHcNju:EG+UXOfP2@.*IM/T(M.f#e4h_&\]L#M&__$pXR0WN3"-hs\*;&];+bUZI-n@_R
%I+D4>6R5Td>48unD%/P-YWO`_<t9bN*Vg#_Oc0unqdW%C*i*&T)RMT_T'KNa1hJH6*Q]YGp4-I4;2pXi/C"[Q00-\Y$(d:a.`(Tc
%\O__s7hi:Z"8Sd;E'd+,NBG_#.4#gY]bUs":aCPt`L\f8H:i@em4d;A=D*PP1,Y&"55^!;_s.Xg1urB-*KerJK#!P]/n^[&OLr[S
%S3.'31$Ok-:K0Mj>r8EKagU[u$m<laPfk=`MN/f>BQ]09(pD2.WT6D>/M7D8k@^h+<A_`2a>0rsV0F@jE?knJ7SVfPOJ7`"FY-Fb
%.V1qO>$#,RR]-A6Unt2^(8c-(agB%p0%>Lo[:C\LpM04kg]S<?41JBCfoo_$'3)Wr;fl_7\S>TK1>X*qZe#\td:OOOB.`8tPShP>
%[MO/k3Fe;bY_afCEaG.VLb7?*<Tk"%l/s*Mkb=!k:e4E4kRF@X>gb_]6.Nj0:tiqfL8IR;^16EuruaHXW0gTX4c%4eF,\C'R-lH5
%QjLf];VAp%6f1.]JZRQhgd[SlM6+1d$YV;JZ!JC0FUu1Of:2S=Md\q:3D0%Xa<m$.&?jquR[.Qb-kqfq;4Gpig@U!tCgJjM!u.HI
%kg^-Fa/q6?r(X3Y-S/qD=;WHfJjZrOJ>Ij.m$M#%h@+]#'::IY=q*T5'IbPqTqSB0!!K0mlC,\>:'thrZtdh%*jj8)9O<i,K<._t
%pg1_N$k0Gp*5hi<=TLO$ZcfP&o,8"<&`RaqR54Q>U.KeG/hPgn`eEqadq4QbR/1HaO9B%Ih'mT*1MH1%'(^ot+jmk\WIgN`kKgOr
%dWa'\g3/+N3O?E?S]-`;K!1n8ONnGk<o_50$V&CkVjF,/8^J2)8<n2toY*?)na0_k9eeE>?%"'ZJ3kFQK@E(^U/(VJ*PNSI95u1T
%<ujs'[(Vnambt3,Q9;g(5sG6/dr><R?e)pibCBFC:VZr)LOXXA`X2\5%tFTis%!c!rVAGa`K.-++0^rJ[6@PdTDlSis0LVQl%f+R
%*hNB$7>(Kpr;3Dlr)`pQ_uK;#VuP>>ra-arpM^']L;1.:mB<\ZD>9a<q:Dt:K)^?aB_s;*Cc"5NH-gchZ+(M0e"Fa'an1oaYQ]Xi
%aBJV"5Q)\tli/ot^HTU*nF%IuTDpi4r0KXW^\g=`]6Qh$c%\c3Rd3_eBY.tF)moW]/)clDEg.Z#D.lOsMdVGJ2DDr*(X4e)a@5"?
%fdQ0-p=`!BoA"q;kH,c'7,:mfqq*+F>?d.(mF:IPcLp,PIC7,V0AjPEL]@A"hrZR0-HN6>p!/<X%::">m7=-XkM`1K*f5G0d3SAX
%M,sZ=a:3*7k/%G/8#U57I=[/`HhK]'_]Sm,s7lOWrK"Xaj-'T!>Ha*W>\8nBP:qC?Nr&acS(PWVh/L%]^o'PUJqcFJ0g,Y[oY+'=
%+:AeU+muuOK5@7sc`U6#<s+q"*-[b]o)Or\CXXg$2R&rn/C2s,(q<j"Lp89ONJOk]@"!:=Y."WAL&j&8KK:1Ao6,+2kSOS9MD.H8
%_uQQVJGfm>8[:k?ji^laBXgn0K1Qcg$LD4Uh8huVR(3jJLM1LkQ:']5/Lg^X&IYu@#7;>FGt^^oP1bW)o[l^NdCsD"R<0d^D`$$0
%3qt0uT%t?c#X^L)3+qde'7F]6-rep'Su?;t#03)(T+eDZ#p2+/%=4\'!W*4N&sD*H[$K3DJmHJ&4fLoV(T%Mmk8u$]n/BjSJREUk
%0l=0N%.Gi\*iKcT/23q(%5YlgRS$O`[Z4J2r9+5Ar<43gX'O*2cep?PWr]1H$:pP!=IH>db,5'h7qf\P-FDu,N.DNYfUs^Q4CJ8&
%!eS_gkm+X?DdOI8)k*<RGG.UeXcnM<@&FTWB>O@XjCWqD?*VQOB.QH%Rq-E4$(2C\'Lkie_Zt#(fs+M@CF-,k?tl8FG),>5#0+=c
%X7Mg[pfA#oea-"`1_dpT__>e"7#2I&YEQr'3OIOd@W2fN9AjNimY(#k">M5a:aRsO4>^03?njIBe:*eufqA67oCkqU1e!p&8;8Gn
%fp"A*#1*Z<8[dB9irqdFY-/:H$63bNasObGj;l[iaAV`8<a].d)R)YM>Be_\?u34Q%dDEK2oq[LGle)%*u3OOq`u!M'"],QJD3K?
%-&<mH@`JX'X!s&U`S$r`9e;#);"S*A2ipM"5'6mPJ(,J4C.a>Rgm3`e(fPq\"0@s)3MdF,&#f8#?bgbcF$7/1NV/r+!4k14Dc.bn
%%_QI!-mM/*jnjQ;!Ie$/!7R?_Se'ET?$"Y7,Lf,NLl"J1PA9J%+G=t9)NI7<J=[:#?k/kH:RG`5$a"IW_9$A'ml4muR]*hc6SPYH
%[Vl\@MTIZg'9\<`3)gQ[o/,$e9PB,p*]_,R\0c]6&!Y3G"B0sGDf*Hr@7?u7_7DB6S,R$Z6Em>i3r*c4+]E`dKsVhH_hKm''.f/U
%<#U-/%="6>c_86QNFO]SX[/V8bVZ_,^c-,dR>;;IQ,0/(Td"VX=>%,&@6"V%l54lbRALRL)YGB_>']%rg>!il(%#Or'sV2,"N+Jl
%?j9]&B4LKI0!;6-hMa,):H>\<iF&5(fqKK_)`u35fX6ArbB@_mR.aPPH+B@Or!%=e(ir9uk;0Jn)drso#CV>ZCN+2#fJk:s_Y.GD
%FMJCn?3XV#[o6`==de4%ata9U7_sVooP=tQpG&Q@9q@_X,;9_[)gF]DXIQM^:_[fWO0-O<4NK2u+\/gMj8f?kpfku`UG1TY[.NQW
%()jdN5./s^itd<sTnm44qS>@6*7.eiICPfr:O8q3a,JH\3+!,HXn/oh4Au\BE0)U&\h1n58epO[<XbaDRE0c_[p.+Gc^\h#1iNM$
%BiVdIAM7Ip#IDrjLg><1gjmYf*1N:"ZGt*m$]M90''tP]Gp6[`jCC14Z8lEcjR]\ecFaW@mU=pf`es"2>j^H][aM!fgG>!n9][i[
%BRMu[f)(q3nI=.83qdMoa6d,k$0_X%?jDVVX@$U$0]5Fk4?VLL?e@4iD9@E4aP`s*<i![%Sm3lj-GX=MdfVM(`beq\*BGDjfYkV*
%B9Z3*)scJW_9T*d9A@=cn^pgnKmBi+(SI.7@EJ9s7rm)7%"U9fcdJ)L\3J$\LVOTNR0%Pio:"Z_K1QeM,uWY]0r_uI>8t(b)luH9
%9lN<a]`\H$=@DPt;BYC[Mo0:N3)?1n#q?\a+&kkh@*S)@qS()3d2184iG'X1S0s])N@B91Hj6<UOaSh9%7,cG8ResR&;'6UfVE(u
%qTBu5P)s(?7`sFLcfB9AY[Q9'GI(cgM%\);gKVV?1^p8H`gnhS(\B3=3.R,62$<RY@1\`%=?M.+!@VNCJD]p\*H8F"TpTL,f<X^4
%eoHEXI^L-"?4hU&>RE)Za*B%^Y#'UmbFFRWm>VtaQp#_0#lnB6F&[3+CHr)p#;qq0_%069e^hS9:9JZlS0[;n"$dVM#J^r1U)hmt
%2LcInR=$pqrmo<\(=>*0"f*'SZ"2E*j.#\T@a]TF@LKC]GFj<f#9L$Yg(?DWZ;0dccD2bG]]Ji?0[c/O^s)qA(QSZu%+lB!`q1\^
%dN:4,-(4N.;^6tO!(1MZV<5mUO@b*LhE4AK9/s7\Tn#`K"*PZfDBQ"^mg*SnD,@?GC*DCQKYG9/]9sPn+11j3/&kQGqDIHHRIgJF
%']N4B9H_EHSuDd6,ttR@b,:))g<l%cK$@\>?GhF4VMOn4rI1rDcTi4-,\aLOH%d34Jo(MO"b60EakMj(m6EESqfr_mEOZYR/;)5=
%,hcj%S8"oa2,P^G16TB7b8j'-2\[4u1ql1fnA`X^dP`Gs2^<EA)7pea6'EAQMcGAD!\R?klL=M'd1TYt#J5*4`UA(1'1!'0Y!)Z8
%QAG#f-p/3[h]F\!dfDdi+DM%&%/VqEgDr^;*Tcj`9L1[nVHjJIq:N%D8/T;cEg=:%B^Wm@dHt,2>\5@hap_Zm&,EN9-ob,H.b<9-
%EN)@2#Zr7#gd5p@LM7uqVpp1JY%(fd5WgL[i6[G\?7$cj\?RLM\eO\I^$gAcP1]@FRdPi6!!b<NHZEcKPl9Cq?DJ;_66<8c=8FA>
%>FQVOX`i7SNE>Bq/ArPH2Bd*m1"EFo2K5unHV8JU;b*!"*"J@J1;%0X/n(NNa?'oY)=_FJ%`?07^`dDqJ^o&"R0,lY?R28%['5-o
%=s[hn/I07)H*Y7r"1EN.dC)"8g<MctH,5S66jt/K(#CZ7JK/2'k/9"VL+4u;%)u+phnYmDL\2LI&`m>D#H21);2F"H4'SKo)2P;#
%7"Y@sS4%4q5`X$IBNLjK6<Hh]9j)kk(:-qq+Q++XM_Grs4Bdd>[k]^5bW?O\(MoW=7pOB%IL(+IQ&uk@'l(8Qko0niOIEdEh534V
%BN%`Y/;-ks&YGEp)sLs1SeUG$?@srPYXmP(=LnMpE:JdQJ6ho7]QKu?H"_6mD3#iA)qfpfOSBS)X;[;2iA20=>n8PEhM3OncZJ[q
%[Sj_:)@3kVkPS%0ea2'S1p/!'&4VBP[0^Wl[bk3V7hulu'lnELbW9c%ji_2cCr(?KCEICc`(dV+f`V[qANV7NoU9T3&96erA9:8&
%B&(&_=&;T.SBa>([\h;3ph5<5Il+u7nHA4^]FndqSkUOh888;<I\7oB12%B1'C6Bd_C[<K]i.\6R0)4Xnh((90a0^o5*:pFmpL=A
%BCKr!O-\aFXfe#^Gh&!SW?afPmD+0d;qY?ipJ]^cSj&fuhoZAON=K,JXputIE4MVU?sqq]9$&O0XnDj.Fa2mjFA(AG2QJ\JV\65B
%2?S#gkU,j/oO[7sS[T^A%im/YTR9][)L:I'2r')`._(=_.dl@,^Ot!j*1T,JPN/YRf3;dR/\g:gW8QiH#'6f)]e!:!Y[+4$2MD-W
%F\*rGSJ"I7jl0TK);$_FYi[7!E!66Y_Tl'@jXnk*%e(V):8g#1flm^l#4JDbJ.L\dga5BDO::r@Ius;5o*FI33YOTWfL,'F&0Mp3
%6pmH&#2\M9E+2CikSh0]%**%c*(*l$DXihMZ-92TlL5?M>$O](@hGg-"h+ma,IHNnd0Rdj2dspeqkO!G_6!^a=cDe(Yp34rq@^#"
%,S'%VcngM%`u34mAO;GMgq6*"MH076!&F=3Xk[S]3/We$o-VV^V2P*5\lT"#%"15pe]rQ;D$@\=Bf&DOglA8XA-7]F]%82d>B/@1
%8e]1H]?\B>YF;SB.;ORW)i8su3H,/cj!83o%YHo3&clr2n2P*3]m"\`[#qmLB\t&R1bF`U*c4'hr5GBA+VH:J@((C1+0,H3Em2L0
%,T'ZOb`*6#!)bLC!iX3iN4OR?V9#8c_48Yk#"fM$_L@1>?'-oGS.Bj0m2BqF+3jQ4S5!]he-X4?eIRYj*g4On1"B.!M$)S4=DOF4
%Gg<;7TT3'Z_[:m;!TU'Cfa0M(_qs;4"==R!&L&Ui"SV)gAafad]3k[LQmm^=Q*tRHZ3A;]:sZSP:Hq.<&W0WUMHLTVbSJOYS\/]2
%.k!dg&1G),d#0V1Sn?a\S/W9EXWd5VG1m3"/[jOeI5::pK(%7OcR]Z_%<8r[F&8WIH1XZY#,KpC=,6D3D*oFN!gNmQn3dND9*Y*q
%"o;\]R=u(ja?@.;Gpe1TJ=4F<i2Xr,=.4k*+jBG#'p#$i/t$Yb&<^Ko2J4@B0fF*]%.krP,<4d,\PaS4:+=^Y"U&.r9%ta<-u*d_
%"5"Vp?8rA4VuRWB=2E"5\-Ds&@"N8CR(ct2cN,sLBOEW]ag,at^b&<kqjO!\=O9Im=P,V;-+*R(:*cqo%$(C;'[mIf7Nm@27gU0b
%7/.90r?mTHKM)\!>HY*O0'goS;Z']>^sGm&EX@baTr4R)&+trAB>D'[5qiGO+Q*Uf+MfA,B&^hM4^/G14ci52TG\[c&;!Pl'.-m_
%dXppnrh+N?;L^#QhsM)QYCcusE=nR&ia9LQaFT8e1N8h\Td)mBOt]!,)96?dMZjG01$JiO#8"$c&.j-j4^r!BOILfpC33407e)Fk
%Zad](i%ORg:_kR48.;"O7ki[5125]^<&^CldiF(QLD-IqCh4:O.=%=Nbfn=j?],.R,jsF7:G`G(Lelf_[i%UuR':Q2j'lO].?"m=
%76ek\2s<)hKJ`%G$o>u5nkl-["L'".([h)*i"YO+`^6HS!o133Ph%O=l]-BS(_AKA8*Pr4+JBSYBZ/#HoY?#*k0Sk;@@/Si*!oO>
%^g<FAYNdY*LQ.Ju?\dHsOf&Z"8Q4")oT3J5RAojs&+uo-kUe5abg_2UfD3=,[r-eOf[M_0rlS>.RTUdEdONoo-2l\>LJNRO$;!b$
%JJ\QSW)N+SH374d)^J;ikFI"&2LNlI2_+7\`auV9<lYGp48ZMC/$H^%W<&a^o/R7VTRj-o8<Y&**jO&t]@mPZBN69U3'FXmCo`iW
%TD>=-4&aq-Ao_X]9$]SIa9h<Kddu=sLUQWNOin?M)TXido(WSX^5q5K$/td@BRX?6YH]O5GIE?Q'VE]c"+EN3+lMc/9r0bPf)^/$
%J&_1=]pnl7p.SK!fr:5WJY0e`)m)Ye3]0h]Jo721Rn.kjc?a*gn7q'*<3LH\!+5'$4UYD<543(Ben5$_PErSZ(gZsMVg2,nLbFE'
%5T53DM2NBOj;UC*3b&7N)?b9(,d1fT"TOc\pPY?K*qEpK[%GgVS,d'\etMc`DA[3PC0[re)Y/ju6\Td^W@%(hiK(VgO;eqgprm!M
%kB#'b2X@-LIh)#k5b6P8V6puqSP)somN0L`TMNi!#[&M7'.M$II;1&7KR*Dng/+38riCm`*j90.7eLLDTrG->/WW5])Kn=P2a7Ye
%;4J"7n[tc2M;88W=XlsF3o$BNEh3Q">\\pLG'aKAQeHZ.C]sd(hV)YS(UdqM'Sk/HS0/6JGNe\G2@MHa3NcFG%ER+@e'h,-!Id6B
%2j]\(l"l4je!K]S:2B?HbnW]:%r1DX).X=)\T@trT,q1qc.:+!^i/HhV_MGH%s]s.JGms+SFDPZS9JX0ZupXOF#gC)3t3kDcZ.F_
%J-0uHT>/E\.*C73F"$&6T$M*R4M]0@P6c4HT:RR8e08:U66^EeWZFdL_Om:M&bms:)k<5Uo/eg^#USfUl!$o-`u]P^ejEZ.=#63'
%HF;3%I)%,[h60$P5W,/M'u$;pgRO!%VM('5G2qaKXXL1f#u2ZG0UDNH1*'.RZgl6D6%/)@6@u^*G0Oh+s-DNqBE>YH:<b'Gh)Ki+
%#sqpCLXni)@AoU;EP:@G?qfi;:W**8PP<PqNN%S@'09OaT#l]6cFnltY6?W]9OChO?p=O6#t-c[:aKg">R(8?g(_CaB9*RQc&GH]
%*5E%%ALQJo@6PfgdnY4oi;8<(DMQM!!@D5[6Lkuo6Sn6g^fM\D>?G+b+nh1X(ekN+-W5aKOTC+W/A,\je<"_Y)6=&.,WZ-)=:YQq
%!uMC_"/FV<`#s6!a-fQ&^iC/\;OA2.KH+66_)NtCYXH0Q#1[u.r]EH%*WntEd&*.[e0Ec628&Sh!dh>pDf:f]-R4VsMj\t8=(UqO
%Irm$0Xji2ElGf&P!stQnLTuku]md]Y^ERq6-"_o#AO+'obMS-^Sfa=g2CTRC9gRHC!'7YH[m.PnIH9bIc]&hTUOkmXVj;KOrutM>
%6q$T038[N6AH4YPrTW`Gpu9l*dkdo9D_57Sn[5MBAq_74Un2sZ%Ndf:!3l:(DkWdcLJPA(#@9fl0VEFX)44MVpCoa@d;p7>"k!B"
%^f5a+kltaR5M.;NBQ>UqEX7mh@%eP4]eU<Ph.*#VFXS.==c/L*.^,oamgn/Y33R/rFtfPla`U;D3tT<Mcr]8?8KmW;e@5_o7G<Wa
%LVGjHc#1D#pa%]V1#8CC",<Pd\17tUl1mVV#&`mM)n86j_M"+^\IR>AmlAU]"!ob/b]j(0K=os!L^'6VJ-R!:lpiAH<%(CO8sQ(k
%0J\AWcHOMbhC\Vc9j5"mck)RC1@XVNFcae8hhs\#q6_$,Lo&THi.![/5WRC",>A4nTaJ]=NZC]h#ic2X9B.ki`m(8.0,_<;0oU]P
%&lk3$@+<L.ccuOE!CHXYg+NQ)m]CCmZ=L-Ej8"JLmL\:F*jo@Bh/g5"AO[`#m\"4IR!V:V.rf6Y=?opAak`R_&>0_LB)hu\',*cc
%eC+`3ajf+iZ&:4j0Bfa@6=slkm8$>Wb`^;B#$X0c[g^e#m,nd2BYY'ue^oj8Nb_D9!gO?/?%"Y:G=eRK7!:hGGa6JfIu2p5a\FV^
%a,ZZHA^&Jme['i+nq0UoQ.<EWgN,N)dI-m-j4=:=ci#B20G+LA9PpiKqUjqE9`CMK;4`t'69&oY28ioR&I+CY2l)<o?`'2RCr1jc
%a,,rd8A&%AZGL_cRn8:":VY(/Y&N1c#^kPbb#RTc#\,$n=[o-irI@M)9&Z6q;I*8`dCNZ-Vo,oi;EjHCXcEnS-_bH];Q\[ZDI]Pe
%in$!Ek=iC62<&g=g@M8E0X:liLk_#ITF.N\OUAF?6m;Wi'f%JA6p5";L>]WA1R#MuXCn`jrT$.g'9Ihsjmg;i8/P!]I.o\K(HFl&
%fl7M=iNn/maN.UHACmj<D<%0UgE.l+ZA=j,I]h.Cn!\"^jddHE\FZK>g:F^F@`==1'K#I='<`VnP$>-k=@h`-Spl1Am\`.,>WB14
%dMI*IZ0?m$JXDL=GT-OR^o^kW=1j;;GuDD91)J%#m@t9e4r5QCf*-?Rm-"59&5HBB]\hOf_G$d$.Jl?(k':W7M]M),oanotN(AI[
%]iRPqep2=(Qq>asF4opC\o"as)"fDhjL:"gVjTu0I?DeBeF0];4l.jC$3,<[22'=0WEjLPB@kY)R[>N7k\:)dMln($0Am&Sa277A
%k%q>`+b7SoS*TM!8<Qhe#4,2TkJJ8'4+Q#E$3HQ_Mgc7L.i<YR2@V&!I_Yr^jDdb^)U\@C`&6QGGsGtX*hN<m>kN7RR(mc2+D3$r
%@Epb6jmm]-+V5HbA7#/$fMQj&7cI!s4m1=obVEfEJW#rHYKeJhXCTjo'62ja>AXY%eP(CXiF14m+KU:UUhA/lLk>R6Lp.gFieG8-
%/u[Ftj`9uF.)4%&i.kB<3Zn8g(Z1j9Uq^'XKaPl;%)mJ!m@puUHj1$3g=)(j7e_#up+^^ari;9%*77N*LSOWW0AfkDSFf]j]H=M.
%,8:Z7)Xlc,IiIJg-c8C5$X^JNrC1c#U-M@*5_as!0_lpr:N%pdW'HJ`ZlN_S@CkBDW+`$GBdXZDdN?[*:9WQChD[/PA3]kRG[?V'
%i6Lr^4R].0n!g0QSQJp'Yrrcnb/oNf+T<AhFU)d?\_\nfFjHD/n\_ZG/o^EQmG6IPG:;#?c'FthGE/Zh'n5j4O315Xm`__.rs57@
%%5dZ$gB=_b/1#^"#/&<f_a1qC9VCKJdW6id0`N^uaH9V#X9&$3XLqu_G*88nGZPiN=YgTi%ejiN?46+GJtEN#mHG9:O_\E(]fCC-
%<=KCK?=rFG:!E#1RA1IqSrkIu&0V-;Al^RA0KSFmgGLENR)P5$\JD#[9mIB3&k_6oN29^Jk%*Y@^,5CC^M"np5(l\%F"5&ORGJ"Z
%LuHVdAAVpsR*utJrZPoe:HPj:m4:cbl?0S\%#9:t)k%Y:-r-kLll5W^S6BH6I6)<*R!NN+F[V,&637&6\(].N;C'bCrOF0\<_u42
%kds7QgQ3h&kEM>*jr[0U8q:ms_LeZST7/XZRUB!bcDa05SYu&pNiAol?A\3s`j3cP4l\mjS_8HIc8RjshOX9:2E2ce(Z1eRd>KK-
%`h%#JnA6)"B5D?Rh(bj6$cgcKAm6Z;f^<SAcF3.WlVE4Oh8#,(N/_*IP,.*"K`)<45e^*fcDaZ;`M`;CNiAol?H`&%<8@;uT(Y8+
%qd,^@/9'RnpjO`P0*52o?92o3PLpLgK2Dt[Tb*4q::97*p$&"#*ll\W:CS9V:[c%2gHs'1M`_i#[e6]+Xb*e34$)]Q[Vj9s:dmPn
%pS_m?KKC!0;kM@78`;R'k:IZP:G'5F][`:Oq9HKVJT7CS<k1R,IPZ@%UXIn@k?HgR1-g+$L;"d^M5?0&'c,F9eQ7AYF$(nqDuqB-
%\>(cp4$P/*/XG?->tfh@FP-#Z(uOfW(#u<$'8]amB`o#A[-P!S6cC++MK0ii4h:9&mL8S*W:he[=CC>Zo-gWDqL-o^c26mjDWo:1
%*j7P_VmT53?9$dJ7guX&ob"SLSidoF2)`g*ds]d59tPf]&!TR@.Neq8iQpe5@HFbRqK,J$?DQcrMGjo'e5HaYkCI)%hYi1WKc:f(
%jN<CTir+bJ?a5*V%r+Hg7:^lXNY3kD_fI"cSIs=\mm2E%h>>7B;Zj5!(ncO_/tYV8gtC9Q@9Y`lAYHZ@XZP:KWC8$`ABlTaD6/[$
%EFF20p$&!8<E]+]]S0k\WJ+D_>k*jLGt!!/hm&3V--#U.+b%S/h1f(t*8T>p9#n`Ia!^0$3Rs<(4Irs#9KffQ>4P^>$n.fpB3VRU
%[Kc%DhRV3UK53p*'MdPXDkTkc$rbiGaH`>MWO/3C<m*n5gl+SMW?WAJQ@Wk7hKb(0@/A#7"f]_mGKl\Bpg&An;)@KdO,&.)q(\<:
%H1kMk]i1P)#Iaq6_sldu`qrqr?P/>6^8S1Z&5VC\d_5o"G!t3Q+$/fT-\h3p-[e]SE(l#XU!0S_gJ1-i3!;h_b&4<AU*l/HU:c[1
%--cBUS)<2SdY[$ljGSA"^dOdJMN>0BIeH2X]i/9>caF(&A+I&\8,5ct,DRQ-`XRu!1kl\t4N[?XEMMP+VjE,t4!-QLg=?iResN.O
%mJR;T=&.o`,^)seG'^5SQCQ]4>:7keLn%>MX`pnL]taI0mZ?d][lq5CR5]=IfKZ3B&s,'B7ka)sP9(BA02nR3E]L.Oq=>nTp?](X
%$'*1XaCYiYa=6LIP^A!3\t#_20_NuO3JlXAG8AN]k^afdqrSTNI.ghn\\,=2\35'T`n&qqG[F2%6FQD[VSrM0jK7+irBg<T-`&5J
%GM>49pJb>sD9pn#<IbCbF],a$:*`%Q]dbW5p)pdr9eiR.p*>+=hd'1pULr)hX1A3Hk%n\fFcrA]e\UXhdkJ5mY/^?r,q2;'TAom#
%`(<NmqgC[XhlRke9X/-jPUNAgXrJ@f!UC@rRW1+OKI<+"-bRX+>^-6Je1O3qd02BV+21"<8:H,#(3qT&2j1eI'GA,i7u1MJeiVD@
%6iV4?T1W$/&j2O3ZaZ97qG=@+kfkNuR6FV.i9fLUT5L77__/cQ!W"j*FpH^S;-1X&Vm@/!WF#`'qS!djUj]M=n^AG41[8!=D#$.B
%P!Ok!:]B02r24$Fro>E>Ac@^./K1pqBMgOB+6:Ul`MlX7[gbY=T$CP"VOgt9/_2jS&3Q9uIS//r2/g.gEqiL7?a5Oh1HroBkPN`e
%I$'+(?TMse:al7U\<[G61O>mr9mUYI'c6_0SJO/`2VHQ)$Tj4A\m9<iXX[TnR:uh?)3q`*&ZhJgq(*r9DL]&r2=_/Vp,mHWg4HtM
%do%\P#qj$)(S/ZrHG'ScPp)?t^t!rQd\K+]M?<*G%B(;L5f17XV>,.o+7YkUU8$1js)"XscQf)5U>R>\n?MJ\O^)E]kk2P,,o7!6
%[;sFbkE3SN`C19[PFS4-UE8$?WGqI\LOF?^bO<21f1s&jABfLt2Kslh[\`)o56hPaW&m]BWI[FrCZC)#aU5GiR$6uO\t=I9gr^Wb
%r7eiVIgqq;[ha!ZX,=7^hfU+*r)JH@o@F[sp(GY2:IK[9A<I3Udr87gD02JK`cT!jnW)3c^9XCfat)&Z3ajJY`:eRJ2-rG??.H0/
%p"G0lZ*a@X_KIb*T1JG?mdu%Kdt=Sf(Mh\_G9X0XinYV4$Br/=0"J`1pYA9tGIJ'R*]smLC[PrMYN;@X#o,)Y-d:EdmpeMmcWegH
%/YmIcnrIET2bb@$k^PK`3i^XpR"Xta;0O0Gg+c#*8:\*Ak_0RJenN>SlJZE^<04ou]0"8bH.8]]+CgHfD]e\^J-HtWK?iN\J8>2C
%M<$8fZ@<FO&CXWmqV=>a8DN&df,%>GQ$fKuGha`5cI0gb;P];"YN[Su3Ar8o)R;rkYpVbe25hiSW4e7>1$15`ffdEM/F$BANsBnm
%),K6!+c%X:Np#Ao:OddF21PKi,EFhLD/LAA5,WSa7Q.N=Iid6$E473.,,`E;8FLqF(#d'B#E'#nTZ0oO4-G)[n"-IKK3N``G]WBe
%@EJDmMW3uIFjD/aNFB5;4kSA,:7@%THTZK"STE<O3;XLP-c&^0Qp3Q'rPWZ(A<sgP>AS1P.4,s`Q-;''KJ+#i:!E'&@6C6#=iJ;:
%6ea_fg>RQ8St3>HC4QZm,hbaRBepQ&Qt_ZDOcbF`X^7Pu<7IToP=LB#F@hpR!mrRY66s)-'++YA&##.ukh`shd!/$c,8A0Fq(-9,
%ZnZ`\8A0pZB6-[Bo;H]$=<mpsQtt;&mD(<[+(NmJSaQY=E14+m='SJf]8PC02n1,J+I>BZhcSGMYn?B+kiCJAKuI_/Bj:bWaA4''
%f#[%#<A/L-CMcl,=8gZ<7EpdbGJ1E^BY;'OIFUpXeD\rkmD3WJ>@X!eI5P>6*m6[Lde':+R7fb6HsH6b.&ZqQbpu"5S0+,"rl^.(
%p7;WYZ>Ige+#/L*LcpQ7]S.Z'"ILb3km,PhBTL.B#uLk)9+jXDV+n&S181L0-o7$,'OkcN8<k<4>;qf7p.^.\Bi[[mH($Go<C/,$
%m"s8<RogU>$$&t.=-[HV(leuM'*ADGUts-)n(MbqJYXE^%dsm,"I>n:\m:ue?'"%kcP',[U#`1BM\en@;nGqo!G!s+S$Gj;A"@HR
%-^=Ir[jVeaqkU)nP`c-Z[r"a:KUUOJT]VsU)pI#*Z<)$KYhMG)O!2'`mLjlN)\\*CoaY!A4s'Fn]j%Jj*0mtc(,Du)BIAk_[I:Y[
%8^FD@V_<O5a_h!0bHZt5=`Uc:0dnhSZ"%5.!c,JqMZc0D_XRlEc9t;VA(6V5M`1Le4U_&cli`74Ylt4GO`TPH="[kW*.r<QLTNX[
%YK#@6bN<]rHfX+[h&@f!VkTDR*2H'9Kcp)`Z4KhuI*d0o8Qs)\G42m-ajWNbfM37r&^a!cgU3m?3#t\^4ol+BVkk4RZ3E]q)/@[@
%l(,X[`>00<YL-UT8Ub84)Yg?2D41qd9#IIfK?=/'(:Nt!#(6jc2[0DUfQfck<!/7Oa^g5^%XrA*YPQ%_IaH]!&KMD\@#b_/np&<4
%FZZ_5#p&>H>cI:97uYl,Yb"O+Wr?b6[eV)boZUid[NeIHCN_U$R56kq5JW\@F$i6LXrX"_Yr2nC`nZCak=-c-37r',*@.@c(ZNVa
%KI`F.(6bt)d2]&Jc,ebpC#ajj<>B\"e.fWJT[a(3H`Nj+8=,YpF1&"/FstnW#dof**,H1gH`LPY36+0S^pOJd.dKOFdq3_;qRZSJ
%'ltSW(/n)skSi4=_Sc+J(uAXfMofS#Kru'/D+_9W9qH"9g4e`<[1lid4jP]XUMsNc$uI9QB+\P]qZm"e1k_T`Lcpg+A=;2njJ"OX
%?30U5R/Y:ij+%[JeHB*XAO>'__D$!&%S:Cr$b"$PYlZGCCqdD63VD1j-=V/44%o.oD)2@gfr-pX!=4t!6YjB(^[4_KQSQm_Fj#2D
%23\!uCr1Uhi"1kQ5I`Nj<PT_W-^2tQUS(\MgV.*C,Z`LEQ8BW%[SR&!0_/\WgG=F[,Tme*os4[j$OId`1,0dr#.?m7$qaF=gnn7g
%Ho895f>&nlRGd>8-/**]]u^:=cA$&WnF;+id?/?)h0'ZD&J.+)=+R9bF=1;+N.Z1*ekZUZ^O'J"dS)QN0@/'YHSS8TgESSk@KJij
%0ud7Og-skGR'OPE5I_\UU1W9/RHVmuADM,LlnOu7A=;bK_/a^V$6g^^G`J(6*biPQ?tSarc-H-j@neiH?oS&TCRrIShh^[d_<T\]
%MlgWHr'hQWZ5lZXp'L+:U^NFYfGL=(F:ZSMB_tQV"@9F#o=)6^[nEG!bLsG$OOuhL_%Vs`LQluRRg'K`g3Bke9lS1cUVc8G6$)fu
%l*G(bC7.FZT[,YJ2YP"g"_V6>4_!d]"[Rke"!V@`X7R_dfF_Nsk`AmjQ9':T`cE:NB:X*942*('[V4X"p:qr(AZ/'D^MB<J1B!mU
%ZX\?d=CgT=D%Cda3d?h"!51&t-uL20%s=b"NVB42MR:W9p[/,I,jCb;cG;_JRNTmlXQqSS5_sJn!T=8G1(1E],e'B77BduU84NfG
%@Ni2A_R/h9>qbNt0d^X*)KpE:N>n\p1Pi.hiuE/\XkW:7LNr.8lp(A:^0%7b`I)+E+X'SMZjQI-LN&+W6NX8fCsFq\f!]%I$(db3
%*I>3J+D0#1$H=')jo;%[m<U=Xf"`%%eX?CKhFOQ<STPIk5Cnl(\5igM8F42_CHU"@Q9ggI,`4GIF:jdq[7U]M!?]rWB<3[oc^\OG
%D#:6P[`MKkm0Ah\V6kK-B\]:ACR7q-/.g?ZC\=\I3kUXWGGi6Uc&A`?Y_mQ.k&>ZGEI=g\ejf>+,,)(%<]D"o8Z%rtT@mO56e@+\
%i(+o\?*Q0>LV2>8G>42=dtGI:atQ8'1/_Sup;e>!8WV=2>r,mJ>c;K9B?$`_`]d,<NZB=$3BW%+qB_R1a#^nk9=/0.GdLaO(E5b9
%!Ea=\^t<$:alEt/(n!OZK)!:-Rg!;mKpn<nGaB^ADr73QcnmolY6Rh5*p[\Sh&Y>0rfX&*I!FoeGf)6L3FXmJr9/rRff=hr8H))3
%*5/:E:e25k<J6!hesnHQ@l_-.gZk>XN%r+=6K-ZQiugX(]jAZpLQkpiACs)&5s$?T5E1a+4[;XK\br_83k;\]A]c:,\@d<d8nok'
%FB"Y6A)K(4)4#6oI3D/N<lTtd.U6WGENnGh*Tj(*DS/^O4fT?N:[QGOb1'3lnYn4i)A/XZk\?N;95O8N=WV!ur,XUO9.pMD-%Tf'
%O=hQm9#n*eY`Ds:Z,Rca?VYdo#AWtF6,"8;$]GZ9[I:81?f_T`#`f(I3fp@fYA<a<LP+:PFWtePmSF)DP_M9]Jbo""Zup#,k(O3C
%U9Q]NmTJ&%R7G)lG5"Z?;LKaGRKc;4!$"_k#+UjS('75H0iOmbF4*U<<-"24kfT$MWf6^2MiHu#U[;QT2g(TKMJ'/YTi*[;.B@a\
%Os2%ke1+Xfk5]mig^rU-I%2H!]L]'QL&;jBcleTo,aQOsH6^in6Q^ph!_-`H=0O\_e2lU^!\/@8K!%-8StNG;de7-SdW7mnPraNW
%LI4"r-V&,j4/BVB0q2pk;=,unCb8?#Ohl.4",luP$4i=&^bJ$B\o9rh/BS89qQ/;/3`u<h2`g9U:\KgRA/.7V(6s*(W4WC5oibG-
%O`Z89HU[=]gncQ@ZFd`(i/S(PkdIinZ6R_hL=ErAZlkV[,-H5$+9F#$.E--d)?+hpSm2$+N,ZM8*Hu'31LdJ(cf&kR7s$tglrN15
%aNtga`aW,GJL#I<4`,S_.=#N.rE)(M,jmn2$KDV_3Hl@6+lT7G6(f-Q@`;HNa@NWHs/]'t1(e_&NAC%ScE!seaXJpfj=HE4N2jFB
%!S`O6&e_#-5>PYsmA!Q@1(p]gG`>kXheAk.+Ms&=nQ(OQoQ"5!D&(ZLifffdXK0phr,P6ZDFS#g"0]74-,MW(h0&uiFESkPq%)-k
%!EZ0:#KY-G>Z2^0L.tZ.20j1b*nXFsZGa#.P&uSIgGr3+Ynki>'(ckE.^u2/7kL$#_')^fc9Q7N\!n2tauh;\Rnp=f,U4p?/0Vll
%[!NT9ICgGbRR6-/%?k0n#q)ZEWN4&,K$9h]I3aFR)+W)6j,uH*R&U&lBdLmPnV,`\g[=WlfpSoop4Nl"&I:-TYM/:Gg,N,,&lKZB
%<4q@>%J13R>8DNpj,1jfr1U01PIQdF3M.U-\1D2aA'38JfTU\W5Far?-)BM,"_k&PW.I-&BkZNdM1^R^P\-6[K/$oo:8X8S\N6I'
%*#btb=9t0<m/c@c0g?M34,(2>\kAgBq;SUukG+-d,B*JGSf!ET7Vh?QnK/$1Ld#ba/.XKE].9:;%)$JgZr<'qgr1Ei1BA1&\BF;#
%gCVBmegu-"W$Ib12Ro68m(o)q)WD3T0b\icBl(p?3#iA%jELqZdA.(a$:@/HW["ab3g7W'G5_]XgZn%DE]f:%]^4WMlEdB@bBque
%7X)`fCcCno6<ig"7LMYKB;NNE7GDcd@OeM`kb]HpTW*7lgX(H/n;r;)aVIdr#B`M!WI7n*M!IehIj*",(]B'0SJhp4^Y..&O@A&;
%keoQ!2=NmpP*UliF"V)IMXmls4F=5-8jm`'(H1EQAa_Pjd8>3El@:.#h7o$*_/DnM+')4T0SXFYg/prq"\TdNGfDZ0A8JjWOD?P+
%%<7PDnZbH.-:Ep7PtA*+X$kAJ+`CE`3kP4YW*NoBd0)0$\I,%iURl7b&i=HI0UA4I6m'4`5H$e8!DhoHV(q/5Meh"#:J67]"SS'm
%2o'@]&D21C]hbF7bNUk0Snl'Li0c-F@^nBheE&XW0U?8D>.6\<Ic2diYgKCQiN"#Gf4hMR/(YN;=7jRCI.Z41?I)8_7rhDJL])jE
%O[kq8;iC.rZc.uO:a'6\H<QRcGQdcboT<[:*h.Y<AdLN\YBkFTmP3-&q/Q5a#1_q$D]D^R+q<\Y%DoGhI;!`.BD4C$B[(XCDZ=^J
%@.VD0L(X7S1V7b0O#"/0:-$qGfd],[p5LhmmE=T0GBs)"SjiXIlTTg2R3<Q=E0,Vib#[72;;$=ogXOaU(k8e=$.AIqOb'KfpJmr_
%+irO[ALc[dLC:W@:nu$"ngeOlI55NiFSm(IDB_H2Z!I&lS4Vj6US.r/L1U#&e#f@<6M#$:@fjc.[MO1J$=L4tGS0<#Ni>S,84'!m
%/03C"BG<;^\"F/Z2IQofj@9-',\3)+!%)WiN%M)6QU1tg<Pgf/1*$d-Ro&jbDbUT8=*+E3[Q^drZUpgF8D*D9a`aV55;-e[ol[0h
%MA@d<+gS8d28h55ULKe2dSCE?Z"2PsB,WUtSD@9!clZSo5pQu:I(-9M'R^IbQ?$Jhf^peGa[;Y`XGuj.\H4/a@No`a4/Gk+[4r*3
%i#`KMqu5/!7,&nclmg(dBY&$>eS$F5UTWZDY1Gn(SVWuKg`j*m009cRN.gdW^bb;6KEVZ/D"mB1f>N@eTUK)p7+WR&Q6C)*dUXCT
%AhfWE9$7aiX=;EZ(14p:lnU'.--Wsn"c78n?t!M+XkibAM1,%c&dR!fKdP9q`SbXGs1qO[o^*55cTR3V\-$7uGIN/?V<j/=@E(LP
%)F+\,Ck&\!Z$$s14(qf.F7`lspF2smO5YU'5k]I.+O%@B)K7Zan0UUf\1C9$D[9K@L3fYNF-0nH]qD,fkO6sj4un$V^J**^^O5q4
%-.V7:YU^\A!W8n#TC\472"N=@iUVb7orBgZGfqYUgfq%&(4uuUQpl:aCYtui?$C_)<]RhRqP)J@?%UTI;.s?mC.6/IV2u<Ks#H%<
%S?QH]-4L;;(-rb7[H`)43\05"N:(-"\*/#T"4.`PbPV"Qga$)#$4lAiU3CGdQ?$*SR\In/@`9c4/OVocL&YXr'Okn\P0A5iB*m)Q
%5_W<tYm=eD$>hJ-gl#'r0*[o4?9M,a/<WD'!;R2Y0FggP])]mA\OufAmarn_6;Rf=2,MrZ&AZS%r$M#^Q5.3_?;.clpJ7+(@!P/"
%cV-j/#XaJbTV+K\6X%'JUQR.`=-pfXLR5oBW.MM=18L'B'!8p5DQ*1L9_7GUK!F_`_[g^k%':DHnn-J71.;C[l!mHe*2@$b!_5C'
%_/7&CK(DP#Kt:&(P9bsX8\&5ED>=bDl#[4daBeo(ej=&!W9H"M@X%gOHar$RUt<Dr_&'J>J;0m[5pZWFP1'"b>tIBA@H@S#rFId]
%5pW52GWeta7iL'g3>BQ]#Pi2DX^3!<Q__j,'Q07%`+RJ73*?m?hf(d6jNul`cTo$!0J,4AFiVb$&sq[b5Y/eom;?0K2c6%[?-u[q
%&I.aAX>9C/Ah2FVJ=,]b=:_8t,4l0h9d^)CA;=X*i+D:Pi*hBlVq=&k(iKR]_Y%#L]cQ(VBOP5@3=WWVHBFt4?.(JT,u=VmRWJ^a
%`8i+[5AIpoYXL>c@H\>-Cul5o5d6skbG-P#B]8@^3e@hF`tOMLBhQo!f^ub)T:<a%j\Q7q'ksOFEJeoE9U=9fftB(EVrsWgh71F)
%V&c]>)fA3iE.RO^e-/EscXR6BQ)-!i.IRU<Ip#jp4Foc6UAAV%]"2`Zief#p#hUid]?Tg,g"*='=-Zb=i412PQ-`]ehfQ1cBo=Qu
%L9j.0"GYhi'tTo]M_E/j?uN_$2qZVI<_[OD_Y9Z#/rn>505%^\fek$6"*%%5N]oR-/::'&>"dOWSYsN02<X+B^d55l4^i095Hc5]
%;X'**963fT?%YrhCL&'riK<t-YoA=2WD%3J08AEiL(]8"_"fs.]bEUUV*&L\eh*7a4)aY,f/WBa6n^4\3H<?-iuBHQcX3Unr8L<\
%1&@]o_Z<Y0CVbt;s0[e:JhH@/d.7RqC4FkrU]AT"N\k%n>YKtQbVXOB8N1>cA4B7DmJ2t!-+G$*VK6(ZG])_!pEa66q!K@KWCRuD
%h#np.R!$uuplnrpGFs2h#m-IHrf]pX+C<EWGQ><,HY@8VQ=@MO%VuV2VZMYo2\mPSUpb5j,u=9)d'uc"fqdFP%Fpjn$kGlT#K2>%
%0Pljq0Q:J0dj(/;d@cO's4&-3d3/\R']DF[;fPo-CiT_ukQZS^ZDO4Xm)CkQ5r1LU+Ukj=of*t._lH4f4rVImdL"a#hH@N;2)P'j
%cS"n41G<$0n0\_\U4;YC(_cq[5$7jL^]*3ds0OPu?jFu=j&_bcDt[>&e?[Rn]2Ce%4p@K+Zt47Ha,2+g"HE?-6lsSI_7CVi?Wr=7
%i$uUgUm60A<?8^3@<-5!;A27R[p&ZpM(8R4LQVinH,H=3WD_T^,upAU#Zj>cb=#DFSP&B;&l/f&AemWgC#&?M3$;i$_Q/3W?IQba
%J=;&I57C8=fD0`Y5H./$pPncek#=G$9StCh!7Be/<10li&F*1hX6q[9-EF"6,S<?GEQr')pPFFS)9.f(+b1hA:ZsEq;qer'N%qJZ
%WSQc(7_3PG$M>/3N]nha\b05/,_N3S0db_-0^=N<]!.umk68ZC(,pjlKeAE?S9;X_TI@PTs&9PeB*c;(R(VDYNfGlpS/5_)_l7*%
%R'XK3=U`jiGauTSh*);KMUh)3^?%e7%uQ]G),;*Pj<YsM-da/i:F:R)_Ku@l6P4F5@3Km-(M.jL(m>7/P6M$&@OgB2EY%a)_f,*H
%,Ak([q-`j9YL1t6;#p^cK0O?Zc;G8nL`N;?BtL,rX0ke6YHCJ2cBhgVB$_4)H[(f>PgeX1+u:YAR*R`'h.oOQ"W33I[n\"aNc%7o
%^7:j=_'<Z&R\,31H+9b'!m*Z!^WHK9,fqn3gu%E2MAuatRf9+M%hc'.N(P-0:iNPNeOH?0Zk:\&0j;Fj_Gtu&??K!0Z[*c5g-k[g
%5]/Zt-FGRqc5n$a-*TP\<sgKj(mm'_]g:F8,jAt;g]hdL14b=Ta0L(^rZ'sh].0_l8Uq;>B`<N1B8%>.k<An@TC%H5B@<3TOm^:[
%_7"WBlg>u43'`nn]3l"b:iK]kEMl!%GFa4G)Thl1HhH`:pfECbm"8*2-8akr*-liD_NoQ!<ENgE9Qm)06i*0X/#A2PR;M>3"t.)M
%ETK3UK(jL28Kp!TT7tPJ%B:fo\M$,j!"?/8.af.WCsib:P5@W-LLDB*!fi5Kd^sROl&p4[4bsZY4T-KV@k5ePk9@ODE6^6h#_N4&
%J.Nl[b'="cKe\i<,'5O?7/g)7S:8sBIh;sWbUaXJ-a+a7%;@a9hjVuT+.h@!9DqXb7gI;LZS\/mM^0-u9H$Y45iK7PQ+.I@b4&MB
%0'TXM>C?Z6>V5C,Zm0'D-I@.NcXn_DId4rMgb9&7%/OZd"pF5+r%86s;$_Gg+Hg_IA5Dk(NTR]W6:),RAZuQb@ZWaeMil)dfcp)f
%h(YDfTOen&VI1*0pLm8T:LIp^l)'uY@9bWq%n<BeiB<^^.b[iLYt;e2;H5E_ZcOgg.lC,Z!YXr3%%#'gaO^Z@5gG7]o1N/A%a[Lm
%?'1g][a\R;6k.d8V1Tkc\L'r4+&60U0Ptm8(`"@@XH6Yq<$\E_IU*KaXkbB.`RR;(cF`gn46>cF0s8Jj#8:K`CKhtUTW6b^8A!81
%q%>.9*,elH1Qk6Fq(r=@B^R"`DCIbWG<.0:N"IV?S8:dQm2"acTiZptH#(6idaoMRog.mrT\u=#OmAYpq>rGc@M#FD]V3a/)1p:S
%AD%lOn#L^qBeab&!/4:HA\91(FHGM&(3&*jN[/(?GZXrEKLgkmlR*b,*:o6nIaR1O:5SB7>YMI#nem!-8*qOQ/@QAS7n&t1)oEnu
%/6Y9!!-S((>HaaJ'AF#1T.iSQ*sg17ocR3',Y$*6V+#JK&4i&45"NfflQ9*g@=hQ-1nW*aLEL=JSc0&13uUK.?T]c-pUb-b,C+26
%VgN[.>1Du4*b>H")+,R`!o6Z(*$nD/8[;:i#)U4[__0+AQ@k[gn<C8H.>R#:m#1&)mdTN-rnWn1Y]Ho=Mk8;'iVTDtYmr`aMApgD
%f1'RDVa1=&;1as%ne;1.`)[\>;"rp?\1dqkDKM%1>maMmoS]%MM,iAsQL!tpGl5KodD8:&PlisbL<K)4'(a:$']Mp>?l@uS)gkDl
%PrO6J:sCAFH.$j7P7&g_W="1m(u`RS(`ohna!<G-3bEo!(CiKNlPT]`\b]nKF)4ur;NoHdV>Zq$l*7X]+p<oIH/'8$[flk,?/eO4
%9+(+D7/26AdM@\4A8j*?2-`7uO(b[8GlUced(`d\!9=AkMRa(\p[$?Qf3GIO$7On4'N,(Zi10![,a32R54eg8ojFl44V@qp>Vm00
%gg%^so""P`.C:\)lun2;rdB(o15oQ4C[MNt.0c+@WPJ?JBVR0D:b3QSkr&P`jt.l],;#B0];7A6+UF@OPU7;uW8[i8-085"aup;I
%W71OnNH3F[)il*3ZIDNp!:mOM\!o3JN1UEfL]Yo7_:#U(/1]IO?.P;ZKMqG]Qo9A:S,a%N:K=Yq2a9>:,ii;G!%$s(J%)!L@)?0m
%-:YtVHS-s]r,%>M45P'`fY6XfD+!ucN"JdYb*LKl1'\IXJ-*[d;V/d'G5/4rDG:*3'Nb7FmJ+Foq@:Y\@)<lrIPfjta<d8G&t!F!
%h#bCXl.RcoWqUBVbJXt-(lmA<rF*%)6Z@LNMK(6G0GP&KNp2lM;Mb*LhK+K1B(?S5Vn@XjG_b>PK/@qoN.K,>=]Cn.*XcJ9$rM)"
%>U3]qP69]EEE\*cl8Ji<m3T%RKPV5F1Hhh&,iXg@Bhf[3!%Kl9YiWkM]n=g^R>Zd.(Xg[35e:+3H>$b-CR5K`!SA[FhN*6`h?@p>
%I*_J:Oo;i4e6;@t-A%):O:3W67kNc4l&%<.9XFU2NPrJY*psZhE9\!2]=Dh]/[e!Y"-cit%C0UnE1`r#I%^(D3*'.N=HFhlkds;T
%.1K+mAJYThXq><cC_:bS%gGRm3<?=l`[:q0R&ufoOY:<+F#sF/$s]4mg18&+:qHfWiA'4\N'I*1NN3IiTGg<9<mRUq;VZ'rT[9Ks
%$7.4GC%sG@+V2F^$:E<X@XqSnP!u?H\1@DJ"'$ENF0:):HPiAO6sG6`PhDt%2K&B%@.`.C,"k\0DIL@(P&G5a)<g6rX=P:5FX\"4
%Mj[\8&dpcuYD3<L"CsiR^s8DZ(>SS:%V9)fMd)Q^MB+4o!K$4-[fJOs"XhEQ%S3uLQD,oFIWCj$SlD!tJn;FBlta^k9QR=>$R`a,
%gsQ_c<gF=6W<p.SA(g(L2o_aI"gAU5=M>U`[5WVcCPdtZl<>6o\4Bt,iZe=5,qcnl@-25s>ekqiLF4BQ^k)jsS/#*nlSl99?tA/^
%ar5(8%T'[Pe2;E1e#=;hrML^W2K2)SBE?9I"^"JrKM+`&,lobpUC&AM7"uE%Nu4-!`B#+"OekO,"JH-F6!AabZ_Vp4([DJ"PB@Vf
%Y\abq9#b/4,`G<?Vm".P!#_[#.?ep*@1qs=P$Fm>crlkR8Yd@3G524RNi\(Cot6_[&o8<qM\qgW#Nm"l$pst$e#B'D4Q&_s`;u&h
%<"'c<+C>Z+-3E=r'T,D(iBj:Z7oppV;9%j916nhH3,%loD\B?"'?VfeYfR=R/8C:hh3\VE&MYCp83%-C@T5SM5tG(j.Msl!0#Q7j
%K7s3#4CMS`eMUOh(heZIC<koPRpb;?W]B/%$XTll2ZA==hCPJ(B#bJ3S*JN].s3lg@`F-#YjEli$YU`kNoKV,Yd-!2?F*2<=m1CC
%98df80d&6-nUe.VZ&_$iEA?u/&4MVjapDI!<B0_hit:](@T2KpFgEBm/''Nh*/k^;_Gf]WJJDWTp0")8<Q5hcG7Vh:)H@VdGjM<9
%(LeAe2k7PeW,bUj#^6Vqp.Uuc9*eWQnkR]m/'5qWn$E01,K:U`@RI_uln)3->9W"Hl\If8c#ZlW!6D*tCZ@6=AACeQ?jSg?;eRsh
%LH>D$`/Y^NK=+*O!!/f]%P3FR%)+..(>->`5-a%:+a`cGjRMNVhFd"RRP/bmH4:@1]RV\cBth)]Phc`#Bn6V@f%+5227F;@H82[6
%SaWp#nK!/kW8nD8h/9\=i"DHLd?)G,aI3V"lA-$(o"-#\82q]9'&gYpT'NDdd&mpe7)0AUa*cP/*Fl7L;XC@%*HpW)>TpusP?sBj
%$sk5_g(N'd'ip=qQN3^.J0uRS`5/O&;N$2@)6J`[?GC6fa09QN'f0nK)BG>QKd8k`Ug@W*U@liM0%cUCF0-RbbO]A_J<ZHn"kNl1
%\DjK.B,B!V(eEI.?(rU1KX&*c`"_S10R!a&*`GLiYa.9`kFg<B^e56bh)qAX"%Y^TOT`M!"pIeU3d,-4_XTq/Zr91=_OqWN$ZQ#C
%\iNV-G!/&Kj4f2TnX,LWZ+R`T2NJ>[INZ.['<"T<5X!kW7Sn1[#f2,n!3`%I(u;"a#,%oXg&UCH$cX'\\g;_o/97dK\tu>"$R8)%
%Z_l5N8&Z@P;G(lP"!4W9V*W6Y@O2ogM"mk6O<8_GS5U^_kHID(L;shq7F)*\U>SIn71s:?4]YVs,\/TaU&&Lr,o!ID\bhfW[UMj\
%2:IWt.FDrfNQkSH;0Gl4@A/i1YIOl'najG+j.*JgHVa>!`dX3OAXdTD$ZoM<7M,Y&nR_5d9L:L^_O9cs@K)kH*J(f5qf%]rp4:ZX
%AX&ROcW`_^qMCk9_O;5D0,F:kT,pWZmdDP$C1]]n+T+9Dot<!.lrkf3#foktW>DEFk%bh1W<SFh-:drH%u.(UUIfbin^[a`-cr5n
%p;@@.9d0fk0EJH&%hrULN/:B]VI!*_3FMmUFB,3#r,QHF2g#c[(o]cVR^,Qe`>JY#>jP2#od$pi[M(QL=qP1GrL:Ut>Yi_$m/GQa
%.E#bUPlQXNgh34.q9Ls.?hJGrT14&c!$6i!h9K;\C%EoZgf+h8nl3FL#oP?l=9+'k>1(_C0IOYT%UK^,3Z2Ph*0cd&/f.\"(p?@.
%BFJnB.RK0!@<)UQALP%_lMC/ZfAq@6Z.="Iq(\-cVXb&ult,\c)bODAEIC<Bb@;!W9l,8/e)6#FgJU/1$F=Xo(Trq<%9Aam0(m3'
%m7p^e`YOfH;\XlpDR'_f>!mY!5s%1DaOc!VX\eC3+\#Nse*D;tLaD\S/bT0Mbf2*YSQJ"n58-/srD7b^k]bMSPh]50?PfB^*I#Wt
%>h_XS>u0B?f*YA<,`M>_V(gK"`VJ"Mk_jGNcRmE$`:0q?"ntYo'a;f5$pfk-"hV<F>k<D^&ZF15IVL7GjRltsU%tXU[8/C*,d)G3
%S6B0$$J*j(/TQrt\t<0]!t7k*1Q+=f^oH5?@X<>D?WhH.RqJb'27WsUGZ,[`0APlmEN5^*G2X6?Z%8QW.^4)s!OAIPMT;HWM8&`P
%H7l7@Zc#:PI=Vt,!?V?Q2HX3a1_eMId2T/u;'9u%3("W4<#f$jj8l17f2sjB,-g\H#R,L!5"PO5Tq](dM3,d?I3g0#HB=bO(R[$j
%9$*FF,6S/,/I5<l9"oi#DR5]fG,C`3YDZo8/9A)-$)A'ej@qm#A!=o!Q\l;H2^3=K?^hJ*e*`]^W]R@7k^h+/HhQ,p"W)-t9(7[J
%?CT(#R^&`uHT.ZQ2*Sc2E<?Ch+PC+Xi!3cjbaq5a\Q&SG""`4mb!_&K%>_09Q>"3)/+fst(/lZk,QagU&**l1V_NZ2N+P>S.PQCP
%Z$=49(sYE,/^=["c=Ku&Ght5b;.0-M/fL2MCS&\X134iUdNUl;W'pHZG6*;5A)BJ3rnJ.`DR?NJJN?HD?J99ZUFrrh%GP#K]c:g.
%J.3@,P^EgfiDWE6ogYTM]>[850QMKIYos\3j]>:2>TE832=X7Am<HNC0h"1f1',@YS95&A/RWGt(Lq^4.E4!#Yp^n?>^:7u)D:Z"
%O%gmJN;KJQM"L\)n.q%-l5"2e1<Fg^-h(_XS.?,OP,@e54q"TWC'4<#?#Rio\'diDII70#5'$clid*5OFqni5(IVX@AJ<].=!Vp#
%c6+Z?#@*ef::[htm$AIY"<5Qm-jGY4OgpXlr.8fli0CBLg8EAe(%G9\06%m-$:5!K?:AY"TL7:PRkGt+-:tFD/YOP0KK+C!HD&T`
%>B@(%XliV[SYlMJ^$qs'TkbRLk5#msikHo2a[G[eV+r4f!<k[;R3L85Io(T!,qOmQ=P%1kjph6?MT.%gb/$6_"l>U5"9MPf`H)/"
%6V+#0)`F8FM$rQqL3Q%AN%OmC$9)kqdp*9's-P64"'#G^p??A.a32SbkRlKPOS16ZRDlS[7,\JU/%dhpL:<s?\;'T7+#g./O9_q>
%j2*=Kk2"*ugSK0ZEnI$2O04TiGZ$QDf$J($/BPMt1C`0q%37a@b#G^%Ieqi6kd5!Q2KrZoLm4<U%K9as2jM,N2r.Oa/V=4lh0-oE
%XCi/?5&g$K+Vc"SPVh/<b\Tp6*a@`id@%9tFs9bM4-@/]!rYt?GuS9JFWPM+bE?s=q*67>pU#G8Wir_e&UTVp7*^>/B+fP4cA/@F
%\$gR1P,(BsBi$R:n#N=u/7OT.;tuF[_sIh-`Y+)1hQ"T&p8loagmF2*C@SZjj?p/Hf4>U^-9Xnff6pqJo];$D#Ro31g<kQ.=QF%j
%lBrJ(a"e5N+!QdIERej#<PNlX<LD>P70k\.SL&MW#hQrO4Y6nB*6<f9XI?rLi4C51U%&j6/Rd3!4Hr2V[KjM>iP^aE-rIr/#r6V3
%JF_WmBO$:2JOTn58JZ3hMQVh1M!J@fg:/>9+liiY=^FuhM*VlBgj'bL69n*N4_O+3gOh&HP32qdV$jVhiWSIjSP&[7(3M-8/ndKO
%a^)9i.jM8ee=Z(+*?$LpRR;MFCMn3TgHfEA&ANU=Ca_'(XYmke$<-+hXRjsN/rTB]V\cs#Y;jF2TF.ZS:GOQ6c=ne\LViZMhBH(W
%!"aFVS]3]II#tn2@pF^3R,=r)=,[L-LGd.O6\::Coqa.',GIILXs/K2!ekg+Hdo*4A2Q@(`,7=<AWU\,WR,=r"HX[mq71NfZ,)(j
%Q7iGBV/%,\enP&0TQP)Op2abnqR\DsE;[\)r;GOQiW&bPhuCT@+?9B"T7?n"%hHGTa+"68rkj5p^O#\PJ,7&Is,[3R:OdWakPtD9
%rY6-[[(YrFJ+8m*iICn!5Pq(J#0AS~>
%AI9_PrivateDataEnd
